(()=>{"use strict";const e=(()=>{const e=()=>JSON.parse(localStorage.getItem("projects")||"[]"),t=t=>{const n=e(),a=n.find((e=>e.id==t.id));a?(a.projectName=t.projectName,a.tasks=t.tasks):(t.id=Math.floor(1e6*Math.random()),n.push(t)),localStorage.setItem("projects",JSON.stringify(n))};return{getProjects:e,getTasks:t=>e().find((e=>e.id==t)).tasks,saveProject:t,deleteProject:t=>{const n=e().filter((e=>e.id!=t));localStorage.setItem("projects",JSON.stringify(n))},deleteTask:(n,a)=>{const r=e().find((e=>e.id==n)),s=r.tasks.filter((e=>e.taskId!=a));r.tasks=s,t(r)},findTaskToUpdate:(t,n)=>e().find((e=>e.id==t)).tasks.find((e=>e.taskId==n)),updateTask:(t,n)=>{const a=e(),r=a.find((e=>e.id==t)),s=r.tasks,o=s.findIndex((e=>e.taskId==n.taskId));s[o]=n,r.tasks=s,localStorage.setItem("projects",JSON.stringify(a))}}})(),t=(()=>{const t=()=>{const t=e.getProjects();n(t)},n=e=>{o(e)},a=e=>{c(e)};return{onProjectSelect:t=>{const n=e.getProjects().find((e=>e.id==t)),r=document.querySelector(`[data-project-id='${n.id}']`);a(r)},onProjectAdd:n=>{const r={projectName:n,tasks:[]};e.saveProject(r),t();const s=document.querySelector(`[data-project-id='${r.id}']`);a(s)},onProjectNameEdit:(n,a,r=e.getTasks(n))=>{e.saveProject({id:n,projectName:a,tasks:r}),t()},onTaskAdd:(t,n)=>{const a={item:t,taskId:Math.floor(1e6*Math.random()),priority:"low",dueDate:null,isComplete:!1},r=e.getProjects().find((e=>e.id==n));return r.tasks.push(a),e.saveProject(r),a},onTaskNameEdit:(t,n,a)=>{const r=e.findTaskToUpdate(t,n);e.updateTask(t,{item:a,taskId:r.taskId,priority:r.priority,dueDate:r.dueDate,isComplete:r.isComplete})},onTaskPriorityEdit:(t,n,a)=>{const r=e.findTaskToUpdate(t,n);e.updateTask(t,{item:r.item,taskId:r.taskId,priority:a,dueDate:r.dueDate,isComplete:r.isComplete})},onTaskDueDateEdit:(t,n,a)=>{const r=e.findTaskToUpdate(t,n);e.updateTask(t,{item:r.item,taskId:r.taskId,priority:r.priority,dueDate:a,isComplete:r.isComplete})}}})(),n=()=>({createListElement:e=>{const t=document.createElement("li");return t.setAttribute("class",e),t},createSpanElement:e=>{const t=document.createElement("span");return t.classList.add(e),t},createImageElement:(e,t)=>{const n=document.createElement("img");return n.classList.add(t),n.setAttribute("src",e),n.setAttribute("draggable","false"),n},createInputField:e=>{const t=document.createElement("input");return t.setAttribute("type","text"),t.setAttribute("placeholder",e),t.setAttribute("id","user-input"),t.required=!0,t},createForm:()=>document.createElement("form"),createDiv:e=>{const t=document.createElement("div");return t.setAttribute("class",e),t}}),a=()=>{const e=n(),t=e.createSpanElement("icons"),a=e.createImageElement("images/edit-icon.svg","edit-icon"),r=e.createImageElement("images/delete-icon.svg","delete-icon");return a.classList.add("edit-project"),r.classList.add("delete-project"),t.append(a,r),t},r=e=>{const t=n(),a=document.querySelector(".project-list"),r=a.childElementCount-2,s=a.children[r].textContent,o=document.querySelector("#writing-area"),c=t.createDiv("project");c.setAttribute("data-project-id",e);const i=t.createDiv("skip-line"),d=t.createDiv("project-heading"),l=document.createElement("h2");l.setAttribute("class","notepad-text"),l.textContent=s;const m=document.createElement("h3");m.setAttribute("class","notepad-text"),m.textContent="Due Date";const p=document.createElement("ul");p.classList.add("notepad-text","todos");const u=t.createListElement("task"),E=t.createSpanElement("add-task"),g=t.createImageElement("images/add-icon.svg","add-icon");E.append(g,"Add Task"),u.append(E),p.append(u,i),d.append(l,m),c.append(d,p),o.append(c)},s=(e,t)=>{const r=n(),s=r.createListElement("project-item");s.setAttribute("data-project-id",e);const o=r.createSpanElement("project-name");o.textContent=t;const c=a();return s.append(o,c),s},o=e=>{const n=document.querySelector(".project-list"),a=document.querySelector("[data-add-project]");[].slice.call(n.children).forEach((e=>{e.classList.contains("project-item")&&e.remove()}));for(const t of e){const e=s(t.id,t.projectName);n.insertBefore(e,a)}n.querySelectorAll(".project-item").forEach((e=>{e.addEventListener("click",(()=>{t.onProjectSelect(e.dataset.projectId)}))}))},c=e=>{const t=document.querySelector(".active");t&&t.classList.remove("active"),e.classList.add("active"),e.children.item(0)},i=()=>null!=document.querySelector("#user-input"),d=()=>{const e=document.querySelector("#user-input"),t=e.parentElement.parentElement,a=n().createSpanElement("project-name"),r=e.value.trim();r&&(a.textContent=r,e.parentElement.remove(),t.insertBefore(a,t.childNodes[0]))},l=()=>{if(i())return;(()=>{const e=n(),t=document.querySelector(".project-list"),r=e.createListElement("project-item"),s=e.createForm(),o=e.createInputField("Project name...");s.append(o);const c=a();r.append(s,c),t.insertBefore(r,t.lastElementChild),setTimeout((()=>{o.focus()}),0)})();const e=document.querySelector("#user-input"),s=e.parentElement,o=s.parentElement;e.addEventListener("blur",(function(){if(""==e.value.trim())return void o.remove();d();const n=o.firstElementChild.textContent;t.onProjectAdd(n);const a=document.querySelector(".project-list"),s=a.children[a.childElementCount-2].getAttribute("data-project-id");i()||r(s)})),s.addEventListener("submit",(function(e){e.preventDefault(),d();const n=o.firstElementChild.textContent;t.onProjectAdd(n);const a=document.querySelector(".project-list"),s=a.children[a.childElementCount-2].getAttribute("data-project-id");i()||r(s)}))},m=()=>{const e=document.querySelector("#user-input"),t=e.parentElement,n=t.parentElement.parentElement;e.addEventListener("blur",(function(t){const a=t.target.closest("[data-project-id]").dataset.projectId,r=e.value;u(),r&&p(r,a,n)})),t.addEventListener("submit",(function(t){t.preventDefault();const a=t.target.closest("[data-project-id]").dataset.projectId,r=e.value;u(),r&&p(r,a,n)}))},p=(e,n,a)=>{if(a.dataset.taskId)return t.onTaskNameEdit(n,a.dataset.taskId,e);const r=t.onTaskAdd(e,n);a.setAttribute("data-task-id",r.taskId)},u=()=>{const e=document.querySelector("#user-input"),t=e.parentElement,a=t.parentElement,r=a.parentElement,s=e.value.trim(),o=n().createSpanElement("task-text");o.append(s),""!=s||r.dataset.taskId?""==s&&r.dataset.taskId||(t.remove(),a.prepend(o)):r.remove()};window.onload=()=>{const t=e.getProjects();o(t)},(()=>{const e=document.getElementById("bars-icon-mobile");window.innerWidth<=1024&&e.classList.contains("hidden")&&e.classList.toggle("hidden");const t=document.getElementById("sidebar"),n=()=>{t.classList.toggle("toggle-sidebar"),window.innerWidth<=1024&&e.classList.toggle("hidden")};document.querySelectorAll(".bars-icon").forEach((e=>{e.addEventListener("click",n)}))})(),document.addEventListener("click",(t=>{if(t.target.closest(".delete-project")){const n=t.target.closest(".project-item");n.remove();const a=n.dataset.projectId;e.deleteProject(a)}})),document.querySelector("[data-add-project]").addEventListener("click",l),document.addEventListener("click",(e=>{e.target.classList.contains("edit-project")&&(e=>{if(i())return;const a=n().createForm(),r=n().createInputField("Project name..."),s=e.target.parentElement.previousElementSibling;r.value=s.textContent,s.remove(),a.append(r);const o=e.target.closest(".project-item");o.insertBefore(a,o.childNodes[0]);const c=document.querySelector("#user-input"),l=o.dataset.projectId;c.addEventListener("blur",(function(){""!=c.value&&d();const e=o.firstElementChild.textContent;t.onProjectNameEdit(l,e)})),a.addEventListener("submit",(function(e){e.preventDefault(),d();const n=o.firstElementChild.textContent;t.onProjectNameEdit(l,n)}))})(e)})),document.addEventListener("click",(a=>{a.target.classList.contains("task-item")&&a.target.parentElement.classList.toggle("completed"),a.target.classList.contains("add-task")&&((a=>{if(document.getElementById("user-input"))return;const r=n().createListElement("task"),s=n().createSpanElement("task-item"),o=n().createForm(),c=n().createInputField("Enter Task...");o.append(c),s.append(o);const i=n().createSpanElement("icons"),d=n().createImageElement("images/edit-icon.svg","edit-icon"),l=n().createImageElement("images/delete-icon.svg","delete-icon");d.addEventListener("click",(()=>{if(r.classList.contains("completed"))return;const e=document.querySelector(".task-text"),t=e.textContent;e.remove();const a=n().createForm(),o=n().createInputField("Enter Task...");o.value=t,a.append(o),s.insertBefore(a,i),r.prepend(s),m()})),l.addEventListener("click",(t=>{const n=t.target.closest("[data-project-id]").dataset.projectId,a=t.target.closest("[data-task-id]").dataset.taskId;r.remove(),e.deleteTask(n,a)})),i.append(d,l),s.append(i);const p=(()=>{const e=n().createSpanElement("due-date"),a=n().createImageElement("images/priority-icon.svg","priority-icon");a.classList.add("priority-low");const r=document.createElement("label");r.classList.add("date-label");const s=document.createElement("input");s.setAttribute("type","date"),s.required=!0;const o=n().createImageElement("images/calendar-icon.svg","calendar-icon");return r.append(s,o),e.append(a,r),s.addEventListener("change",(()=>{const e=s.closest([".project"]).dataset.projectId,n=s.closest("[data-task-id").dataset.taskId,a=s.value;return t.onTaskDueDateEdit(e,n,a)})),e})();r.append(s,p);const u=a.closest(".todos"),E=u.childElementCount-2;u.insertBefore(r,u.children[E]),setTimeout((()=>{c.focus()}),0)})(a.target),m()),a.target.classList.contains("priority-icon")&&(e=>{if(e.parentElement.parentElement.classList.contains("completed"))return;const n=e.closest([".project"]).dataset.projectId,a=e.closest("[data-task-id").dataset.taskId,r=e.classList;r.contains("priority-low")?(r.remove("priority-low"),r.add("priority-medium"),t.onTaskPriorityEdit(n,a,"medium")):r.contains("priority-medium")?(r.remove("priority-medium"),r.add("priority-high"),t.onTaskPriorityEdit(n,a,"high")):r.contains("priority-high")&&(r.remove("priority-high"),r.add("priority-low"),t.onTaskPriorityEdit(n,a,"low"))})(a.target)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,