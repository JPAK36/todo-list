(()=>{"use strict";const e=(()=>{const e=()=>JSON.parse(localStorage.getItem("projects")||"[]"),t=t=>{const a=e(),n=a.find((e=>e.id==t.id));n?(n.projectName=t.projectName,n.tasks=t.tasks):(t.id=Math.floor(1e6*Math.random()),a.push(t)),localStorage.setItem("projects",JSON.stringify(a))};return{getProjects:e,getTasks:t=>e().find((e=>e.id==t)).tasks,saveProject:t,deleteProject:t=>{const a=e().filter((e=>e.id!=t));localStorage.setItem("projects",JSON.stringify(a))},deleteTask:(a,n)=>{const s=e().find((e=>e.id==a)),o=s.tasks.filter((e=>e.taskId!=n));s.tasks=o,t(s)},findTaskToUpdate:(t,a)=>e().find((e=>e.id==t)).tasks.find((e=>e.taskId==a)),updateTask:(t,a)=>{const n=e(),s=n.find((e=>e.id==t)),o=s.tasks,r=o.findIndex((e=>e.taskId==a.taskId));o[r]=a,s.tasks=o,localStorage.setItem("projects",JSON.stringify(n))}}})(),t=(()=>{const t=()=>{const t=e.getProjects();a(t)},a=e=>{c(e)},n=e=>{i(e)};return{onProjectSelect:t=>{const a=e.getProjects().find((e=>e.id==t)),s=document.querySelector(`[data-project-id='${a.id}']`);n(s)},onProjectAdd:a=>{const s={projectName:a,tasks:[]};e.saveProject(s),t();const o=document.querySelector(`[data-project-id='${s.id}']`);n(o)},onProjectNameEdit:(a,n,s=e.getTasks(a))=>{e.saveProject({id:a,projectName:n,tasks:s}),t()},onTaskAdd:(t,a)=>{const n={item:t,taskId:Math.floor(1e6*Math.random()),priority:"low",dueDate:null,isComplete:!1},s=e.getProjects().find((e=>e.id==a));return s.tasks.push(n),e.saveProject(s),n},onTaskNameEdit:(t,a,n)=>{const s=e.findTaskToUpdate(t,a);e.updateTask(t,{item:n,taskId:s.taskId,priority:s.priority,dueDate:s.dueDate,isComplete:s.isComplete})},onTaskPriorityEdit:(t,a,n)=>{const s=e.findTaskToUpdate(t,a);e.updateTask(t,{item:s.item,taskId:s.taskId,priority:n,dueDate:s.dueDate,isComplete:s.isComplete})},onTaskDueDateEdit:(t,a,n)=>{const s=e.findTaskToUpdate(t,a);e.updateTask(t,{item:s.item,taskId:s.taskId,priority:s.priority,dueDate:n,isComplete:s.isComplete})},onTaskCompleteEdit:(t,a,n)=>{const s=e.findTaskToUpdate(t,a);e.updateTask(t,{item:s.item,taskId:s.taskId,priority:s.priority,dueDate:s.dueDate,isComplete:n})}}})(),a=()=>({createListElement:e=>{const t=document.createElement("li");return t.setAttribute("class",e),t},createSpanElement:e=>{const t=document.createElement("span");return t.classList.add(e),t},createImageElement:(e,t)=>{const a=document.createElement("img");return a.classList.add(t),a.setAttribute("src",e),a.setAttribute("draggable","false"),a},createInputField:e=>{const t=document.createElement("input");return t.setAttribute("type","text"),t.setAttribute("placeholder",e),t.setAttribute("id","user-input"),t.required=!0,t},createForm:()=>document.createElement("form"),createDiv:e=>{const t=document.createElement("div");return t.setAttribute("class",e),t}}),n=()=>{const e=a(),t=e.createSpanElement("icons"),n=e.createImageElement("images/edit-icon.svg","edit-icon"),s=e.createImageElement("images/delete-icon.svg","delete-icon");return n.classList.add("edit-project"),s.classList.add("delete-project"),t.append(n,s),t},s=t=>{const n=a(),s=e.getProjects().find((e=>e.id==t)).projectName,o=document.querySelector("#writing-area"),r=n.createDiv("project");r.setAttribute("data-project-id",t);const c=n.createDiv("skip-line"),i=n.createDiv("project-heading"),d=document.createElement("h2");d.setAttribute("class","notepad-text"),d.textContent=s;const l=document.createElement("h3");l.setAttribute("class","notepad-text"),l.textContent="Due Date";const p=document.createElement("ul");p.classList.add("notepad-text","todos");const m=n.createListElement("task"),u=n.createSpanElement("add-task"),E=n.createImageElement("images/add-icon.svg","add-icon");u.append(E,"Add Task"),m.append(u),p.append(m,c),i.append(d,l),r.append(i,p),o.append(r)},o=()=>{const e=a().createSpanElement("due-date"),n=a().createImageElement("images/priority-icon.svg","priority-icon");n.classList.add("priority-low");const s=document.createElement("label");s.classList.add("date-label");const o=document.createElement("input");o.setAttribute("type","date"),o.required=!0;const r=a().createImageElement("images/calendar-icon.svg","calendar-icon");return s.append(o,r),e.append(n,s),o.addEventListener("change",(()=>{const e=o.closest(".project").dataset.projectId,a=o.closest("[data-task-id]").dataset.taskId,n=o.value;return t.onTaskDueDateEdit(e,a,n)})),e},r=(e,t)=>{const s=a(),o=s.createListElement("project-item");o.setAttribute("data-project-id",e);const r=s.createSpanElement("project-name");r.textContent=t;const c=n();return o.append(r,c),o},c=e=>{const a=document.querySelector(".project-list"),n=document.querySelector("[data-add-project]");[].slice.call(a.children).forEach((e=>{e.classList.contains("project-item")&&e.remove()}));for(const t of e){const e=r(t.id,t.projectName);a.insertBefore(e,n)}a.querySelectorAll(".project-item").forEach((e=>{e.addEventListener("click",(()=>{t.onProjectSelect(e.dataset.projectId)}))}))},i=e=>{const t=document.querySelector(".active");t&&t.classList.remove("active"),e.classList.add("active"),e.children.item(0)},d=()=>null!=document.querySelector("#user-input"),l=()=>{const e=document.querySelector("#user-input"),t=e.parentElement.parentElement,n=a().createSpanElement("project-name"),s=e.value.trim();s&&(n.textContent=s,e.parentElement.remove(),t.insertBefore(n,t.childNodes[0]))},p=()=>{if(d())return;(()=>{const e=a(),t=document.querySelector(".project-list"),s=e.createListElement("project-item"),o=e.createForm(),r=e.createInputField("Project name...");o.append(r);const c=n();s.append(o,c),t.insertBefore(s,t.lastElementChild),setTimeout((()=>{r.focus()}),0)})();const e=document.querySelector("#user-input"),o=e.parentElement,r=o.parentElement;e.addEventListener("blur",(function(){if(""==e.value.trim())return void r.remove();l();const a=r.firstElementChild.textContent;t.onProjectAdd(a);const n=document.querySelector(".project-list"),o=n.children[n.childElementCount-2].getAttribute("data-project-id");d()||s(o)})),o.addEventListener("submit",(function(e){e.preventDefault(),l();const a=r.firstElementChild.textContent;t.onProjectAdd(a);const n=document.querySelector(".project-list"),o=n.children[n.childElementCount-2].getAttribute("data-project-id");d()||s(o)}))},m=()=>{const e=document.querySelector("#user-input"),t=e.parentElement,a=t.parentElement.parentElement;e.addEventListener("blur",(function(){const t=a.closest("[data-project-id]").dataset.projectId,n=e.value;E(),n&&u(n,t,a)})),t.addEventListener("submit",(function(t){t.preventDefault();const n=a.closest("[data-project-id]").dataset.projectId,s=e.value;E(),s&&u(s,n,a)}))},u=(e,a,n)=>{if(n.dataset.taskId)return t.onTaskNameEdit(a,n.dataset.taskId,e);const s=t.onTaskAdd(e,a);n.setAttribute("data-task-id",s.taskId)},E=()=>{const e=document.querySelector("#user-input"),t=e.parentElement,n=t.parentElement,s=n.parentElement,o=e.value.trim(),r=a().createSpanElement("task-text");r.append(o),""!=o||s.dataset.taskId?""==o&&s.dataset.taskId||(t.remove(),n.prepend(r)):s.remove()};window.onload=()=>{const t=e.getProjects();c(t),(()=>{const e=document.querySelector(".notepad");t.forEach((t=>{s(t.id);const r=t.tasks,c=e.querySelector(`[data-project-id="${t.id}"]`),i=c.querySelector("ul"),d=c.querySelector(".add-task");r.forEach((e=>{const t=(e=>{const t=a(),s=t.createListElement("task");s.setAttribute("data-task-id",e.taskId);const r=t.createSpanElement("task-item"),c=t.createSpanElement("task-text");c.textContent=e.item;const i=n();r.append(c,i);const d=o();return d.querySelector(".priority-icon").classList.add(`priority-${e.priority}`),d.querySelector("input").value=e.dueDate,e.isComplete&&s.classList.add("completed"),s.append(r,d),s})(e);i.insertBefore(t,d.parentElement)}))}))})()},(()=>{const e=document.getElementById("bars-icon-mobile");window.innerWidth<=1024&&e.classList.contains("hidden")&&e.classList.toggle("hidden");const t=document.getElementById("sidebar"),a=()=>{t.classList.toggle("toggle-sidebar"),window.innerWidth<=1024&&e.classList.toggle("hidden")};document.querySelectorAll(".bars-icon").forEach((e=>{e.addEventListener("click",a)}))})(),document.querySelector(".project-list").addEventListener("click",(t=>{if(t.target.closest(".delete-project")){const a=t.target.closest(".project-item");a.remove();const n=a.dataset.projectId;e.deleteProject(n)}})),document.querySelector("[data-add-project]").addEventListener("click",p),document.querySelector(".project-list").addEventListener("click",(e=>{e.target.classList.contains("edit-project")&&(e=>{if(d())return;const n=a().createForm(),s=a().createInputField("Project name..."),o=e.target.parentElement.previousElementSibling;s.value=o.textContent,o.remove(),n.append(s);const r=e.target.closest(".project-item");r.insertBefore(n,r.childNodes[0]);const c=document.querySelector("#user-input");c.focus();const i=r.dataset.projectId;c.addEventListener("blur",(function(){""!=c.value&&l();const e=r.firstElementChild.textContent;p(i,e),t.onProjectNameEdit(i,e)})),n.addEventListener("submit",(function(e){e.preventDefault(),l();const a=r.firstElementChild.textContent;p(i,a),t.onProjectNameEdit(i,a)}));const p=(e,t)=>{const a=document.querySelector(".notepad").querySelector(`[data-project-id="${e}"]`);a&&(a.childNodes[0].childNodes[0].textContent=t)}})(e)})),document.querySelector(".notepad").addEventListener("click",(n=>{var s,r;n.target.classList.contains("task-text")?(e=>{e.classList.toggle("completed");let a=!1;e.classList.contains("completed")&&(a=!0);const n=e.closest(".project").dataset.projectId,s=e.dataset.taskId;t.onTaskCompleteEdit(n,s,a)})(n.target.closest(".task")):n.target.classList.contains("add-task")?((e=>{if(document.getElementById("user-input"))return;const t=a().createListElement("task"),n=a().createSpanElement("task-item"),s=a().createForm(),r=a().createInputField("Enter Task...");s.append(r),n.append(s);const c=a().createSpanElement("icons"),i=a().createImageElement("images/edit-icon.svg","edit-icon"),d=a().createImageElement("images/delete-icon.svg","delete-icon");c.append(i,d),n.append(c);const l=o();t.append(n,l);const p=e.closest(".todos"),m=p.childElementCount-2;p.insertBefore(t,p.children[m]),setTimeout((()=>{r.focus()}),0)})(n.target),m()):n.target.classList.contains("priority-icon")?(e=>{if(e.parentElement.parentElement.classList.contains("completed"))return;const a=e.closest(".project").dataset.projectId,n=e.closest("[data-task-id]").dataset.taskId,s=e.classList;s.contains("priority-low")?(s.remove("priority-low"),s.add("priority-medium"),t.onTaskPriorityEdit(a,n,"medium")):s.contains("priority-medium")?(s.remove("priority-medium"),s.add("priority-high"),t.onTaskPriorityEdit(a,n,"high")):s.contains("priority-high")&&(s.remove("priority-high"),s.add("priority-low"),t.onTaskPriorityEdit(a,n,"low"))})(n.target):n.target.classList.contains("edit-icon")?(e=>{if(e.classList.contains("completed"))return;const t=e.querySelector(".task-text"),n=t.textContent;t.remove();const s=a().createForm(),o=a().createInputField("Enter Task...");o.value=n,s.append(o);const r=e.querySelector(".task-item"),c=e.querySelector(".icons");r.insertBefore(s,c),e.prepend(r),o.focus(),m()})(n.target.closest(".task")):n.target.classList.contains("delete-icon")&&(s=n.target.closest("[data-project-id]").dataset.projectId,r=n.target.closest("[data-task-id]").dataset.taskId,document.querySelector(`[data-task-id="${r}"]`).remove(),e.deleteTask(s,r))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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VWlELFNBQVMsYUFBYyxPQUMxQyxNQUFNa0MsRUFBZS9ILEVBQUtpQixjQUFjLGNBQ2xDZ0osRUFBV2xDLEVBQWEzRCxZQUM5QjJELEVBQWFqQyxTQUViLE1BQU1vQixFQUFZOUUsSUFBaUJpQixhQUM3QnFFLEVBQWF0RixJQUFpQmEsaUJBQWlCLGlCQUVyRHlFLEVBQVd2QyxNQUFROEUsRUFDbkIvQyxFQUFVckQsT0FBTzZELEdBRWpCLE1BQU1nQyxFQUFXMUosRUFBS2lCLGNBQWMsY0FDOUJ5QyxFQUFXMUQsRUFBS2lCLGNBQWMsVUFFcEN5SSxFQUFTMUQsYUFBYWtCLEVBQVd4RCxHQUVqQzFELEVBQUtnSSxRQUFRMEIsR0FDYmhDLEVBQVdWLFFBQ1hTLEtDV1F5QyxDQURhM0MsRUFBRTJCLE9BQU9qRSxRQUFRLFVBRzFCc0MsRUFBRTJCLE9BQU90RyxVQUFVaUQsU0FBUyxpQkRWeEJ4RyxFQ1dVa0ksRUFBRTJCLE9BQU9qRSxRQUFRLHFCQUFxQkMsUUFBUTdGLFVEWDdDSyxFQ1lKNkgsRUFBRTJCLE9BQU9qRSxRQUFRLGtCQUFrQkMsUUFBUXhGLE9EWHJEc0IsU0FBU0MsY0FBYyxrQkFBa0J2QixPQUNqRG9HLFNBQ0wsYUFBeUJ6RyxFQUFXSyxRIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3N0b3JhZ2UuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2hhbmRsZXJzLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9jcmVhdGVET01FbGVtZW50cy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvcHJvamVjdHMuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3Rhc2tzLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB1cGRhdGVTdG9yYWdlID0gKCkgPT4ge1xuICAgIFxuICAgIGNvbnN0IGdldFByb2plY3RzID0gKCkgPT4ge1xuICAgICAgICAvLyBjcmVhdGVzIGFuIGFycmF5IG9mIG9iamVjdHMgXG4gICAgICAgIGNvbnN0IHByb2plY3RzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncHJvamVjdHMnKSB8fCAnW10nKTtcbiAgICAgICAgcmV0dXJuIHByb2plY3RzO1xuICAgIH1cblxuICAgIGNvbnN0IGdldFRhc2tzID0gKHByb2plY3RJZCkgPT4ge1xuICAgICAgICBjb25zdCBwcm9qZWN0cyA9IGdldFByb2plY3RzKCk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRQcm9qZWN0ID0gcHJvamVjdHMuZmluZChwcm9qZWN0ID0+IHByb2plY3QuaWQgPT0gcHJvamVjdElkKTtcbiAgICAgICAgY29uc3QgdGFza3MgPSBjdXJyZW50UHJvamVjdC50YXNrcztcbiAgICAgICAgcmV0dXJuIHRhc2tzO1xuICAgIH1cblxuICAgIGNvbnN0IHNhdmVQcm9qZWN0ID0gKHByb2plY3RUb1NhdmUpID0+IHtcbiAgICAgICAgY29uc3QgcHJvamVjdHMgPSBnZXRQcm9qZWN0cygpO1xuXG4gICAgICAgIC8vIGZpbmQgbWV0aG9kIHJldHVybnMgdGhlIGZpcnN0IG9iamVjdCB0aGF0IG1hdGNoZXMgdGhlIGlkXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nID0gcHJvamVjdHMuZmluZChwcm9qZWN0ID0+IHByb2plY3QuaWQgPT0gcHJvamVjdFRvU2F2ZS5pZCk7XG4gICAgICAgIFxuICAgICAgICBpZiAoZXhpc3RpbmcpIHtcbiAgICAgICAgICAgIGV4aXN0aW5nLnByb2plY3ROYW1lID0gcHJvamVjdFRvU2F2ZS5wcm9qZWN0TmFtZTtcbiAgICAgICAgICAgIGV4aXN0aW5nLnRhc2tzID0gcHJvamVjdFRvU2F2ZS50YXNrcztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHByb2plY3RUb1NhdmUuaWQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwKTtcbiAgICAgICAgICAgIC8vIEFkZCBwcm9qZWN0TmFtZVxuICAgICAgICAgICAgLy8gQWRkIFRhc2tzIGFycmF5IGNvbnRhaW5pbmcgYW5vdGhlciBhcnJheSB3aGljaCBpbmNsdWRlcyB0YXNrLCBwcmlvcml0eSwgZHVlRGF0ZSwgYW5kIHRydWUvZmFsc2UgZm9yIGNvbXBsZXRlZCBvciBub3RcbiAgICAgICAgICAgIHByb2plY3RzLnB1c2gocHJvamVjdFRvU2F2ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncHJvamVjdHMnLCBKU09OLnN0cmluZ2lmeShwcm9qZWN0cykpO1xuICAgIH1cblxuICAgIGNvbnN0IHVwZGF0ZVRhc2sgPSAocHJvamVjdElkLCB1cGRhdGVkVGFzaykgPT4ge1xuICAgICAgICAvLyB0YXNrcyBmb3IgY3VycmVudCBwcm9qZWN0XG4gICAgICAgIGNvbnN0IHByb2plY3RzID0gZ2V0UHJvamVjdHMoKTtcbiAgICAgICAgY29uc3QgcHJvamVjdFRvVXBkYXRlID0gcHJvamVjdHMuZmluZChwcm9qZWN0ID0+IHByb2plY3QuaWQgPT0gcHJvamVjdElkKTtcbiAgICAgICAgY29uc3QgdGFza3NBcnJheSA9IHByb2plY3RUb1VwZGF0ZS50YXNrcztcbiAgICAgICAgXG4gICAgICAgIC8vIGZpbmQgdGFzayBpbmRleCBhbmQgcmVwbGFjZSB0aGUgdGFzayBhdCB0aGF0IGluZGV4IHRvIHVwZGF0ZVxuICAgICAgICBjb25zdCBpbmRleE9mVXBkYXRlZFRhc2sgPSB0YXNrc0FycmF5LmZpbmRJbmRleCgodGFza09iaikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRhc2tPYmoudGFza0lkID09IHVwZGF0ZWRUYXNrLnRhc2tJZDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGFza3NBcnJheVtpbmRleE9mVXBkYXRlZFRhc2tdID0gdXBkYXRlZFRhc2s7XG4gICAgICAgIC8vIFNhdmUgdXBkYXRlZCB0YXNrcyBhcnJheSB0byB0aGUgcHJvamVjdCBvYmplY3RcbiAgICAgICAgcHJvamVjdFRvVXBkYXRlLnRhc2tzID0gdGFza3NBcnJheTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Byb2plY3RzJywgSlNPTi5zdHJpbmdpZnkocHJvamVjdHMpKTtcbiAgICB9XG5cbiAgICBjb25zdCBmaW5kVGFza1RvVXBkYXRlID0gKHByb2plY3RJZCwgZXhpc3RpbmdUYXNrSWQpID0+IHtcbiAgICAgICAgY29uc3QgcHJvamVjdHMgPSBnZXRQcm9qZWN0cygpOyAgICAgXG4gICAgICAgIGNvbnN0IHByb2plY3RUb1VwZGF0ZSA9IHByb2plY3RzLmZpbmQocHJvamVjdCA9PiBwcm9qZWN0LmlkID09IHByb2plY3RJZCk7XG4gICAgICAgIGNvbnN0IHRhc2tzQXJyYXkgPSBwcm9qZWN0VG9VcGRhdGUudGFza3NcbiAgICAgICAgY29uc3QgZXhpc3RpbmdUYXNrID0gdGFza3NBcnJheS5maW5kKHRhc2sgPT4gdGFzay50YXNrSWQgPT0gZXhpc3RpbmdUYXNrSWQpO1xuICAgICAgICByZXR1cm4gZXhpc3RpbmdUYXNrO1xuICAgIH1cblxuICAgIGNvbnN0IGRlbGV0ZVByb2plY3QgPSAoaWQpID0+IHtcbiAgICAgICAgY29uc3QgcHJvamVjdHMgPSBnZXRQcm9qZWN0cygpO1xuICAgICAgICBjb25zdCB1cGRhdGVkUHJvamVjdExpc3QgPSBwcm9qZWN0cy5maWx0ZXIocHJvamVjdCA9PiBwcm9qZWN0LmlkICE9IGlkKTtcblxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncHJvamVjdHMnLCBKU09OLnN0cmluZ2lmeSh1cGRhdGVkUHJvamVjdExpc3QpKTtcbiAgICB9XG5cbiAgICBjb25zdCBkZWxldGVUYXNrID0gKGlkLCB0YXNrSWQpID0+IHtcbiAgICAgICAgY29uc3QgcHJvamVjdHMgPSBnZXRQcm9qZWN0cygpO1xuICAgICAgICBjb25zdCBwcm9qZWN0V2l0aFRhc2sgPSBwcm9qZWN0cy5maW5kKHByb2plY3QgPT4gcHJvamVjdC5pZCA9PSBpZCk7XG4gICAgICAgIGNvbnN0IGFsbFRhc2tzID0gcHJvamVjdFdpdGhUYXNrLnRhc2tzO1xuICAgICAgICAvLyBFYWNoIHRhc2sgaXMgYW4gb2JqZWN0XG4gICAgICAgIGNvbnN0IHVwZGF0ZWRUYXNrT2JqID0gYWxsVGFza3MuZmlsdGVyKHRhc2tPYmogPT4gdGFza09iai50YXNrSWQgIT0gdGFza0lkKTtcbiAgICAgICAgcHJvamVjdFdpdGhUYXNrLnRhc2tzID0gdXBkYXRlZFRhc2tPYmo7XG5cbiAgICAgICAgc2F2ZVByb2plY3QocHJvamVjdFdpdGhUYXNrKTtcbiAgICB9XG5cbiAgICByZXR1cm4geyBnZXRQcm9qZWN0cywgZ2V0VGFza3MsIHNhdmVQcm9qZWN0LCBkZWxldGVQcm9qZWN0LCBkZWxldGVUYXNrLCBmaW5kVGFza1RvVXBkYXRlLCB1cGRhdGVUYXNrIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgdXBkYXRlU3RvcmFnZSgpOyIsImltcG9ydCB7IHVwZGF0ZVByb2plY3RMaXN0LCB1cGRhdGVBY3RpdmVUYWIgfSBmcm9tIFwiLi9jcmVhdGVET01FbGVtZW50c1wiO1xuaW1wb3J0IHVwZGF0ZVN0b3JhZ2UgZnJvbSBcIi4vc3RvcmFnZVwiO1xuaW1wb3J0IHtmb3JtYXR9IGZyb20gXCJkYXRlLWZuc1wiO1xuXG5jb25zdCBoYW5kbGVycyA9ICgpID0+IHtcbiAgICBcbiAgICBjb25zdCBfcmVmcmVzaFByb2plY3RMaXN0ID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBwcm9qZWN0cyA9IHVwZGF0ZVN0b3JhZ2UuZ2V0UHJvamVjdHMoKTsgLy8gVXBkYXRlIHByb2plY3RzIGluIHN0b3JhZ2UgICAgICAgIFxuICAgICAgICBfc2V0UHJvamVjdExpc3QocHJvamVjdHMpOyAvLyBVcGRhdGUgcHJvamVjdHMgb24gRE9NXG4gICAgfVxuXG4gICAgY29uc3QgX3NldFByb2plY3RMaXN0ID0gKHByb2plY3RzKSA9PiB7XG4gICAgICAgIHVwZGF0ZVByb2plY3RMaXN0KHByb2plY3RzKTtcbiAgICB9XG5cbiAgICBjb25zdCBfc2V0QWN0aXZlVGFiID0gKHRhYikgPT4ge1xuICAgICAgICB1cGRhdGVBY3RpdmVUYWIodGFiKTtcbiAgICB9XG5cbiAgICAvLyBIZXJlIGJlIGhhbmRsZXJzXG4gICAgY29uc3Qgb25Qcm9qZWN0U2VsZWN0ID0gKHByb2plY3RJZCkgPT4ge1xuICAgICAgICBjb25zdCBwcm9qZWN0cyA9IHVwZGF0ZVN0b3JhZ2UuZ2V0UHJvamVjdHMoKTtcbiAgICAgICAgY29uc3QgcHJvamVjdE9iamVjdCA9IHByb2plY3RzLmZpbmQocHJvamVjdCA9PiBwcm9qZWN0LmlkID09IHByb2plY3RJZCk7XG4gICAgICAgIGNvbnN0IHNlbGVjdGVkUHJvamVjdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXByb2plY3QtaWQ9JyR7cHJvamVjdE9iamVjdC5pZH0nXWApO1xuICAgICAgICBfc2V0QWN0aXZlVGFiKHNlbGVjdGVkUHJvamVjdCk7XG4gICAgfVxuXG4gICAgY29uc3Qgb25Qcm9qZWN0QWRkID0gKHByb2plY3ROYW1lKSA9PiB7XG4gICAgICAgIC8vIHBhc3MgdXNlciBpbnB1dCBpbnRvIGZ1bmN0aW9uXG4gICAgICAgIGNvbnN0IG5ld1Byb2plY3QgPSAge1xuICAgICAgICAgICAgcHJvamVjdE5hbWU6IHByb2plY3ROYW1lLFxuICAgICAgICAgICAgdGFza3M6IFtdXG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlU3RvcmFnZS5zYXZlUHJvamVjdChuZXdQcm9qZWN0KTtcbiAgICAgICAgLy8gYWRkIGlucHV0IHRvIHBhZ2VcbiAgICAgICAgX3JlZnJlc2hQcm9qZWN0TGlzdCgpO1xuICAgICAgICBjb25zdCBuZXdQcm9qZWN0RE9NRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXByb2plY3QtaWQ9JyR7bmV3UHJvamVjdC5pZH0nXWApO1xuICAgICAgICBfc2V0QWN0aXZlVGFiKG5ld1Byb2plY3RET01FbGVtZW50KTtcbiAgICB9XG4gICAgXG4gICAgY29uc3Qgb25UYXNrQWRkID0gKHRhc2ssIGlkKSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld1Rhc2sgPSB7XG4gICAgICAgICAgICBpdGVtOiB0YXNrLCBcbiAgICAgICAgICAgIHRhc2tJZDogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDAwMCksXG4gICAgICAgICAgICBwcmlvcml0eTogJ2xvdycsXG4gICAgICAgICAgICBkdWVEYXRlOiBudWxsLFxuICAgICAgICAgICAgaXNDb21wbGV0ZTogZmFsc2VcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcm9qZWN0cyA9IHVwZGF0ZVN0b3JhZ2UuZ2V0UHJvamVjdHMoKTtcbiAgICAgICAgY29uc3QgcHJvamVjdFRvVXBkYXRlID0gcHJvamVjdHMuZmluZChwcm9qZWN0ID0+IHByb2plY3QuaWQgPT0gaWQpO1xuICAgICAgICBwcm9qZWN0VG9VcGRhdGUudGFza3MucHVzaChuZXdUYXNrKTtcbiAgICAgICAgdXBkYXRlU3RvcmFnZS5zYXZlUHJvamVjdChwcm9qZWN0VG9VcGRhdGUpO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIG5ld1Rhc2s7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IG9uUHJvamVjdE5hbWVFZGl0ID0gKHByb2plY3RJZCwgcHJvamVjdE5hbWUsIHRhc2tzID0gdXBkYXRlU3RvcmFnZS5nZXRUYXNrcyhwcm9qZWN0SWQpKSA9PiB7XG4gICAgICAgIHVwZGF0ZVN0b3JhZ2Uuc2F2ZVByb2plY3Qoe1xuICAgICAgICAgICAgaWQ6IHByb2plY3RJZCxcbiAgICAgICAgICAgIHByb2plY3ROYW1lOiBwcm9qZWN0TmFtZSxcbiAgICAgICAgICAgIHRhc2tzOiB0YXNrc1xuICAgICAgICB9KTtcblxuICAgICAgICBfcmVmcmVzaFByb2plY3RMaXN0KCk7XG4gICAgfVxuXG4gICAgY29uc3Qgb25UYXNrTmFtZUVkaXQgPSAocHJvamVjdElkLCB0YXNrSWQsIG5ld1Rhc2tOYW1lKSA9PiB7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nVGFzayA9IHVwZGF0ZVN0b3JhZ2UuZmluZFRhc2tUb1VwZGF0ZShwcm9qZWN0SWQsIHRhc2tJZCk7XG4gICAgICAgIHVwZGF0ZVN0b3JhZ2UudXBkYXRlVGFzayhwcm9qZWN0SWQsIHtcbiAgICAgICAgICAgICAgICBpdGVtOiBuZXdUYXNrTmFtZSxcbiAgICAgICAgICAgICAgICB0YXNrSWQ6IGV4aXN0aW5nVGFzay50YXNrSWQsXG4gICAgICAgICAgICAgICAgcHJpb3JpdHk6IGV4aXN0aW5nVGFzay5wcmlvcml0eSxcbiAgICAgICAgICAgICAgICBkdWVEYXRlOiBleGlzdGluZ1Rhc2suZHVlRGF0ZSxcbiAgICAgICAgICAgICAgICBpc0NvbXBsZXRlOiBleGlzdGluZ1Rhc2suaXNDb21wbGV0ZVxuICAgICAgICAgICAgfSk7ICBcbiAgICB9XG5cbiAgICBjb25zdCBvblRhc2tQcmlvcml0eUVkaXQgPSAocHJvamVjdElkLCB0YXNrSWQsIG5ld1ByaW9yaXR5KSA9PiB7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nVGFzayA9IHVwZGF0ZVN0b3JhZ2UuZmluZFRhc2tUb1VwZGF0ZShwcm9qZWN0SWQsIHRhc2tJZCk7XG4gICAgICAgIHVwZGF0ZVN0b3JhZ2UudXBkYXRlVGFzayhwcm9qZWN0SWQsIHtcbiAgICAgICAgICAgICAgICBpdGVtOiBleGlzdGluZ1Rhc2suaXRlbSxcbiAgICAgICAgICAgICAgICB0YXNrSWQ6IGV4aXN0aW5nVGFzay50YXNrSWQsXG4gICAgICAgICAgICAgICAgcHJpb3JpdHk6IG5ld1ByaW9yaXR5LFxuICAgICAgICAgICAgICAgIGR1ZURhdGU6IGV4aXN0aW5nVGFzay5kdWVEYXRlLFxuICAgICAgICAgICAgICAgIGlzQ29tcGxldGU6IGV4aXN0aW5nVGFzay5pc0NvbXBsZXRlXG4gICAgICAgICAgICB9KTsgIFxuICAgIH1cblxuICAgIGNvbnN0IG9uVGFza0R1ZURhdGVFZGl0ID0gKHByb2plY3RJZCwgdGFza0lkLCBuZXdEdWVEYXRlKSA9PiB7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nVGFzayA9IHVwZGF0ZVN0b3JhZ2UuZmluZFRhc2tUb1VwZGF0ZShwcm9qZWN0SWQsIHRhc2tJZCk7XG4gICAgICAgIHVwZGF0ZVN0b3JhZ2UudXBkYXRlVGFzayhwcm9qZWN0SWQsIHtcbiAgICAgICAgICAgICAgICBpdGVtOiBleGlzdGluZ1Rhc2suaXRlbSxcbiAgICAgICAgICAgICAgICB0YXNrSWQ6IGV4aXN0aW5nVGFzay50YXNrSWQsXG4gICAgICAgICAgICAgICAgcHJpb3JpdHk6IGV4aXN0aW5nVGFzay5wcmlvcml0eSxcbiAgICAgICAgICAgICAgICBkdWVEYXRlOiBuZXdEdWVEYXRlLFxuICAgICAgICAgICAgICAgIGlzQ29tcGxldGU6IGV4aXN0aW5nVGFzay5pc0NvbXBsZXRlXG4gICAgICAgICAgICB9KTsgIFxuICAgIH1cblxuICAgIGNvbnN0IG9uVGFza0NvbXBsZXRlRWRpdCA9IChwcm9qZWN0SWQsIHRhc2tJZCwgaXNDb21wbGV0ZSkgPT4ge1xuICAgICAgICBjb25zdCBleGlzdGluZ1Rhc2sgPSB1cGRhdGVTdG9yYWdlLmZpbmRUYXNrVG9VcGRhdGUocHJvamVjdElkLCB0YXNrSWQpO1xuICAgICAgICB1cGRhdGVTdG9yYWdlLnVwZGF0ZVRhc2socHJvamVjdElkLCB7XG4gICAgICAgICAgICAgICAgaXRlbTogZXhpc3RpbmdUYXNrLml0ZW0sXG4gICAgICAgICAgICAgICAgdGFza0lkOiBleGlzdGluZ1Rhc2sudGFza0lkLFxuICAgICAgICAgICAgICAgIHByaW9yaXR5OiBleGlzdGluZ1Rhc2sucHJpb3JpdHksXG4gICAgICAgICAgICAgICAgZHVlRGF0ZTogZXhpc3RpbmdUYXNrLmR1ZURhdGUsXG4gICAgICAgICAgICAgICAgaXNDb21wbGV0ZTogaXNDb21wbGV0ZVxuICAgICAgICAgICAgfSk7ICBcbiAgICB9XG5cbiAgICByZXR1cm4geyBvblByb2plY3RTZWxlY3QsIG9uUHJvamVjdEFkZCwgb25Qcm9qZWN0TmFtZUVkaXQsIG9uVGFza0FkZCwgb25UYXNrTmFtZUVkaXQsIG9uVGFza1ByaW9yaXR5RWRpdCwgb25UYXNrRHVlRGF0ZUVkaXQsIG9uVGFza0NvbXBsZXRlRWRpdCB9XG4gICAgXG59XG5cbmV4cG9ydCBkZWZhdWx0IGhhbmRsZXJzKCk7IiwiaW1wb3J0IGhhbmRsZXJzIGZyb20gXCIuL2hhbmRsZXJzXCJcbmltcG9ydCB1cGRhdGVTdG9yYWdlIGZyb20gXCIuL3N0b3JhZ2VcIjtcblxuLy8gRE9NIEVsZW1lbnRzIEZhY3RvcnkgRnVuY3Rpb25cbmNvbnN0IGNyZWF0ZUVsZW1lbnRzID0gKCkgPT4ge1xuICAgIFxuICAgIGNvbnN0IGNyZWF0ZUxpc3RFbGVtZW50ID0gKGh0bWxDbGFzcykgPT4ge1xuICAgICAgICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgICAgIGxpLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBodG1sQ2xhc3MpO1xuICAgICAgICByZXR1cm4gbGk7XG4gICAgfVxuXG4gICAgY29uc3QgY3JlYXRlU3BhbkVsZW1lbnQgPSAoaHRtbENsYXNzKSA9PiB7XG4gICAgICAgIGNvbnN0IHNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgIHNwYW4uY2xhc3NMaXN0LmFkZChodG1sQ2xhc3MpO1xuICAgICAgICByZXR1cm4gc3BhbjtcbiAgICB9XG5cbiAgICBjb25zdCBjcmVhdGVJbWFnZUVsZW1lbnQgPSAoc3JjLCBodG1sQ2xhc3MpID0+IHtcbiAgICAgICAgY29uc3QgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG4gICAgICAgIGltZy5jbGFzc0xpc3QuYWRkKGh0bWxDbGFzcyk7XG4gICAgICAgIGltZy5zZXRBdHRyaWJ1dGUoJ3NyYycsIHNyYyk7XG4gICAgICAgIGltZy5zZXRBdHRyaWJ1dGUoJ2RyYWdnYWJsZScsICdmYWxzZScpO1xuICAgICAgICByZXR1cm4gaW1nO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCBjcmVhdGVGb3JtID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBpbnB1dEZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmb3JtJyk7XG4gICAgICAgIHJldHVybiBpbnB1dEZvcm07XG4gICAgfVxuXG4gICAgY29uc3QgY3JlYXRlSW5wdXRGaWVsZCA9IChwbGFjZWhvbGRlclRleHQpID0+IHtcbiAgICAgICAgY29uc3QgdXNlcklucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgdXNlcklucHV0LnNldEF0dHJpYnV0ZSgndHlwZScsICd0ZXh0Jyk7XG4gICAgICAgIHVzZXJJbnB1dC5zZXRBdHRyaWJ1dGUoJ3BsYWNlaG9sZGVyJywgcGxhY2Vob2xkZXJUZXh0KTtcbiAgICAgICAgdXNlcklucHV0LnNldEF0dHJpYnV0ZSgnaWQnLCAndXNlci1pbnB1dCcpO1xuICAgICAgICB1c2VySW5wdXQucmVxdWlyZWQgPSB0cnVlO1xuXG4gICAgICAgIHJldHVybiB1c2VySW5wdXQ7XG4gICAgfVxuXG4gICAgY29uc3QgY3JlYXRlRGl2ID0gKGh0bWxDbGFzcykgPT4ge1xuICAgICAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgZGl2LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBodG1sQ2xhc3MpO1xuICAgICAgICByZXR1cm4gZGl2O1xuICAgIH1cblxuICAgIHJldHVybiB7Y3JlYXRlTGlzdEVsZW1lbnQsIGNyZWF0ZVNwYW5FbGVtZW50LCBjcmVhdGVJbWFnZUVsZW1lbnQsIGNyZWF0ZUlucHV0RmllbGQsIGNyZWF0ZUZvcm0sIGNyZWF0ZURpdn1cbn1cblxuY29uc3QgY3JlYXRlSWNvblNwYW4gPSAoKSA9PiB7XG4gICAgY29uc3QgdmlldyA9IGNyZWF0ZUVsZW1lbnRzKCk7XG5cbiAgICBjb25zdCBpY29uU3BhbiA9IHZpZXcuY3JlYXRlU3BhbkVsZW1lbnQoJ2ljb25zJyk7XG4gICAgY29uc3QgZWRpdEljb24gPSB2aWV3LmNyZWF0ZUltYWdlRWxlbWVudCgnaW1hZ2VzL2VkaXQtaWNvbi5zdmcnLCAnZWRpdC1pY29uJyk7XG4gICAgY29uc3QgZGVsZXRlSWNvbiA9IHZpZXcuY3JlYXRlSW1hZ2VFbGVtZW50KCdpbWFnZXMvZGVsZXRlLWljb24uc3ZnJywgJ2RlbGV0ZS1pY29uJyk7XG4gICAgXG4gICAgZWRpdEljb24uY2xhc3NMaXN0LmFkZCgnZWRpdC1wcm9qZWN0Jyk7XG4gICAgZGVsZXRlSWNvbi5jbGFzc0xpc3QuYWRkKCdkZWxldGUtcHJvamVjdCcpO1xuICAgIFxuICAgIGljb25TcGFuLmFwcGVuZChlZGl0SWNvbiwgZGVsZXRlSWNvbik7XG4gICAgXG4gICAgcmV0dXJuIGljb25TcGFuO1xufVxuXG5jb25zdCBhZGRQcm9qZWN0VG9TaWRlYmFyID0gKCkgPT4ge1xuICAgIGNvbnN0IHZpZXcgPSBjcmVhdGVFbGVtZW50cygpO1xuICAgIGNvbnN0IHByb2plY3RzQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2plY3QtbGlzdCcpO1xuXG4gICAgY29uc3QgcHJvamVjdExpc3RFbGVtZW50ID0gIHZpZXcuY3JlYXRlTGlzdEVsZW1lbnQoJ3Byb2plY3QtaXRlbScpO1xuICAgIFxuICAgIGNvbnN0IHByb2plY3RJbnB1dEZvcm0gPSB2aWV3LmNyZWF0ZUZvcm0oKTtcbiAgICBjb25zdCBwcm9qZWN0TmFtZUlucHV0ID0gdmlldy5jcmVhdGVJbnB1dEZpZWxkKCdQcm9qZWN0IG5hbWUuLi4nKTtcbiAgICBwcm9qZWN0SW5wdXRGb3JtLmFwcGVuZChwcm9qZWN0TmFtZUlucHV0KTtcblxuICAgIGNvbnN0IGljb25TcGFuID0gY3JlYXRlSWNvblNwYW4oKTtcbiAgICBwcm9qZWN0TGlzdEVsZW1lbnQuYXBwZW5kKHByb2plY3RJbnB1dEZvcm0sIGljb25TcGFuKTtcbiAgICBwcm9qZWN0c0NvbnRhaW5lci5pbnNlcnRCZWZvcmUocHJvamVjdExpc3RFbGVtZW50LCBwcm9qZWN0c0NvbnRhaW5lci5sYXN0RWxlbWVudENoaWxkKTtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBwcm9qZWN0TmFtZUlucHV0LmZvY3VzKCk7XG4gICAgfSwgMCk7XG59XG5cbmNvbnN0IGFkZFByb2plY3RUb05vdGVwYWQgPSAocHJvamVjdElkKSA9PiB7XG4gICAgY29uc3QgdmlldyA9IGNyZWF0ZUVsZW1lbnRzKCk7XG4gICAgLy9jb25zdCBwcm9qZWN0TGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9qZWN0LWxpc3QnKTtcblxuICAgIGNvbnN0IHByb2plY3RzID0gdXBkYXRlU3RvcmFnZS5nZXRQcm9qZWN0cygpO1xuICAgIGNvbnN0IHByb2plY3RUb0FkZCA9IHByb2plY3RzLmZpbmQocHJvamVjdCA9PiBwcm9qZWN0LmlkID09IHByb2plY3RJZCk7XG4gICAgY29uc3QgcHJvamVjdE5hbWUgPSBwcm9qZWN0VG9BZGQucHJvamVjdE5hbWU7XG4gICAgLy9jb25zdCBjdXJyZW50UHJvamVjdE51bWJlciA9IHByb2plY3RMaXN0LmNoaWxkRWxlbWVudENvdW50IC0gMjtcbiAgICAvL2NvbnN0IHByb2plY3ROYW1lID0gcHJvamVjdExpc3QuY2hpbGRyZW5bY3VycmVudFByb2plY3ROdW1iZXJdLnRleHRDb250ZW50O1xuXG4gICAgY29uc3Qgbm90ZXBhZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN3cml0aW5nLWFyZWEnKTtcbiAgICBjb25zdCBwcm9qZWN0RGl2ID0gdmlldy5jcmVhdGVEaXYoJ3Byb2plY3QnKTtcbiAgICBwcm9qZWN0RGl2LnNldEF0dHJpYnV0ZSgnZGF0YS1wcm9qZWN0LWlkJywgcHJvamVjdElkKTtcbiAgICBjb25zdCBza2lwTGluZSA9IHZpZXcuY3JlYXRlRGl2KCdza2lwLWxpbmUnKTtcbiAgICBcbiAgICBjb25zdCBwcm9qZWN0SGVhZGluZyA9IHZpZXcuY3JlYXRlRGl2KCdwcm9qZWN0LWhlYWRpbmcnKTtcbiAgICBjb25zdCBoMiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gyJyk7XG4gICAgaDIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdub3RlcGFkLXRleHQnKTtcbiAgICBoMi50ZXh0Q29udGVudCA9IHByb2plY3ROYW1lO1xuICAgIGNvbnN0IGgzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDMnKTtcbiAgICBoMy5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ25vdGVwYWQtdGV4dCcpO1xuICAgIGgzLnRleHRDb250ZW50ID0gJ0R1ZSBEYXRlJztcbiAgICAgICAgXG4gICAgY29uc3QgdGFza3NDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpO1xuICAgIHRhc2tzQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ25vdGVwYWQtdGV4dCcsICd0b2RvcycpO1xuXG4gICAgY29uc3QgYWRkVGFza0xpc3RFbGVtZW50ID0gdmlldy5jcmVhdGVMaXN0RWxlbWVudCgndGFzaycpO1xuICAgIGNvbnN0IGFkZFRhc2tTcGFuID0gdmlldy5jcmVhdGVTcGFuRWxlbWVudCgnYWRkLXRhc2snKTtcbiAgICBjb25zdCBhZGRJY29uID0gdmlldy5jcmVhdGVJbWFnZUVsZW1lbnQoJ2ltYWdlcy9hZGQtaWNvbi5zdmcnLCAnYWRkLWljb24nKTtcbiAgICBhZGRUYXNrU3Bhbi5hcHBlbmQoYWRkSWNvbiwgJ0FkZCBUYXNrJyk7XG5cbiAgICBhZGRUYXNrTGlzdEVsZW1lbnQuYXBwZW5kKGFkZFRhc2tTcGFuKTtcbiAgICB0YXNrc0NvbnRhaW5lci5hcHBlbmQoYWRkVGFza0xpc3RFbGVtZW50LCBza2lwTGluZSk7XG4gICAgcHJvamVjdEhlYWRpbmcuYXBwZW5kKGgyLCBoMyk7XG4gICAgcHJvamVjdERpdi5hcHBlbmQocHJvamVjdEhlYWRpbmcsIHRhc2tzQ29udGFpbmVyKTtcbiAgICBub3RlcGFkLmFwcGVuZChwcm9qZWN0RGl2KTtcbn1cblxuY29uc3QgYWRkRHVlRGF0ZVRvRE9NID0gKCkgPT4ge1xuICAgIGNvbnN0IGR1ZURhdGVTcGFuID0gY3JlYXRlRWxlbWVudHMoKS5jcmVhdGVTcGFuRWxlbWVudCgnZHVlLWRhdGUnKTtcblxuICAgIGNvbnN0IHByaW9yaXR5SWNvbiA9IGNyZWF0ZUVsZW1lbnRzKCkuY3JlYXRlSW1hZ2VFbGVtZW50KCdpbWFnZXMvcHJpb3JpdHktaWNvbi5zdmcnLCAncHJpb3JpdHktaWNvbicpXG4gICAgcHJpb3JpdHlJY29uLmNsYXNzTGlzdC5hZGQoJ3ByaW9yaXR5LWxvdycpO1xuICAgIFxuICAgIGNvbnN0IGRhdGVMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG4gICAgZGF0ZUxhYmVsLmNsYXNzTGlzdC5hZGQoJ2RhdGUtbGFiZWwnKTtcbiAgICBcbiAgICBjb25zdCBkYXRlSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgIGRhdGVJbnB1dC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnZGF0ZScpO1xuICAgIGRhdGVJbnB1dC5yZXF1aXJlZCA9IHRydWU7XG5cbiAgICBjb25zdCBjYWxlbmRhckljb24gPSBjcmVhdGVFbGVtZW50cygpLmNyZWF0ZUltYWdlRWxlbWVudCgnaW1hZ2VzL2NhbGVuZGFyLWljb24uc3ZnJywgJ2NhbGVuZGFyLWljb24nKTtcblxuICAgIGRhdGVMYWJlbC5hcHBlbmQoZGF0ZUlucHV0LCBjYWxlbmRhckljb24pO1xuICAgIGR1ZURhdGVTcGFuLmFwcGVuZChwcmlvcml0eUljb24sIGRhdGVMYWJlbCk7XG4gICAgXG4gICAgLy8gdXBkYXRlIGxvY2FsU3RvcmFnZSBvbiBkdWUgZGF0ZSBjaGFuZ2VcbiAgICBkYXRlSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBwcm9qZWN0SWQgPSBkYXRlSW5wdXQuY2xvc2VzdCgnLnByb2plY3QnKS5kYXRhc2V0LnByb2plY3RJZDtcbiAgICAgICAgY29uc3QgdGFza0lkID0gZGF0ZUlucHV0LmNsb3Nlc3QoJ1tkYXRhLXRhc2staWRdJykuZGF0YXNldC50YXNrSWQ7XG4gICAgICAgIGNvbnN0IG5ld0R1ZURhdGUgPSBkYXRlSW5wdXQudmFsdWU7XG5cbiAgICAgICAgcmV0dXJuIGhhbmRsZXJzLm9uVGFza0R1ZURhdGVFZGl0KHByb2plY3RJZCwgdGFza0lkLCBuZXdEdWVEYXRlKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBkdWVEYXRlU3Bhbjtcbn1cblxuLy8gY3JlYXRlcyBIVE1MIGZvciBwcm9qZWN0IGl0ZW1zIGluIHNpZGViYXIgZnJvbSBsb2NhbFN0b3JhZ2UgaXRlbVxuY29uc3QgX2NyZWF0ZVByb2plY3RJdGVtSFRNTCA9IChpZCwgbmFtZSkgPT4ge1xuICAgIGNvbnN0IHZpZXcgPSBjcmVhdGVFbGVtZW50cygpO1xuXG4gICAgY29uc3QgcHJvamVjdEl0ZW0gPSB2aWV3LmNyZWF0ZUxpc3RFbGVtZW50KCdwcm9qZWN0LWl0ZW0nKTtcbiAgICBwcm9qZWN0SXRlbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtcHJvamVjdC1pZCcsIGlkKTtcbiAgICBjb25zdCBwcm9qZWN0TmFtZSA9IHZpZXcuY3JlYXRlU3BhbkVsZW1lbnQoJ3Byb2plY3QtbmFtZScpO1xuICAgIHByb2plY3ROYW1lLnRleHRDb250ZW50ID0gbmFtZTtcbiAgICBjb25zdCBpY29uU3BhbiA9IGNyZWF0ZUljb25TcGFuKCk7XG5cbiAgICBwcm9qZWN0SXRlbS5hcHBlbmQocHJvamVjdE5hbWUsIGljb25TcGFuKTtcblxuICAgIHJldHVybiBwcm9qZWN0SXRlbTtcbn1cbi8vIFVwZGF0ZXMgcHJvamVjdCBsaXN0IGluIHRoZSBzaWRlYmFyIFxuY29uc3QgdXBkYXRlUHJvamVjdExpc3QgPSAocHJvamVjdHMpID0+IHtcbiAgICBjb25zdCBwcm9qZWN0c0xpc3RDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvamVjdC1saXN0Jyk7XG4gICAgY29uc3QgYWRkUHJvamVjdEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWFkZC1wcm9qZWN0XScpO1xuICAgIFxuICAgIC8vIENsZWFyIGFsbCBlbGVtZW50cyBvZiBjbGFzcyAnLnByb2plY3QtaXRlbSdcbiAgICBjb25zdCBwcm9qZWN0c0FycmF5ID0gW10uc2xpY2UuY2FsbChwcm9qZWN0c0xpc3RDb250YWluZXIuY2hpbGRyZW4pO1xuICAgIHByb2plY3RzQXJyYXkuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgaWYgKGl0ZW0uY2xhc3NMaXN0LmNvbnRhaW5zKCdwcm9qZWN0LWl0ZW0nKSkgaXRlbS5yZW1vdmUoKTtcbiAgICB9KTtcblxuICAgIGZvciAoY29uc3QgcHJvamVjdCBvZiBwcm9qZWN0cykge1xuICAgICAgICBjb25zdCBodG1sID0gX2NyZWF0ZVByb2plY3RJdGVtSFRNTChwcm9qZWN0LmlkLCBwcm9qZWN0LnByb2plY3ROYW1lKTtcbiAgICAgICAgcHJvamVjdHNMaXN0Q29udGFpbmVyLmluc2VydEJlZm9yZShodG1sLCBhZGRQcm9qZWN0QnRuKTtcbiAgICB9XG5cbiAgICAvLyBBZGQgbGlzdGVuZXJzIGZvciBlZGl0LCBkZWxldGUgPz8/P1xuICAgIHByb2plY3RzTGlzdENvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCcucHJvamVjdC1pdGVtJykuZm9yRWFjaChwcm9qZWN0SXRlbSA9PiB7XG4gICAgICAgIHByb2plY3RJdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgaGFuZGxlcnMub25Qcm9qZWN0U2VsZWN0KHByb2plY3RJdGVtLmRhdGFzZXQucHJvamVjdElkKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5cbmNvbnN0IGxvYWRUYXNrID0gICh0YXNrT2JqKSA9PiB7XG4gICAgY29uc3QgdmlldyA9IGNyZWF0ZUVsZW1lbnRzKCk7XG5cbiAgICBjb25zdCB0YXNrID0gdmlldy5jcmVhdGVMaXN0RWxlbWVudCgndGFzaycpO1xuICAgIHRhc2suc2V0QXR0cmlidXRlKCdkYXRhLXRhc2staWQnLCB0YXNrT2JqLnRhc2tJZCk7XG5cbiAgICBjb25zdCB0YXNrSXRlbSA9IHZpZXcuY3JlYXRlU3BhbkVsZW1lbnQoJ3Rhc2staXRlbScpO1xuICAgIFxuICAgIGNvbnN0IHRhc2tOYW1lU3BhbiA9IHZpZXcuY3JlYXRlU3BhbkVsZW1lbnQoJ3Rhc2stdGV4dCcpO1xuICAgIHRhc2tOYW1lU3Bhbi50ZXh0Q29udGVudCA9IHRhc2tPYmouaXRlbTtcbiAgICBcbiAgICBjb25zdCBpY29uU3BhbiA9IGNyZWF0ZUljb25TcGFuKCk7XG4gICAgdGFza0l0ZW0uYXBwZW5kKHRhc2tOYW1lU3BhbiwgaWNvblNwYW4pO1xuICAgXG4gICAgY29uc3QgZHVlRGF0ZVNwYW4gPSBhZGREdWVEYXRlVG9ET00oKTtcblxuICAgIGNvbnN0IHByaW9yaXR5SWNvbiA9IGR1ZURhdGVTcGFuLnF1ZXJ5U2VsZWN0b3IoJy5wcmlvcml0eS1pY29uJyk7XG4gICAgcHJpb3JpdHlJY29uLmNsYXNzTGlzdC5hZGQoYHByaW9yaXR5LSR7dGFza09iai5wcmlvcml0eX1gKTtcbiAgICBcbiAgICBjb25zdCBkYXRlSW5wdXQgPSBkdWVEYXRlU3Bhbi5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpO1xuICAgIGRhdGVJbnB1dC52YWx1ZSA9IHRhc2tPYmouZHVlRGF0ZTtcbiAgICAvKlxuICAgIGNvbnN0IGR1ZURhdGVTcGFuID0gdmlldy5jcmVhdGVTcGFuRWxlbWVudCgnZHVlLWRhdGUnKTtcbiAgICBjb25zdCBwcmlvcml0eUljb24gPSB2aWV3LmNyZWF0ZUltYWdlRWxlbWVudCgnaW1hZ2VzL3ByaW9yaXR5LWljb24uc3ZnJywgJ3ByaW9yaXR5LWljb24nKTtcbiAgICBwcmlvcml0eUljb24uY2xhc3NMaXN0LmFkZChgcHJpb3JpdHktJHt0YXNrT2JqLnByaW9yaXR5fWApO1xuICAgIFxuICAgIFxuICAgIGNvbnN0IGRhdGVMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG4gICAgZGF0ZUxhYmVsLmNsYXNzTGlzdC5hZGQoJ2RhdGUtbGFiZWwnKTtcbiAgXG4gICAgY29uc3QgZGF0ZUlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICBkYXRlSW5wdXQuc2V0QXR0cmlidXRlKCd0eXBlJywgJ2RhdGUnKTtcbiAgICBkYXRlSW5wdXQucmVxdWlyZWQgPSB0cnVlO1xuICAgIGRhdGVJbnB1dC52YWx1ZSA9IHRhc2tPYmouZHVlRGF0ZTtcbiAgIFxuICAgIGNvbnN0IGNhbGVuZGFySWNvbiA9IHZpZXcuY3JlYXRlSW1hZ2VFbGVtZW50KCdpbWFnZXMvY2FsZW5kYXItaWNvbi5zdmcnLCAnY2FsZW5kYXItaWNvbicpO1xuICAgIGRhdGVMYWJlbC5hcHBlbmQoZGF0ZUlucHV0LCBjYWxlbmRhckljb24pO1xuICAgIGR1ZURhdGVTcGFuLmFwcGVuZChwcmlvcml0eUljb24sIGRhdGVMYWJlbCk7Ki9cbiAgXG4gICAgaWYgKHRhc2tPYmouaXNDb21wbGV0ZSkgdGFzay5jbGFzc0xpc3QuYWRkKCdjb21wbGV0ZWQnKTtcblxuICAgIHRhc2suYXBwZW5kKHRhc2tJdGVtLCBkdWVEYXRlU3Bhbik7XG5cbiAgICByZXR1cm4gdGFzaztcbn1cblxuY29uc3QgdXBkYXRlQWN0aXZlVGFiID0gKHRhYikgPT4ge1xuICAgIC8vIGZvciBhbGwgb3RoZXIgcHJvamVjdHMsIGNoYW5nZSBkaXNwbGF5IHRvIG5vbmUsIHRvIGJyaW5nIGJhY2sgc2V0IGRpc3BsYXkgdG8gY29udGVudHMgIFxuICAgICAgICAvLyBpdGVtLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbiAgICAvLyByZW1vdmUgYWN0aXZlIGNsYXNzIGZyb20gYW55IG90aGVyIHNpZGViYXIgZWxlbWVudFxuICAgIGNvbnN0IGN1cnJlbnRBY3RpdmVUYWIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYWN0aXZlJyk7XG4gICAgaWYgKGN1cnJlbnRBY3RpdmVUYWIpIGN1cnJlbnRBY3RpdmVUYWIuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG4gICAgdGFiLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgIGNvbnN0IHByb2plY3ROYW1lU3BhbiA9IHRhYi5jaGlsZHJlbi5pdGVtKDApOyAvLyBVcGRhdGUgbm90ZXBhZCBoZXJlP1xuICAgIC8vY29uc29sZS5sb2cocHJvamVjdE5hbWVTcGFuKTtcbn1cblxuZXhwb3J0IHsgYWRkUHJvamVjdFRvU2lkZWJhciwgYWRkUHJvamVjdFRvTm90ZXBhZCwgYWRkRHVlRGF0ZVRvRE9NLCBjcmVhdGVFbGVtZW50cywgdXBkYXRlUHJvamVjdExpc3QsIHVwZGF0ZUFjdGl2ZVRhYiwgbG9hZFRhc2sgfTsiLCJpbXBvcnQgeyBhZGRQcm9qZWN0VG9TaWRlYmFyLCBhZGRQcm9qZWN0VG9Ob3RlcGFkLCBjcmVhdGVFbGVtZW50cyB9IGZyb20gXCIuL2NyZWF0ZURPTUVsZW1lbnRzXCI7XG5pbXBvcnQgaGFuZGxlcnMgZnJvbSBcIi4vaGFuZGxlcnNcIjtcbmltcG9ydCB1cGRhdGVTdG9yYWdlIGZyb20gXCIuL3N0b3JhZ2VcIlxuXG5jb25zdCBhd2FpdGluZ0lucHV0ID0gKCkgPT4ge1xuICAgIGNvbnN0IHVzZXJJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN1c2VyLWlucHV0Jyk7XG4gICAgaWYgKHVzZXJJbnB1dCAhPSBudWxsKSByZXR1cm4gdHJ1ZTtcblxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuY29uc3QgaGFuZGxlVXNlcklucHV0ID0gKCkgPT4geyBcbiAgICAvLyBUaGlzIGlzIERPTSBTdHVmZlxuICAgIGNvbnN0IHVzZXJJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN1c2VyLWlucHV0JylcbiAgICBjb25zdCBpbnB1dEZvcm0gPSB1c2VySW5wdXQucGFyZW50RWxlbWVudDtcbiAgICBjb25zdCBwcm9qZWN0SXRlbSA9IGlucHV0Rm9ybS5wYXJlbnRFbGVtZW50O1xuICAgIGNvbnN0IHByb2plY3RTcGFuID0gY3JlYXRlRWxlbWVudHMoKS5jcmVhdGVTcGFuRWxlbWVudCgncHJvamVjdC1uYW1lJyk7XG4gICAgXG4gICAgY29uc3QgcHJvamVjdE5hbWUgPSB1c2VySW5wdXQudmFsdWUudHJpbSgpO1xuICAgIGlmICghcHJvamVjdE5hbWUpIHJldHVybjtcblxuICAgIHByb2plY3RTcGFuLnRleHRDb250ZW50ID0gcHJvamVjdE5hbWU7XG4gICAgdXNlcklucHV0LnBhcmVudEVsZW1lbnQucmVtb3ZlKCk7XG4gICAgcHJvamVjdEl0ZW0uaW5zZXJ0QmVmb3JlKHByb2plY3RTcGFuLCBwcm9qZWN0SXRlbS5jaGlsZE5vZGVzWzBdKTsgXG59XG5cbmNvbnN0IGFkZFByb2plY3QgPSAoKSA9PiB7XG4gICAgaWYgKGF3YWl0aW5nSW5wdXQoKSkgcmV0dXJuO1xuICAgIGFkZFByb2plY3RUb1NpZGViYXIoKTtcbiAgICBcbiAgICBjb25zdCB1c2VySW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdXNlci1pbnB1dCcpO1xuICAgIGNvbnN0IGlucHV0Rm9ybSA9IHVzZXJJbnB1dC5wYXJlbnRFbGVtZW50O1xuICAgIGNvbnN0IHByb2plY3RJdGVtID0gaW5wdXRGb3JtLnBhcmVudEVsZW1lbnQ7XG5cbiAgICB1c2VySW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHVzZXJJbnB1dC52YWx1ZS50cmltKCkgPT0gJycpIHtcbiAgICAgICAgICAgIHByb2plY3RJdGVtLnJlbW92ZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGhhbmRsZVVzZXJJbnB1dCgpO1xuXG4gICAgICAgIGNvbnN0IHByb2plY3ROYW1lID0gcHJvamVjdEl0ZW0uZmlyc3RFbGVtZW50Q2hpbGQudGV4dENvbnRlbnQ7XG4gICAgICAgIGhhbmRsZXJzLm9uUHJvamVjdEFkZChwcm9qZWN0TmFtZSk7IFxuXG4gICAgICAgIGNvbnN0IHByb2plY3RMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2plY3QtbGlzdCcpO1xuICAgICAgICAvLyBTZWxlY3QgbGFzdCBwcm9qZWN0IGFkZGVkIGFuZCBnZXQgaWQgYXR0cmlidXRlXG4gICAgICAgIGNvbnN0IHByb2plY3RJZCA9IHByb2plY3RMaXN0LmNoaWxkcmVuW3Byb2plY3RMaXN0LmNoaWxkRWxlbWVudENvdW50IC0gMl0uZ2V0QXR0cmlidXRlKCdkYXRhLXByb2plY3QtaWQnKTtcbiAgICAgICAgaWYgKCFhd2FpdGluZ0lucHV0KCkpIGFkZFByb2plY3RUb05vdGVwYWQocHJvamVjdElkKTtcbiAgICB9KTtcblxuICAgIGlucHV0Rm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGhhbmRsZVVzZXJJbnB1dCgpO1xuICAgICAgICBjb25zdCBwcm9qZWN0TmFtZSA9IHByb2plY3RJdGVtLmZpcnN0RWxlbWVudENoaWxkLnRleHRDb250ZW50O1xuICAgICAgICBoYW5kbGVycy5vblByb2plY3RBZGQocHJvamVjdE5hbWUpOyBcbiAgICAgICAgY29uc3QgcHJvamVjdExpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvamVjdC1saXN0Jyk7XG4gICAgICAgIGNvbnN0IHByb2plY3RJZCA9IHByb2plY3RMaXN0LmNoaWxkcmVuW3Byb2plY3RMaXN0LmNoaWxkRWxlbWVudENvdW50IC0gMl0uZ2V0QXR0cmlidXRlKCdkYXRhLXByb2plY3QtaWQnKTtcbiAgICAgICAgaWYgKCFhd2FpdGluZ0lucHV0KCkpIGFkZFByb2plY3RUb05vdGVwYWQocHJvamVjdElkKTtcbiAgICB9KTtcbn1cbmNvbnN0IGRlbGV0ZVByb2plY3QgPSAoKSA9PiB7XG4gICAgY29uc3QgcHJvamVjdExpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvamVjdC1saXN0Jyk7XG4gICAgcHJvamVjdExpc3QuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICBpZiAoZS50YXJnZXQuY2xvc2VzdCgnLmRlbGV0ZS1wcm9qZWN0JykpIHtcbiAgICAgICAgICAgIGNvbnN0IHByb2plY3RJdGVtID0gZS50YXJnZXQuY2xvc2VzdCgnLnByb2plY3QtaXRlbScpXG4gICAgICAgICAgICBwcm9qZWN0SXRlbS5yZW1vdmUoKTtcbiAgICAgICAgICAgIGNvbnN0IHByb2plY3RJZCA9IHByb2plY3RJdGVtLmRhdGFzZXQucHJvamVjdElkO1xuICAgICAgICAgICAgdXBkYXRlU3RvcmFnZS5kZWxldGVQcm9qZWN0KHByb2plY3RJZCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICAvLyBUT0RPOiBSZW1vdmUgcHJvamVjdCBmcm9tIG5vdGVwYWQgYnkgcmVsb2FkaW5nIGxvY2FsU3RvcmFnZSBpdGVtcyBmb3IgY3VycmVudCBzZWxlY3RlZCB0YWIgKGkuZS4gVG9kYXkpLiBJZiBjdXJyZW50IHNlbGVjdCB0YWIgaXMgdGhlIG9uZSB0aGF0IGlzIGRlbGV0ZWQgbG9hZCBub3RlcGFkIHdpdGggSG9tZSB0YWIgXG59XG5cbi8vIFRPRE86IGNyZWF0ZSBmdW5jdGlvbiB0byB1cGRhdGUgcHJvamVjdCBuYW1lIG9uIG5vdGVwYWQgd2hlbiB1c2VyIGVkaXRzIGl0XG4gXG5jb25zdCBlZGl0UHJvamVjdCA9IChlKSA9PiB7XG4gICAgaWYgKGF3YWl0aW5nSW5wdXQoKSkgcmV0dXJuO1xuICAgIFxuICAgIC8vIFRoaXMgaXMgRE9NIFN0dWZmXG4gICAgY29uc3QgaW5wdXRGb3JtID0gY3JlYXRlRWxlbWVudHMoKS5jcmVhdGVGb3JtKCk7XG4gICAgY29uc3QgaW5wdXRGaWVsZCA9IGNyZWF0ZUVsZW1lbnRzKCkuY3JlYXRlSW5wdXRGaWVsZCgnUHJvamVjdCBuYW1lLi4uJyk7XG4gICAgY29uc3QgcHJvamVjdE5hbWUgPSBlLnRhcmdldC5wYXJlbnRFbGVtZW50LnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XG5cbiAgICBpbnB1dEZpZWxkLnZhbHVlID0gcHJvamVjdE5hbWUudGV4dENvbnRlbnQ7XG4gICAgcHJvamVjdE5hbWUucmVtb3ZlKCk7XG4gICAgaW5wdXRGb3JtLmFwcGVuZChpbnB1dEZpZWxkKTtcbiAgICBcbiAgICBjb25zdCBwcm9qZWN0SXRlbSA9IGUudGFyZ2V0LmNsb3Nlc3QoJy5wcm9qZWN0LWl0ZW0nKTtcbiAgICBwcm9qZWN0SXRlbS5pbnNlcnRCZWZvcmUoaW5wdXRGb3JtLCBwcm9qZWN0SXRlbS5jaGlsZE5vZGVzWzBdKTtcbiAgICBcbiAgICBjb25zdCB1c2VySW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdXNlci1pbnB1dCcpO1xuICAgIHVzZXJJbnB1dC5mb2N1cygpO1xuICAgIFxuICAgIGNvbnN0IHByb2plY3RJZCA9IHByb2plY3RJdGVtLmRhdGFzZXQucHJvamVjdElkO1xuXG4gICAgdXNlcklucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh1c2VySW5wdXQudmFsdWUgIT0gJycpIGhhbmRsZVVzZXJJbnB1dCgpO1xuICAgICAgICAvL2lmICghYXdhaXRpbmdJbnB1dCgpKSBlZGl0UHJvamVjdE9uTm90ZXBhZCgpO1xuICAgICAgICBjb25zdCBwcm9qZWN0TmFtZSA9IHByb2plY3RJdGVtLmZpcnN0RWxlbWVudENoaWxkLnRleHRDb250ZW50O1xuICAgICAgICB1cGRhdGVOYW1lT25Ob3RlcGFkKHByb2plY3RJZCwgcHJvamVjdE5hbWUpO1xuICAgICAgICBoYW5kbGVycy5vblByb2plY3ROYW1lRWRpdChwcm9qZWN0SWQsIHByb2plY3ROYW1lKTtcbiAgICB9KTtcblxuICAgIGlucHV0Rm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGhhbmRsZVVzZXJJbnB1dCgpO1xuICAgICAgICAvL2lmICghYXdhaXRpbmdJbnB1dCgpKSBlZGl0UHJvamVjdE9uTm90ZXBhZCgpO1xuICAgICAgICBjb25zdCBwcm9qZWN0TmFtZSA9IHByb2plY3RJdGVtLmZpcnN0RWxlbWVudENoaWxkLnRleHRDb250ZW50O1xuICAgICAgICB1cGRhdGVOYW1lT25Ob3RlcGFkKHByb2plY3RJZCwgcHJvamVjdE5hbWUpO1xuICAgICAgICBoYW5kbGVycy5vblByb2plY3ROYW1lRWRpdChwcm9qZWN0SWQsIHByb2plY3ROYW1lKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHVwZGF0ZU5hbWVPbk5vdGVwYWQgPSAocHJvamVjdElkLCBwcm9qZWN0TmFtZSkgPT4ge1xuICAgICAgICBjb25zdCBub3RlcGFkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5vdGVwYWQnKTtcbiAgICAgICAgY29uc3QgcHJvamVjdFRhc2tzQ29udGFpbmVyID0gbm90ZXBhZC5xdWVyeVNlbGVjdG9yKGBbZGF0YS1wcm9qZWN0LWlkPVwiJHtwcm9qZWN0SWR9XCJdYCk7XG4gICAgICAgIGlmIChwcm9qZWN0VGFza3NDb250YWluZXIpIHtcbiAgICAgICAgICAgIHByb2plY3RUYXNrc0NvbnRhaW5lci5jaGlsZE5vZGVzWzBdLmNoaWxkTm9kZXNbMF0udGV4dENvbnRlbnQgPSBwcm9qZWN0TmFtZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IHsgXG4gICAgYWRkUHJvamVjdCxcbiAgICBkZWxldGVQcm9qZWN0LFxuICAgIGVkaXRQcm9qZWN0XG59IiwiaW1wb3J0IHtjcmVhdGVFbGVtZW50cywgYWRkRHVlRGF0ZVRvRE9NfSBmcm9tIFwiLi9jcmVhdGVET01FbGVtZW50c1wiO1xuaW1wb3J0IHtmb3JtYXR9IGZyb20gXCJkYXRlLWZuc1wiO1xuaW1wb3J0IGhhbmRsZXJzIGZyb20gXCIuL2hhbmRsZXJzXCI7XG5pbXBvcnQgdXBkYXRlU3RvcmFnZSBmcm9tIFwiLi9zdG9yYWdlXCI7XG5cbmNvbnN0IHRvZ2dsZVRhc2sgPSAodGFza0VsZW1lbnQpID0+IHtcbiAgICB0YXNrRWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKCdjb21wbGV0ZWQnKTtcbiAgICBsZXQgaXNDb21wbGV0ZSA9IGZhbHNlO1xuXG4gICAgaWYgKHRhc2tFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygnY29tcGxldGVkJykpIHtcbiAgICAgICAgaXNDb21wbGV0ZSA9IHRydWU7XG4gICAgfVxuICAgIGNvbnN0IHByb2plY3RJZCA9IHRhc2tFbGVtZW50LmNsb3Nlc3QoJy5wcm9qZWN0JykuZGF0YXNldC5wcm9qZWN0SWQ7XG4gICAgY29uc3QgdGFza0lkID0gdGFza0VsZW1lbnQuZGF0YXNldC50YXNrSWQ7XG5cbiAgICByZXR1cm4gaGFuZGxlcnMub25UYXNrQ29tcGxldGVFZGl0KHByb2plY3RJZCwgdGFza0lkLCBpc0NvbXBsZXRlKTtcbn1cblxuY29uc3QgYWRkVGFza1RvRE9NID0gKGFkZFRhc2tCdG4pID0+IHtcbiAgICBpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3VzZXItaW5wdXQnKSkgcmV0dXJuO1xuICAgIGNvbnN0IHRhc2tMaXN0RWxlbWVudCA9IGNyZWF0ZUVsZW1lbnRzKCkuY3JlYXRlTGlzdEVsZW1lbnQoJ3Rhc2snKTtcbiAgICBjb25zdCB0YXNrU3BhbiA9IGNyZWF0ZUVsZW1lbnRzKCkuY3JlYXRlU3BhbkVsZW1lbnQoJ3Rhc2staXRlbScpO1xuICAgIGNvbnN0IGlucHV0Rm9ybSA9IGNyZWF0ZUVsZW1lbnRzKCkuY3JlYXRlRm9ybSgpO1xuICAgIGNvbnN0IGlucHV0RmllbGQgPSBjcmVhdGVFbGVtZW50cygpLmNyZWF0ZUlucHV0RmllbGQoJ0VudGVyIFRhc2suLi4nKTtcbiAgICBcbiAgICBpbnB1dEZvcm0uYXBwZW5kKGlucHV0RmllbGQpO1xuICAgIHRhc2tTcGFuLmFwcGVuZChpbnB1dEZvcm0pO1xuXG4gICAgY29uc3QgaWNvblNwYW4gPSBjcmVhdGVFbGVtZW50cygpLmNyZWF0ZVNwYW5FbGVtZW50KCdpY29ucycpO1xuICAgIGNvbnN0IGVkaXRJY29uID0gY3JlYXRlRWxlbWVudHMoKS5jcmVhdGVJbWFnZUVsZW1lbnQoJ2ltYWdlcy9lZGl0LWljb24uc3ZnJywgJ2VkaXQtaWNvbicpO1xuICAgIGNvbnN0IGRlbGV0ZUljb24gPSBjcmVhdGVFbGVtZW50cygpLmNyZWF0ZUltYWdlRWxlbWVudCgnaW1hZ2VzL2RlbGV0ZS1pY29uLnN2ZycsICdkZWxldGUtaWNvbicpO1xuXG4gICAgaWNvblNwYW4uYXBwZW5kKGVkaXRJY29uLCBkZWxldGVJY29uKTtcbiAgICB0YXNrU3Bhbi5hcHBlbmQoaWNvblNwYW4pO1xuICAgIGNvbnN0IGR1ZURhdGUgPSBhZGREdWVEYXRlVG9ET00oKTtcbiAgICB0YXNrTGlzdEVsZW1lbnQuYXBwZW5kKHRhc2tTcGFuLCBkdWVEYXRlKTtcbiAgICBcbiAgICBjb25zdCBjb250YWluZXIgPSBhZGRUYXNrQnRuLmNsb3Nlc3QoJy50b2RvcycpO1xuICAgIGNvbnN0IG51bWJlck9mVGFza3MgPSBjb250YWluZXIuY2hpbGRFbGVtZW50Q291bnQgLSAyO1xuXG4gICAgY29udGFpbmVyLmluc2VydEJlZm9yZSh0YXNrTGlzdEVsZW1lbnQsIGNvbnRhaW5lci5jaGlsZHJlbltudW1iZXJPZlRhc2tzXSk7XG4gICAgXG4gICAgLy8gV2hhdCBpcyB0aGlzPz8/XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGlucHV0RmllbGQuZm9jdXMoKTtcbiAgICB9LCAwKTtcblxuICAgIHJldHVybiB0YXNrU3Bhbjtcbn1cblxuY29uc3QgZWRpdFRhc2sgPSAodGFzaykgPT4ge1xuICAgIGlmICh0YXNrLmNsYXNzTGlzdC5jb250YWlucygnY29tcGxldGVkJykpIHJldHVybjtcbiAgICBjb25zdCB0YXNrVGV4dFNwYW4gPSB0YXNrLnF1ZXJ5U2VsZWN0b3IoJy50YXNrLXRleHQnKTtcbiAgICBjb25zdCB0YXNrTmFtZSA9IHRhc2tUZXh0U3Bhbi50ZXh0Q29udGVudDtcbiAgICB0YXNrVGV4dFNwYW4ucmVtb3ZlKCk7XG4gICAgXG4gICAgY29uc3QgaW5wdXRGb3JtID0gY3JlYXRlRWxlbWVudHMoKS5jcmVhdGVGb3JtKCk7XG4gICAgY29uc3QgaW5wdXRGaWVsZCA9IGNyZWF0ZUVsZW1lbnRzKCkuY3JlYXRlSW5wdXRGaWVsZCgnRW50ZXIgVGFzay4uLicpO1xuICAgIFxuICAgIGlucHV0RmllbGQudmFsdWUgPSB0YXNrTmFtZTtcbiAgICBpbnB1dEZvcm0uYXBwZW5kKGlucHV0RmllbGQpO1xuXG4gICAgY29uc3QgdGFza1NwYW4gPSB0YXNrLnF1ZXJ5U2VsZWN0b3IoJy50YXNrLWl0ZW0nKTtcbiAgICBjb25zdCBpY29uU3BhbiA9IHRhc2sucXVlcnlTZWxlY3RvcignLmljb25zJyk7XG5cbiAgICB0YXNrU3Bhbi5pbnNlcnRCZWZvcmUoaW5wdXRGb3JtLCBpY29uU3Bhbik7XG5cbiAgICB0YXNrLnByZXBlbmQodGFza1NwYW4pO1xuICAgIGlucHV0RmllbGQuZm9jdXMoKTtcbiAgICBhZGRUYXNrKCk7XG59XG5cbmNvbnN0IGRlbGV0ZVRhc2sgPSAocHJvamVjdElkLCB0YXNrSWQpID0+IHtcbiAgICBjb25zdCB0YXNrID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgW2RhdGEtdGFzay1pZD1cIiR7dGFza0lkfVwiXWApO1xuICAgIHRhc2sucmVtb3ZlKCk7XG4gICAgdXBkYXRlU3RvcmFnZS5kZWxldGVUYXNrKHByb2plY3RJZCwgdGFza0lkKTtcbn1cblxuY29uc3QgYWRkVGFzayA9ICgpID0+IHtcbiAgICBjb25zdCBpbnB1dEZpZWxkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3VzZXItaW5wdXQnKTtcbiAgICBjb25zdCBpbnB1dEZvcm0gPSBpbnB1dEZpZWxkLnBhcmVudEVsZW1lbnQ7XG4gICAgY29uc3QgdGFza0NvbnRhaW5lciA9IGlucHV0Rm9ybS5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgXG4gICAgaW5wdXRGaWVsZC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBwcm9qZWN0SWQgPSB0YXNrQ29udGFpbmVyLmNsb3Nlc3QoJ1tkYXRhLXByb2plY3QtaWRdJykuZGF0YXNldC5wcm9qZWN0SWQ7XG4gICAgICAgIGNvbnN0IHRhc2sgPSBpbnB1dEZpZWxkLnZhbHVlO1xuICAgICAgICB2YWxpZGF0ZVVzZXJJbnB1dCgpO1xuICAgICAgICBpZiAodGFzaykgY3JlYXRlVGFzayh0YXNrLCBwcm9qZWN0SWQsIHRhc2tDb250YWluZXIpO1xuICAgIH0pO1xuICAgIFxuICAgIGlucHV0Rm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGNvbnN0IHByb2plY3RJZCA9IHRhc2tDb250YWluZXIuY2xvc2VzdCgnW2RhdGEtcHJvamVjdC1pZF0nKS5kYXRhc2V0LnByb2plY3RJZDtcbiAgICAgICAgY29uc3QgdGFzayA9IGlucHV0RmllbGQudmFsdWU7XG4gICAgICAgIHZhbGlkYXRlVXNlcklucHV0KCk7XG4gICAgICAgIGlmICh0YXNrKSBjcmVhdGVUYXNrKHRhc2ssIHByb2plY3RJZCwgdGFza0NvbnRhaW5lcik7XG4gICAgfSk7XG59XG5cbmNvbnN0IGNyZWF0ZVRhc2sgPSAodGFzaywgcHJvamVjdElkLCB0YXNrQ29udGFpbmVyKSA9PiB7XG4gICAgaWYgKHRhc2tDb250YWluZXIuZGF0YXNldC50YXNrSWQpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZXJzLm9uVGFza05hbWVFZGl0KHByb2plY3RJZCwgdGFza0NvbnRhaW5lci5kYXRhc2V0LnRhc2tJZCwgdGFzayk7XG4gICAgfVxuICAgIGNvbnN0IHRhc2tPYmogPSBoYW5kbGVycy5vblRhc2tBZGQodGFzaywgcHJvamVjdElkKTtcbiAgICB0YXNrQ29udGFpbmVyLnNldEF0dHJpYnV0ZSgnZGF0YS10YXNrLWlkJywgdGFza09iai50YXNrSWQpO1xufVxuXG5jb25zdCB2YWxpZGF0ZVVzZXJJbnB1dCA9ICgpID0+IHtcbiAgICBjb25zdCBpbnB1dEZpZWxkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3VzZXItaW5wdXQnKTtcbiAgICBjb25zdCBpbnB1dEZvcm0gPSBpbnB1dEZpZWxkLnBhcmVudEVsZW1lbnQ7XG4gICAgY29uc3QgdGFza0l0ZW0gPSBpbnB1dEZvcm0ucGFyZW50RWxlbWVudDtcbiAgICBjb25zdCB0YXNrQ29udGFpbmVyID0gdGFza0l0ZW0ucGFyZW50RWxlbWVudDtcblxuICAgIGNvbnN0IHVzZXJJbnB1dCA9IGlucHV0RmllbGQudmFsdWUudHJpbSgpO1xuICAgIGNvbnN0IHRhc2tUZXh0U3BhbiA9IGNyZWF0ZUVsZW1lbnRzKCkuY3JlYXRlU3BhbkVsZW1lbnQoJ3Rhc2stdGV4dCcpO1xuICAgIHRhc2tUZXh0U3Bhbi5hcHBlbmQodXNlcklucHV0KTtcblxuICAgIC8vIFJlbW92ZXMgdGFzayBjb250YWluZXIgaWYgdGFzayBpc24ndCB5ZXQgaW4gbG9jYWxTdG9yYWdlIChoYXMgYSB0YXNrSWQgZGF0YSBhdHRyaWJ1dGUpXG4gICAgaWYgKHVzZXJJbnB1dCA9PSAnJyAmJiAhdGFza0NvbnRhaW5lci5kYXRhc2V0LnRhc2tJZCkge1xuICAgICAgICB0YXNrQ29udGFpbmVyLnJlbW92ZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgfSBcbiAgICBlbHNlIGlmICh1c2VySW5wdXQgPT0gJycgJiYgdGFza0NvbnRhaW5lci5kYXRhc2V0LnRhc2tJZCkgcmV0dXJuO1xuICAgIGlucHV0Rm9ybS5yZW1vdmUoKTtcbiAgICB0YXNrSXRlbS5wcmVwZW5kKHRhc2tUZXh0U3Bhbik7XG59XG5cbmNvbnN0IHVwZGF0ZVByaW9yaXR5ID0gKGV2ZW50VGFyZ2V0KSA9PiB7XG4gICAgY29uc3QgdGFza0l0ZW1DbGFzc0xpc3QgPSBldmVudFRhcmdldC5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0O1xuICAgIGlmICh0YXNrSXRlbUNsYXNzTGlzdC5jb250YWlucygnY29tcGxldGVkJykpIHJldHVybjtcbiAgICBjb25zdCBwcm9qZWN0SWQgPSBldmVudFRhcmdldC5jbG9zZXN0KCcucHJvamVjdCcpLmRhdGFzZXQucHJvamVjdElkO1xuICAgIGNvbnN0IHRhc2tJZCA9IGV2ZW50VGFyZ2V0LmNsb3Nlc3QoJ1tkYXRhLXRhc2staWRdJykuZGF0YXNldC50YXNrSWQ7XG5cbiAgICBjb25zdCBwcmlvcml0eUNsYXNzTGlzdCA9IGV2ZW50VGFyZ2V0LmNsYXNzTGlzdDtcblxuICAgIGlmIChwcmlvcml0eUNsYXNzTGlzdC5jb250YWlucygncHJpb3JpdHktbG93JykpIHtcbiAgICAgICAgcHJpb3JpdHlDbGFzc0xpc3QucmVtb3ZlKCdwcmlvcml0eS1sb3cnKTtcbiAgICAgICAgcHJpb3JpdHlDbGFzc0xpc3QuYWRkKCdwcmlvcml0eS1tZWRpdW0nKTtcbiAgICAgICAgcmV0dXJuIGhhbmRsZXJzLm9uVGFza1ByaW9yaXR5RWRpdChwcm9qZWN0SWQsIHRhc2tJZCwgJ21lZGl1bScpOyBcbiAgICB9XG4gICAgaWYgKHByaW9yaXR5Q2xhc3NMaXN0LmNvbnRhaW5zKCdwcmlvcml0eS1tZWRpdW0nKSkge1xuICAgICAgICBwcmlvcml0eUNsYXNzTGlzdC5yZW1vdmUoJ3ByaW9yaXR5LW1lZGl1bScpO1xuICAgICAgICBwcmlvcml0eUNsYXNzTGlzdC5hZGQoJ3ByaW9yaXR5LWhpZ2gnKTtcbiAgICAgICAgcmV0dXJuIGhhbmRsZXJzLm9uVGFza1ByaW9yaXR5RWRpdChwcm9qZWN0SWQsIHRhc2tJZCwgJ2hpZ2gnKTtcbiAgICB9XG4gICAgaWYgKHByaW9yaXR5Q2xhc3NMaXN0LmNvbnRhaW5zKCdwcmlvcml0eS1oaWdoJykpIHtcbiAgICAgICAgcHJpb3JpdHlDbGFzc0xpc3QucmVtb3ZlKCdwcmlvcml0eS1oaWdoJyk7XG4gICAgICAgIHByaW9yaXR5Q2xhc3NMaXN0LmFkZCgncHJpb3JpdHktbG93Jyk7XG4gICAgICAgIHJldHVybiBoYW5kbGVycy5vblRhc2tQcmlvcml0eUVkaXQocHJvamVjdElkLCB0YXNrSWQsICdsb3cnKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7XG4gICAgdG9nZ2xlVGFzayxcbiAgICBhZGRUYXNrVG9ET00sXG4gICAgYWRkVGFzayxcbiAgICB1cGRhdGVQcmlvcml0eSxcbiAgICBkZWxldGVUYXNrLFxuICAgIGVkaXRUYXNrXG59IiwiaW1wb3J0IHsgYWRkUHJvamVjdCwgZGVsZXRlUHJvamVjdCwgZWRpdFByb2plY3QgfSBmcm9tIFwiLi9wcm9qZWN0c1wiO1xuaW1wb3J0IHVwZGF0ZVN0b3JhZ2UgZnJvbSBcIi4vc3RvcmFnZVwiO1xuaW1wb3J0IHsgdXBkYXRlUHJvamVjdExpc3QsIGFkZFByb2plY3RUb05vdGVwYWQsIGxvYWRUYXNrIH0gZnJvbSBcIi4vY3JlYXRlRE9NRWxlbWVudHNcIjtcbmltcG9ydCB7IHRvZ2dsZVRhc2ssIGFkZFRhc2tUb0RPTSwgYWRkVGFzaywgdXBkYXRlUHJpb3JpdHksIGRlbGV0ZVRhc2ssIGVkaXRUYXNrIH0gZnJvbSBcIi4vdGFza3NcIjtcblxuLy8gTG9hZCBsb2NhbFN0b3JhZ2UgaXRlbXMgb24gcGFnZSBsb2FkXG53aW5kb3cub25sb2FkID0gKCkgPT4ge1xuICAgIGNvbnN0IHByb2plY3RzID0gdXBkYXRlU3RvcmFnZS5nZXRQcm9qZWN0cygpO1xuXG4gICAgY29uc3QgbG9hZEFsbFByb2plY3RzID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBub3RlcGFkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5vdGVwYWQnKTtcbiAgICAgICAgXG4gICAgICAgIHByb2plY3RzLmZvckVhY2gocHJvamVjdCA9PiB7XG4gICAgICAgICAgICBhZGRQcm9qZWN0VG9Ob3RlcGFkKHByb2plY3QuaWQpO1xuXG4gICAgICAgICAgICBjb25zdCBwcm9qZWN0VGFza3MgPSBwcm9qZWN0LnRhc2tzO1xuICAgICAgICAgICAgY29uc3QgcHJvamVjdENvbnRhaW5lciA9IG5vdGVwYWQucXVlcnlTZWxlY3RvcihgW2RhdGEtcHJvamVjdC1pZD1cIiR7cHJvamVjdC5pZH1cIl1gKTtcbiAgICAgICAgICAgIGNvbnN0IHRhc2tzTGlzdCA9IHByb2plY3RDb250YWluZXIucXVlcnlTZWxlY3RvcigndWwnKTtcbiAgICAgICAgICAgIGNvbnN0IGFkZFRhc2tCdG4gPSBwcm9qZWN0Q29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5hZGQtdGFzaycpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBwcm9qZWN0VGFza3MuZm9yRWFjaCh0YXNrID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB0YXNrVG9BZGQgPSBsb2FkVGFzayh0YXNrKTtcbiAgICAgICAgICAgICAgICB0YXNrc0xpc3QuaW5zZXJ0QmVmb3JlKHRhc2tUb0FkZCwgYWRkVGFza0J0bi5wYXJlbnRFbGVtZW50KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9ICBcbiAgICB1cGRhdGVQcm9qZWN0TGlzdChwcm9qZWN0cyk7XG4gICAgbG9hZEFsbFByb2plY3RzKHByb2plY3RzKTtcbn1cblxuLy8gU2lkZWJhciBNb2R1bGVcbmNvbnN0IHNpZGViYXJDb250cm9sbGVyID0gKCgpID0+IHtcblxuICAgIGNvbnN0IG1vYmlsZVRvZ2dsZUJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiYXJzLWljb24tbW9iaWxlJyk7XG4gICAgaWYgKHdpbmRvdy5pbm5lcldpZHRoIDw9IDEwMjQgJiYgbW9iaWxlVG9nZ2xlQnRuLmNsYXNzTGlzdC5jb250YWlucygnaGlkZGVuJykpIHtcbiAgICAgICAgbW9iaWxlVG9nZ2xlQnRuLmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicpO1xuICAgIH1cblxuICAgIGNvbnN0IHNpZGViYXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2lkZWJhcicpO1xuICAgIFxuICAgIGNvbnN0IHRvZ2dsZVNpZGViYXIgPSAoKSA9PiB7XG4gICAgICAgIHNpZGViYXIuY2xhc3NMaXN0LnRvZ2dsZSgndG9nZ2xlLXNpZGViYXInKTtcbiAgICAgICAgaWYgKHdpbmRvdy5pbm5lcldpZHRoIDw9IDEwMjQpIG1vYmlsZVRvZ2dsZUJ0bi5jbGFzc0xpc3QudG9nZ2xlKCdoaWRkZW4nKTtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgdG9nZ2xlQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJhcnMtaWNvbicpO1xuICAgIHRvZ2dsZUJ0bi5mb3JFYWNoKGJ1dHRvbiA9PiB7XG4gICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRvZ2dsZVNpZGViYXIpO1xuICAgIH0pOyAgICAgICAgXG59KSgpO1xuXG5jb25zdCBwcm9qZWN0Q29udHJvbGxlciA9ICgoKSA9PiB7XG4gICAgZGVsZXRlUHJvamVjdCgpO1xuICAgIGNvbnN0IGFkZFByb2plY3RCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1hZGQtcHJvamVjdF0nKTtcbiAgICBhZGRQcm9qZWN0QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYWRkUHJvamVjdCk7XG4gICAgY29uc3QgcHJvamVjdExpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvamVjdC1saXN0Jyk7XG5cbiAgICBwcm9qZWN0TGlzdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2VkaXQtcHJvamVjdCcpKSB7XG4gICAgICAgICAgICBlZGl0UHJvamVjdChlKTtcbiAgICAgICAgfVxuICAgIH0pO1xufSkoKTtcblxuY29uc3QgdGFza0NvbnRyb2xsZXIgPSAoKCkgPT4ge1xuICAgIGNvbnN0IG5vdGVwYWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubm90ZXBhZCcpO1xuICAgIG5vdGVwYWQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCd0YXNrLXRleHQnKSkge1xuICAgICAgICAgICAgY29uc3QgdGFza0VsZW1lbnQgPSBlLnRhcmdldC5jbG9zZXN0KCcudGFzaycpO1xuICAgICAgICAgICAgdG9nZ2xlVGFzayh0YXNrRWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdhZGQtdGFzaycpKSB7XG4gICAgICAgICAgICBhZGRUYXNrVG9ET00oZS50YXJnZXQpO1xuICAgICAgICAgICAgYWRkVGFzaygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygncHJpb3JpdHktaWNvbicpKSB7XG4gICAgICAgICAgICB1cGRhdGVQcmlvcml0eShlLnRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZihlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2VkaXQtaWNvbicpKSB7XG4gICAgICAgICAgICBjb25zdCB0YXNrID0gZS50YXJnZXQuY2xvc2VzdCgnLnRhc2snKTtcbiAgICAgICAgICAgIGVkaXRUYXNrKHRhc2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdkZWxldGUtaWNvbicpKSB7XG4gICAgICAgICAgICBjb25zdCBwcm9qZWN0SWQgPSBlLnRhcmdldC5jbG9zZXN0KCdbZGF0YS1wcm9qZWN0LWlkXScpLmRhdGFzZXQucHJvamVjdElkO1xuICAgICAgICAgICAgY29uc3QgdGFza0lkID0gZS50YXJnZXQuY2xvc2VzdCgnW2RhdGEtdGFzay1pZF0nKS5kYXRhc2V0LnRhc2tJZDtcbiAgICAgICAgICAgIGRlbGV0ZVRhc2socHJvamVjdElkLCB0YXNrSWQpO1xuICAgICAgICB9XG4gICAgfSk7XG59KSgpOyJdLCJuYW1lcyI6WyJnZXRQcm9qZWN0cyIsIkpTT04iLCJwYXJzZSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJzYXZlUHJvamVjdCIsInByb2plY3RUb1NhdmUiLCJwcm9qZWN0cyIsImV4aXN0aW5nIiwiZmluZCIsInByb2plY3QiLCJpZCIsInByb2plY3ROYW1lIiwidGFza3MiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJwdXNoIiwic2V0SXRlbSIsInN0cmluZ2lmeSIsImdldFRhc2tzIiwicHJvamVjdElkIiwiZGVsZXRlUHJvamVjdCIsInVwZGF0ZWRQcm9qZWN0TGlzdCIsImZpbHRlciIsImRlbGV0ZVRhc2siLCJ0YXNrSWQiLCJwcm9qZWN0V2l0aFRhc2siLCJ1cGRhdGVkVGFza09iaiIsInRhc2tPYmoiLCJmaW5kVGFza1RvVXBkYXRlIiwiZXhpc3RpbmdUYXNrSWQiLCJ0YXNrIiwidXBkYXRlVGFzayIsInVwZGF0ZWRUYXNrIiwicHJvamVjdFRvVXBkYXRlIiwidGFza3NBcnJheSIsImluZGV4T2ZVcGRhdGVkVGFzayIsImZpbmRJbmRleCIsIl9yZWZyZXNoUHJvamVjdExpc3QiLCJfc2V0UHJvamVjdExpc3QiLCJ1cGRhdGVQcm9qZWN0TGlzdCIsIl9zZXRBY3RpdmVUYWIiLCJ0YWIiLCJ1cGRhdGVBY3RpdmVUYWIiLCJvblByb2plY3RTZWxlY3QiLCJwcm9qZWN0T2JqZWN0Iiwic2VsZWN0ZWRQcm9qZWN0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwib25Qcm9qZWN0QWRkIiwibmV3UHJvamVjdCIsIm5ld1Byb2plY3RET01FbGVtZW50Iiwib25Qcm9qZWN0TmFtZUVkaXQiLCJvblRhc2tBZGQiLCJuZXdUYXNrIiwiaXRlbSIsInByaW9yaXR5IiwiZHVlRGF0ZSIsImlzQ29tcGxldGUiLCJvblRhc2tOYW1lRWRpdCIsIm5ld1Rhc2tOYW1lIiwiZXhpc3RpbmdUYXNrIiwib25UYXNrUHJpb3JpdHlFZGl0IiwibmV3UHJpb3JpdHkiLCJvblRhc2tEdWVEYXRlRWRpdCIsIm5ld0R1ZURhdGUiLCJvblRhc2tDb21wbGV0ZUVkaXQiLCJjcmVhdGVFbGVtZW50cyIsImNyZWF0ZUxpc3RFbGVtZW50IiwiaHRtbENsYXNzIiwibGkiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwiY3JlYXRlU3BhbkVsZW1lbnQiLCJzcGFuIiwiY2xhc3NMaXN0IiwiYWRkIiwiY3JlYXRlSW1hZ2VFbGVtZW50Iiwic3JjIiwiaW1nIiwiY3JlYXRlSW5wdXRGaWVsZCIsInBsYWNlaG9sZGVyVGV4dCIsInVzZXJJbnB1dCIsInJlcXVpcmVkIiwiY3JlYXRlRm9ybSIsImNyZWF0ZURpdiIsImRpdiIsImNyZWF0ZUljb25TcGFuIiwidmlldyIsImljb25TcGFuIiwiZWRpdEljb24iLCJkZWxldGVJY29uIiwiYXBwZW5kIiwiYWRkUHJvamVjdFRvTm90ZXBhZCIsIm5vdGVwYWQiLCJwcm9qZWN0RGl2Iiwic2tpcExpbmUiLCJwcm9qZWN0SGVhZGluZyIsImgyIiwidGV4dENvbnRlbnQiLCJoMyIsInRhc2tzQ29udGFpbmVyIiwiYWRkVGFza0xpc3RFbGVtZW50IiwiYWRkVGFza1NwYW4iLCJhZGRJY29uIiwiYWRkRHVlRGF0ZVRvRE9NIiwiZHVlRGF0ZVNwYW4iLCJwcmlvcml0eUljb24iLCJkYXRlTGFiZWwiLCJkYXRlSW5wdXQiLCJjYWxlbmRhckljb24iLCJhZGRFdmVudExpc3RlbmVyIiwiY2xvc2VzdCIsImRhdGFzZXQiLCJ2YWx1ZSIsIl9jcmVhdGVQcm9qZWN0SXRlbUhUTUwiLCJuYW1lIiwicHJvamVjdEl0ZW0iLCJwcm9qZWN0c0xpc3RDb250YWluZXIiLCJhZGRQcm9qZWN0QnRuIiwic2xpY2UiLCJjYWxsIiwiY2hpbGRyZW4iLCJmb3JFYWNoIiwiY29udGFpbnMiLCJyZW1vdmUiLCJodG1sIiwiaW5zZXJ0QmVmb3JlIiwicXVlcnlTZWxlY3RvckFsbCIsImN1cnJlbnRBY3RpdmVUYWIiLCJhd2FpdGluZ0lucHV0IiwiaGFuZGxlVXNlcklucHV0IiwicGFyZW50RWxlbWVudCIsInByb2plY3RTcGFuIiwidHJpbSIsImNoaWxkTm9kZXMiLCJhZGRQcm9qZWN0IiwicHJvamVjdHNDb250YWluZXIiLCJwcm9qZWN0TGlzdEVsZW1lbnQiLCJwcm9qZWN0SW5wdXRGb3JtIiwicHJvamVjdE5hbWVJbnB1dCIsImxhc3RFbGVtZW50Q2hpbGQiLCJzZXRUaW1lb3V0IiwiZm9jdXMiLCJhZGRQcm9qZWN0VG9TaWRlYmFyIiwiaW5wdXRGb3JtIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJwcm9qZWN0TGlzdCIsImNoaWxkRWxlbWVudENvdW50IiwiZ2V0QXR0cmlidXRlIiwiZSIsInByZXZlbnREZWZhdWx0IiwiYWRkVGFzayIsImlucHV0RmllbGQiLCJ0YXNrQ29udGFpbmVyIiwidmFsaWRhdGVVc2VySW5wdXQiLCJjcmVhdGVUYXNrIiwidGFza0l0ZW0iLCJ0YXNrVGV4dFNwYW4iLCJwcmVwZW5kIiwid2luZG93Iiwib25sb2FkIiwicHJvamVjdFRhc2tzIiwicHJvamVjdENvbnRhaW5lciIsInRhc2tzTGlzdCIsImFkZFRhc2tCdG4iLCJ0YXNrVG9BZGQiLCJ0YXNrTmFtZVNwYW4iLCJsb2FkVGFzayIsImxvYWRBbGxQcm9qZWN0cyIsIm1vYmlsZVRvZ2dsZUJ0biIsImdldEVsZW1lbnRCeUlkIiwiaW5uZXJXaWR0aCIsInRvZ2dsZSIsInNpZGViYXIiLCJ0b2dnbGVTaWRlYmFyIiwiYnV0dG9uIiwidGFyZ2V0IiwicHJldmlvdXNFbGVtZW50U2libGluZyIsInVwZGF0ZU5hbWVPbk5vdGVwYWQiLCJwcm9qZWN0VGFza3NDb250YWluZXIiLCJlZGl0UHJvamVjdCIsInRhc2tFbGVtZW50IiwidG9nZ2xlVGFzayIsInRhc2tMaXN0RWxlbWVudCIsInRhc2tTcGFuIiwiY29udGFpbmVyIiwibnVtYmVyT2ZUYXNrcyIsImFkZFRhc2tUb0RPTSIsImV2ZW50VGFyZ2V0IiwicHJpb3JpdHlDbGFzc0xpc3QiLCJ1cGRhdGVQcmlvcml0eSIsInRhc2tOYW1lIiwiZWRpdFRhc2siXSwic291cmNlUm9vdCI6IiJ9