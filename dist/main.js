(()=>{"use strict";const e=(()=>{const e=()=>JSON.parse(localStorage.getItem("projects")||"[]"),t=t=>{const n=e(),r=n.find((e=>e.id==t.id));r?(r.projectName=t.projectName,r.tasks=t.tasks):(t.id=Math.floor(1e6*Math.random()),n.push(t)),localStorage.setItem("projects",JSON.stringify(n))};return{getProjects:e,saveProject:t,deleteProject:t=>{const n=e().filter((e=>e.id!=t));localStorage.setItem("projects",JSON.stringify(n))},deleteTask:(n,r)=>{const c=e().filter((e=>e.id==n))[0],o=c.tasks.filter((e=>e.task.item!=r));c.tasks=o,t(c)}}})(),t=(()=>{const t=()=>{const t=e.getProjects();n(t)},n=e=>{a(e)},r=e=>{s(e)};return{onProjectSelect:t=>{const n=e.getProjects().find((e=>e.id==t)),c=document.querySelector(`[data-project-id='${n.id}']`);r(c)},onProjectAdd:n=>{const c={projectName:n,tasks:[]};e.saveProject(c),t();const o=document.querySelector(`[data-project-id='${c.id}']`);r(o)},onProjectEdit:(n,r,c)=>{e.saveProject({id:n,projectName:r,tasks:c}),t()},onTaskAdd:(t,n)=>{const r={task:{item:t,taskId:Math.floor(1e6*Math.random()),priority:"low",dueDate:null,isComplete:!1}},c=e.getProjects().find((e=>e.id==n));return c.tasks.push(r),e.saveProject(c),r}}})(),n=()=>({createListElement:e=>{const t=document.createElement("li");return t.setAttribute("class",e),t},createSpanElement:e=>{const t=document.createElement("span");return t.classList.add(e),t},createImageElement:(e,t)=>{const n=document.createElement("img");return n.classList.add(t),n.setAttribute("src",e),n.setAttribute("draggable","false"),n},createInputField:e=>{const t=document.createElement("input");return t.setAttribute("type","text"),t.setAttribute("placeholder",e),t.setAttribute("id","user-input"),t.required=!0,t},createForm:()=>document.createElement("form"),createDiv:e=>{const t=document.createElement("div");return t.setAttribute("class",e),t}}),r=()=>{const e=n(),t=e.createSpanElement("icons"),r=e.createImageElement("images/edit-icon.svg","edit-icon"),c=e.createImageElement("images/delete-icon.svg","delete-icon");return r.classList.add("edit-project"),c.classList.add("delete-project"),t.append(r,c),t},c=e=>{const t=n(),r=document.querySelector(".project-list"),c=r.childElementCount-2,o=r.children[c].textContent,a=document.querySelector("#writing-area"),s=t.createDiv("project");s.setAttribute("data-project-id",e);const i=t.createDiv("skip-line"),d=t.createDiv("project-heading"),l=document.createElement("h2");l.setAttribute("class","notepad-text"),l.textContent=o;const m=document.createElement("h3");m.setAttribute("class","notepad-text"),m.textContent="Due Date";const p=document.createElement("ul");p.classList.add("notepad-text","todos");const u=t.createListElement("task"),E=t.createSpanElement("add-task"),g=t.createImageElement("images/add-icon.svg","add-icon");E.append(g,"Add Task"),u.append(E),p.append(u,i),d.append(l,m),s.append(d,p),a.append(s)},o=(e,t)=>{const c=n(),o=c.createListElement("project-item");o.setAttribute("data-project-id",e);const a=c.createSpanElement("project-name");a.textContent=t;const s=r();return o.append(a,s),o},a=e=>{const n=document.querySelector(".project-list"),r=document.querySelector("[data-add-project]");[].slice.call(n.children).forEach((e=>{e.classList.contains("project-item")&&e.remove()}));for(const t of e){const e=o(t.id,t.projectName);n.insertBefore(e,r)}n.querySelectorAll(".project-item").forEach((e=>{e.addEventListener("click",(()=>{t.onProjectSelect(e.dataset.projectId)}))}))},s=e=>{const t=document.querySelector(".active");t&&t.classList.remove("active"),e.classList.add("active"),e.children.item(0)},i=()=>null!=document.querySelector("#user-input"),d=()=>{const e=document.querySelector("#user-input"),t=e.parentElement.parentElement,r=n().createSpanElement("project-name"),c=e.value.trim();c&&(r.textContent=c,e.parentElement.remove(),t.insertBefore(r,t.childNodes[0]))},l=()=>{if(i())return;(()=>{const e=n(),t=document.querySelector(".project-list"),c=e.createListElement("project-item"),o=e.createForm(),a=e.createInputField("Project name...");o.append(a);const s=r();c.append(o,s),t.insertBefore(c,t.lastElementChild),setTimeout((()=>{a.focus()}),0)})();const e=document.querySelector("#user-input"),o=e.parentElement,a=o.parentElement;e.addEventListener("blur",(function(){if(""==e.value.trim())return void a.remove();d();const n=a.firstElementChild.textContent;t.onProjectAdd(n);const r=document.querySelector(".project-list"),o=r.children[r.childElementCount-2].getAttribute("data-project-id");i()||c(o)})),o.addEventListener("submit",(function(e){e.preventDefault(),d();const n=a.firstElementChild.textContent;t.onProjectAdd(n);const r=document.querySelector(".project-list"),o=r.children[r.childElementCount-2].getAttribute("data-project-id");i()||c(o)}))},m=()=>{const e=document.querySelector("#user-input"),t=e.parentElement,n=t.parentElement.parentElement;e.addEventListener("blur",(function(t){const r=t.target.closest("[data-project-id]").dataset.projectId,c=e.value;u(),c&&p(c,r,n)})),t.addEventListener("submit",(function(t){t.preventDefault();const r=t.target.closest("[data-project-id]").dataset.projectId,c=e.value;u(),c&&p(c,r,n)}))},p=(e,n,r)=>{const c=t.onTaskAdd(e,n);r.setAttribute("data-task-id",c.task.taskId)},u=()=>{const e=document.querySelector("#user-input"),t=e.parentElement,r=t.parentElement,c=r.parentElement,o=e.value.trim(),a=n().createSpanElement("task-text");a.append(o),""!=o?(t.remove(),r.prepend(a)):c.remove()};window.onload=()=>{const t=e.getProjects();a(t)},(()=>{const e=document.getElementById("bars-icon-mobile");window.innerWidth<=1024&&e.classList.contains("hidden")&&e.classList.toggle("hidden");const t=document.getElementById("sidebar"),n=()=>{t.classList.toggle("toggle-sidebar"),window.innerWidth<=1024&&e.classList.toggle("hidden")};document.querySelectorAll(".bars-icon").forEach((e=>{e.addEventListener("click",n)}))})(),document.addEventListener("click",(t=>{if(t.target.closest(".delete-project")){const n=t.target.closest(".project-item");n.remove();const r=n.dataset.projectId;e.deleteProject(r)}})),document.querySelector("[data-add-project]").addEventListener("click",l),document.addEventListener("click",(e=>{e.target.classList.contains("edit-project")&&(e=>{if(i())return;const r=n().createForm(),c=n().createInputField("Project name..."),o=e.target.parentElement.previousElementSibling;c.value=o.textContent,o.remove(),r.append(c);const a=e.target.closest(".project-item");a.insertBefore(r,a.childNodes[0]);const s=document.querySelector("#user-input"),l=a.dataset.projectId;s.addEventListener("blur",(function(){""!=s.value&&d();const e=a.firstElementChild.textContent;t.onProjectEdit(l,e,"beans")})),r.addEventListener("submit",(function(e){e.preventDefault(),d();const n=a.firstElementChild.textContent;t.onProjectEdit(l,n,"beans")}))})(e)})),document.addEventListener("click",(t=>{t.target.classList.contains("task-item")&&t.target.parentElement.classList.toggle("completed"),t.target.classList.contains("add-task")&&((t=>{if(document.getElementById("user-input"))return;const r=n().createListElement("task"),c=n().createSpanElement("task-item"),o=n().createForm(),a=n().createInputField("Enter Task...");o.append(a),c.append(o);const s=n().createSpanElement("icons"),i=n().createImageElement("images/edit-icon.svg","edit-icon"),d=n().createImageElement("images/delete-icon.svg","delete-icon");i.addEventListener("click",(()=>{if(r.classList.contains("completed"))return;const e=document.querySelector(".task-text"),t=e.textContent;e.remove();const o=n().createForm(),a=n().createInputField("Enter Task...");a.value=t,o.append(a),c.insertBefore(o,s),r.prepend(c),m()})),d.addEventListener("click",(t=>{const n=t.target.closest("[data-project-id]").dataset.projectId,c=t.target.parentElement.previousElementSibling.textContent;r.remove(),e.deleteTask(n,c)})),s.append(i,d),c.append(s);const l=(()=>{const e=n().createSpanElement("due-date"),t=n().createImageElement("images/priority-icon.svg","priority-icon");t.classList.add("priority-low");const r=document.createElement("label");r.classList.add("date-label");const c=document.createElement("input");c.setAttribute("type","date"),c.required=!0;const o=n().createImageElement("images/calendar-icon.svg","calendar-icon");return r.append(c,o),e.append(t,r),e})();r.append(c,l);const p=t.closest(".todos"),u=p.childElementCount-2;p.insertBefore(r,p.children[u]),setTimeout((()=>{a.focus()}),0)})(t.target),m()),t.target.classList.contains("priority-icon")&&(e=>{if(e.parentElement.parentElement.classList.contains("completed"))return;const t=e.classList;t.contains("priority-low")?(t.remove("priority-low"),t.add("priority-medium")):t.contains("priority-medium")?(t.remove("priority-medium"),t.add("priority-high")):t.contains("priority-high")&&(t.remove("priority-high"),t.add("priority-low"))})(t.target)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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dkMsWUFBVyxLQUNQUyxFQUFXUixVQUNaLElDVkt1QyxDQUFhbEMsRUFBRUssUUFDZkgsS0FFQUYsRUFBRUssT0FBTzFFLFVBQVUwQyxTQUFTLGtCRGdGakIsQ0FBQzhELElBRXBCLEdBRDBCQSxFQUFZcEQsY0FBY0EsY0FBY3BELFVBQzVDMEMsU0FBUyxhQUFjLE9BRTdDLE1BQU0rRCxFQUFvQkQsRUFBWXhHLFVBRWxDeUcsRUFBa0IvRCxTQUFTLGlCQUMzQitELEVBQWtCOUQsT0FBTyxnQkFDekI4RCxFQUFrQnhHLElBQUksb0JBR3RCd0csRUFBa0IvRCxTQUFTLG9CQUMzQitELEVBQWtCOUQsT0FBTyxtQkFDekI4RCxFQUFrQnhHLElBQUksa0JBR3RCd0csRUFBa0IvRCxTQUFTLG1CQUMzQitELEVBQWtCOUQsT0FBTyxpQkFDekI4RCxFQUFrQnhHLElBQUksa0JDakdsQnlHLENBQWVyQyxFQUFFSyxZIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3N0b3JhZ2UuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2hhbmRsZXJzLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9jcmVhdGVET01FbGVtZW50cy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvcHJvamVjdHMuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3Rhc2tzLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB1cGRhdGVTdG9yYWdlID0gKCkgPT4ge1xuICAgIFxuICAgIGNvbnN0IGdldFByb2plY3RzID0gKCkgPT4ge1xuICAgICAgICAvLyBjcmVhdGVzIGFuIGFycmF5IG9mIG9iamVjdHMgXG4gICAgICAgIGNvbnN0IHByb2plY3RzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncHJvamVjdHMnKSB8fCAnW10nKTtcbiAgICAgICAgcmV0dXJuIHByb2plY3RzO1xuICAgIH1cblxuICAgIGNvbnN0IHNhdmVQcm9qZWN0ID0gKHByb2plY3RUb1NhdmUpID0+IHtcbiAgICAgICAgY29uc3QgcHJvamVjdHMgPSBnZXRQcm9qZWN0cygpO1xuXG4gICAgICAgIC8vIGZpbmQgbWV0aG9kIHJldHVybnMgdGhlIGZpcnN0IG9iamVjdCB0aGF0IG1hdGNoZXMgdGhlIGlkXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nID0gcHJvamVjdHMuZmluZChwcm9qZWN0ID0+IHByb2plY3QuaWQgPT0gcHJvamVjdFRvU2F2ZS5pZCk7XG4gICAgICAgIFxuICAgICAgICBpZiAoZXhpc3RpbmcpIHtcbiAgICAgICAgICAgIGV4aXN0aW5nLnByb2plY3ROYW1lID0gcHJvamVjdFRvU2F2ZS5wcm9qZWN0TmFtZTtcbiAgICAgICAgICAgIGV4aXN0aW5nLnRhc2tzID0gcHJvamVjdFRvU2F2ZS50YXNrcztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHByb2plY3RUb1NhdmUuaWQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwKTtcbiAgICAgICAgICAgIC8vIEFkZCBwcm9qZWN0TmFtZVxuICAgICAgICAgICAgLy8gQWRkIFRhc2tzIGFycmF5IGNvbnRhaW5pbmcgYW5vdGhlciBhcnJheSB3aGljaCBpbmNsdWRlcyB0YXNrLCBwcmlvcml0eSwgZHVlRGF0ZSwgYW5kIHRydWUvZmFsc2UgZm9yIGNvbXBsZXRlZCBvciBub3RcbiAgICAgICAgICAgIHByb2plY3RzLnB1c2gocHJvamVjdFRvU2F2ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncHJvamVjdHMnLCBKU09OLnN0cmluZ2lmeShwcm9qZWN0cykpO1xuICAgIH1cblxuICAgY29uc3QgZGVsZXRlUHJvamVjdCA9IChpZCkgPT4ge1xuICAgICAgICBjb25zdCBwcm9qZWN0cyA9IGdldFByb2plY3RzKCk7XG4gICAgICAgIGNvbnN0IHVwZGF0ZWRQcm9qZWN0TGlzdCA9IHByb2plY3RzLmZpbHRlcihwcm9qZWN0ID0+IHByb2plY3QuaWQgIT0gaWQpO1xuXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwcm9qZWN0cycsIEpTT04uc3RyaW5naWZ5KHVwZGF0ZWRQcm9qZWN0TGlzdCkpO1xuICAgfVxuXG4gICAvLyBUT0RPOiBVcGRhdGUgdGhpcyBmdW5jdGlvbiB0byB1c2UgdGFza0lkIGluc3RlYWQgb2YgdGFza1RvRGVsZXRlXG4gICBjb25zdCBkZWxldGVUYXNrID0gKGlkLCB0YXNrVG9EZWxldGUpID0+IHtcbiAgICAgICAgY29uc3QgcHJvamVjdHMgPSBnZXRQcm9qZWN0cygpO1xuICAgICAgICBjb25zdCBwcm9qZWN0V2l0aFRhc2sgPSBwcm9qZWN0cy5maWx0ZXIocHJvamVjdCA9PiBwcm9qZWN0LmlkID09IGlkKVswXTtcbiAgICAgICAgY29uc3QgYWxsVGFza3MgPSBwcm9qZWN0V2l0aFRhc2sudGFza3M7XG4gICAgICAgIC8vIEVhY2ggdGFzayBpcyBhbiBvYmplY3RcbiAgICAgICAgY29uc3QgdXBkYXRlZFRhc2tPYmogPSBhbGxUYXNrcy5maWx0ZXIodGFza09iaiA9PiB0YXNrT2JqLnRhc2suaXRlbSAhPSB0YXNrVG9EZWxldGUpO1xuICAgICAgICBwcm9qZWN0V2l0aFRhc2sudGFza3MgPSB1cGRhdGVkVGFza09iajtcblxuICAgICAgICBzYXZlUHJvamVjdChwcm9qZWN0V2l0aFRhc2spO1xuICAgfVxuXG4gICAgcmV0dXJuIHsgZ2V0UHJvamVjdHMsIHNhdmVQcm9qZWN0LCBkZWxldGVQcm9qZWN0LCBkZWxldGVUYXNrIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgdXBkYXRlU3RvcmFnZSgpOyIsImltcG9ydCB7IHVwZGF0ZVByb2plY3RMaXN0LCB1cGRhdGVBY3RpdmVUYWIgfSBmcm9tIFwiLi9jcmVhdGVET01FbGVtZW50c1wiO1xuaW1wb3J0IHVwZGF0ZVN0b3JhZ2UgZnJvbSBcIi4vc3RvcmFnZVwiO1xuaW1wb3J0IHtmb3JtYXR9IGZyb20gXCJkYXRlLWZuc1wiO1xuXG5jb25zdCBoYW5kbGVycyA9ICgpID0+IHtcbiAgICBcbiAgICBjb25zdCBfcmVmcmVzaFByb2plY3RMaXN0ID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBwcm9qZWN0cyA9IHVwZGF0ZVN0b3JhZ2UuZ2V0UHJvamVjdHMoKTsgLy8gVXBkYXRlIHByb2plY3RzIGluIHN0b3JhZ2UgICAgICAgIFxuICAgICAgICBfc2V0UHJvamVjdExpc3QocHJvamVjdHMpOyAvLyBVcGRhdGUgcHJvamVjdHMgb24gRE9NXG4gICAgfVxuXG4gICAgY29uc3QgX3NldFByb2plY3RMaXN0ID0gKHByb2plY3RzKSA9PiB7XG4gICAgICAgIHVwZGF0ZVByb2plY3RMaXN0KHByb2plY3RzKTtcbiAgICB9XG5cbiAgICBjb25zdCBfc2V0QWN0aXZlVGFiID0gKHRhYikgPT4ge1xuICAgICAgICB1cGRhdGVBY3RpdmVUYWIodGFiKTtcbiAgICB9XG5cbiAgICAvLyBIZXJlIGJlIGhhbmRsZXJzXG4gICAgY29uc3Qgb25Qcm9qZWN0U2VsZWN0ID0gKHByb2plY3RJZCkgPT4ge1xuICAgICAgICBjb25zdCBwcm9qZWN0cyA9IHVwZGF0ZVN0b3JhZ2UuZ2V0UHJvamVjdHMoKTtcbiAgICAgICAgY29uc3QgcHJvamVjdE9iamVjdCA9IHByb2plY3RzLmZpbmQocHJvamVjdCA9PiBwcm9qZWN0LmlkID09IHByb2plY3RJZCk7XG4gICAgICAgIGNvbnN0IHNlbGVjdGVkUHJvamVjdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXByb2plY3QtaWQ9JyR7cHJvamVjdE9iamVjdC5pZH0nXWApO1xuICAgICAgICBfc2V0QWN0aXZlVGFiKHNlbGVjdGVkUHJvamVjdCk7XG4gICAgfVxuXG4gICAgY29uc3Qgb25Qcm9qZWN0QWRkID0gKHByb2plY3ROYW1lKSA9PiB7XG4gICAgICAgIC8vIHBhc3MgdXNlciBpbnB1dCBpbnRvIGZ1bmN0aW9uXG4gICAgICAgIGNvbnN0IG5ld1Byb2plY3QgPSAge1xuICAgICAgICAgICAgcHJvamVjdE5hbWU6IHByb2plY3ROYW1lLFxuICAgICAgICAgICAgdGFza3M6IFtdXG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlU3RvcmFnZS5zYXZlUHJvamVjdChuZXdQcm9qZWN0KTtcbiAgICAgICAgLy8gYWRkIGlucHV0IHRvIHBhZ2VcbiAgICAgICAgX3JlZnJlc2hQcm9qZWN0TGlzdCgpO1xuICAgICAgICBjb25zdCBuZXdQcm9qZWN0RE9NRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXByb2plY3QtaWQ9JyR7bmV3UHJvamVjdC5pZH0nXWApO1xuICAgICAgICBfc2V0QWN0aXZlVGFiKG5ld1Byb2plY3RET01FbGVtZW50KTtcbiAgICB9XG4gICAgLy8gQWRkIG9wdGlvbmFsIHBhcmFtZXRlcnM/IHByaW9yaXR5ID0gJ2xvdycsIGR1ZURhdGUgPSBjdXJyZW50RGF0ZSwgaXNDb21wbGV0ZT0gZmFsc2VcbiAgICBjb25zdCBvblRhc2tBZGQgPSAodGFzaywgaWQpID0+IHtcbiAgICAgICAgY29uc3QgbmV3VGFzayA9IHtcbiAgICAgICAgICAgIHRhc2s6IHtcbiAgICAgICAgICAgICAgICBpdGVtOiB0YXNrLCBcbiAgICAgICAgICAgICAgICB0YXNrSWQ6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDApLFxuICAgICAgICAgICAgICAgIHByaW9yaXR5OiAnbG93JyxcbiAgICAgICAgICAgICAgICBkdWVEYXRlOiBudWxsLFxuICAgICAgICAgICAgICAgIGlzQ29tcGxldGU6IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJvamVjdHMgPSB1cGRhdGVTdG9yYWdlLmdldFByb2plY3RzKCk7XG4gICAgICAgIGNvbnN0IHByb2plY3RUb1VwZGF0ZSA9IHByb2plY3RzLmZpbmQocHJvamVjdCA9PiBwcm9qZWN0LmlkID09IGlkKTtcbiAgICAgICAgcHJvamVjdFRvVXBkYXRlLnRhc2tzLnB1c2gobmV3VGFzayk7XG4gICAgICAgIHVwZGF0ZVN0b3JhZ2Uuc2F2ZVByb2plY3QocHJvamVjdFRvVXBkYXRlKTtcbiAgICAgICAgLy8gVE9ETzogQXBwZW5kIG5ld1Rhc2sgdG8gdGFza3MgYXJyYXlcbiAgICAgICAgICAgICAgICAvLyAxKSBHZXQgUHJvamVjdHM6IGNvbnN0IHByb2plY3RzID0gdXBkYXRlU3RvcmFnZS5nZXRQcm9qZWN0cygpO1xuICAgICAgICAgICAgICAgIC8vIDIpIGZpbmQgcHJvamVjdCBtYXRjaGluZyBpZDogY29uc3QgcHJvamVjdFRvVXBkYXRlID0gcHJvamVjdHMuZmluZChwcm9qZWN0ID0+IHByb2plY3QuaWQgPT0gaWQpXG4gICAgICAgICAgICAgICAgLy8gMykgZ2V0IHRhc2tzIGFycmF5IGFuZCBhcHBlbmQgbmV3VGFzazogcHJvamVjdFRvVXBkYXRlLnRhc2tzLnB1c2gobmV3VGFzayk7XG4gICAgICAgICAgICAgICAgLy8gNCkgc2F2ZVByb2plY3QgdG8gbG9jYWxTdG9yYWdlOiB1cGRhdGVTdG9yYWdlLnNhdmVQcm9qZWN0KHByb2plY3RUb1VwZGF0ZSk7ICpNaWdodCBoYXZlIHRvIGVkaXQgc2F2ZVByb2plY3QgZnVuY3Rpb24gaW4gc3RvcmFnZS5qc1xuICAgICAgICByZXR1cm4gbmV3VGFzaztcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBUaGlzIGRvZXNuJ3Qgd29yay4gTWFrZSB0aGlzIG9uUHJvamVjdE5hbWVFZGl0IGFuZCBoYXZlIHNlcGFyYXRlIG9uVGFza0VkaXQgZnVuY3Rpb24/XG4gICAgY29uc3Qgb25Qcm9qZWN0RWRpdCA9IChwcm9qZWN0SWQsIHByb2plY3ROYW1lLCB0YXNrcykgPT4ge1xuICAgICAgICB1cGRhdGVTdG9yYWdlLnNhdmVQcm9qZWN0KHtcbiAgICAgICAgICAgIGlkOiBwcm9qZWN0SWQsXG4gICAgICAgICAgICBwcm9qZWN0TmFtZTogcHJvamVjdE5hbWUsXG4gICAgICAgICAgICB0YXNrczogdGFza3NcbiAgICAgICAgfSk7XG5cbiAgICAgICAgX3JlZnJlc2hQcm9qZWN0TGlzdCgpO1xuICAgIH1cblxuICAgIHJldHVybiB7IG9uUHJvamVjdFNlbGVjdCwgb25Qcm9qZWN0QWRkLCBvblByb2plY3RFZGl0LCBvblRhc2tBZGQgfVxuICAgIFxufVxuXG5leHBvcnQgZGVmYXVsdCBoYW5kbGVycygpOyIsImltcG9ydCBoYW5kbGVycyBmcm9tIFwiLi9oYW5kbGVyc1wiXG5cbi8vIERPTSBFbGVtZW50cyBGYWN0b3J5IEZ1bmN0aW9uXG5jb25zdCBjcmVhdGVFbGVtZW50cyA9ICgpID0+IHtcbiAgICBcbiAgICBjb25zdCBjcmVhdGVMaXN0RWxlbWVudCA9IChodG1sQ2xhc3MpID0+IHtcbiAgICAgICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICAgICAgICBsaS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgaHRtbENsYXNzKTtcbiAgICAgICAgcmV0dXJuIGxpO1xuICAgIH1cblxuICAgIGNvbnN0IGNyZWF0ZVNwYW5FbGVtZW50ID0gKGh0bWxDbGFzcykgPT4ge1xuICAgICAgICBjb25zdCBzcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICBzcGFuLmNsYXNzTGlzdC5hZGQoaHRtbENsYXNzKTtcbiAgICAgICAgcmV0dXJuIHNwYW47XG4gICAgfVxuXG4gICAgY29uc3QgY3JlYXRlSW1hZ2VFbGVtZW50ID0gKHNyYywgaHRtbENsYXNzKSA9PiB7XG4gICAgICAgIGNvbnN0IGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICAgICAgICBpbWcuY2xhc3NMaXN0LmFkZChodG1sQ2xhc3MpO1xuICAgICAgICBpbWcuc2V0QXR0cmlidXRlKCdzcmMnLCBzcmMpO1xuICAgICAgICBpbWcuc2V0QXR0cmlidXRlKCdkcmFnZ2FibGUnLCAnZmFsc2UnKTtcbiAgICAgICAgcmV0dXJuIGltZztcbiAgICB9XG4gICAgXG4gICAgY29uc3QgY3JlYXRlRm9ybSA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgaW5wdXRGb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZm9ybScpO1xuICAgICAgICByZXR1cm4gaW5wdXRGb3JtO1xuICAgIH1cblxuICAgIGNvbnN0IGNyZWF0ZUlucHV0RmllbGQgPSAocGxhY2Vob2xkZXJUZXh0KSA9PiB7XG4gICAgICAgIGNvbnN0IHVzZXJJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgIHVzZXJJbnB1dC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dCcpO1xuICAgICAgICB1c2VySW5wdXQuc2V0QXR0cmlidXRlKCdwbGFjZWhvbGRlcicsIHBsYWNlaG9sZGVyVGV4dCk7XG4gICAgICAgIHVzZXJJbnB1dC5zZXRBdHRyaWJ1dGUoJ2lkJywgJ3VzZXItaW5wdXQnKTtcbiAgICAgICAgdXNlcklucHV0LnJlcXVpcmVkID0gdHJ1ZTtcblxuICAgICAgICByZXR1cm4gdXNlcklucHV0O1xuICAgIH1cblxuICAgIGNvbnN0IGNyZWF0ZURpdiA9IChodG1sQ2xhc3MpID0+IHtcbiAgICAgICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGRpdi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgaHRtbENsYXNzKTtcbiAgICAgICAgcmV0dXJuIGRpdjtcbiAgICB9XG5cbiAgICByZXR1cm4ge2NyZWF0ZUxpc3RFbGVtZW50LCBjcmVhdGVTcGFuRWxlbWVudCwgY3JlYXRlSW1hZ2VFbGVtZW50LCBjcmVhdGVJbnB1dEZpZWxkLCBjcmVhdGVGb3JtLCBjcmVhdGVEaXZ9XG59XG5cbmNvbnN0IGNyZWF0ZUljb25TcGFuID0gKCkgPT4ge1xuICAgIGNvbnN0IHZpZXcgPSBjcmVhdGVFbGVtZW50cygpO1xuXG4gICAgY29uc3QgaWNvblNwYW4gPSB2aWV3LmNyZWF0ZVNwYW5FbGVtZW50KCdpY29ucycpO1xuICAgIGNvbnN0IGVkaXRJY29uID0gdmlldy5jcmVhdGVJbWFnZUVsZW1lbnQoJ2ltYWdlcy9lZGl0LWljb24uc3ZnJywgJ2VkaXQtaWNvbicpO1xuICAgIGNvbnN0IGRlbGV0ZUljb24gPSB2aWV3LmNyZWF0ZUltYWdlRWxlbWVudCgnaW1hZ2VzL2RlbGV0ZS1pY29uLnN2ZycsICdkZWxldGUtaWNvbicpO1xuICAgIFxuICAgIGVkaXRJY29uLmNsYXNzTGlzdC5hZGQoJ2VkaXQtcHJvamVjdCcpO1xuICAgIGRlbGV0ZUljb24uY2xhc3NMaXN0LmFkZCgnZGVsZXRlLXByb2plY3QnKTtcbiAgICBcbiAgICBpY29uU3Bhbi5hcHBlbmQoZWRpdEljb24sIGRlbGV0ZUljb24pO1xuICAgIFxuICAgIHJldHVybiBpY29uU3Bhbjtcbn1cblxuY29uc3QgYWRkUHJvamVjdFRvU2lkZWJhciA9ICgpID0+IHtcbiAgICBjb25zdCB2aWV3ID0gY3JlYXRlRWxlbWVudHMoKTtcbiAgICBjb25zdCBwcm9qZWN0c0NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9qZWN0LWxpc3QnKTtcblxuICAgIGNvbnN0IHByb2plY3RMaXN0RWxlbWVudCA9ICB2aWV3LmNyZWF0ZUxpc3RFbGVtZW50KCdwcm9qZWN0LWl0ZW0nKTtcbiAgICBcbiAgICBjb25zdCBwcm9qZWN0SW5wdXRGb3JtID0gdmlldy5jcmVhdGVGb3JtKCk7XG4gICAgY29uc3QgcHJvamVjdE5hbWVJbnB1dCA9IHZpZXcuY3JlYXRlSW5wdXRGaWVsZCgnUHJvamVjdCBuYW1lLi4uJyk7XG4gICAgcHJvamVjdElucHV0Rm9ybS5hcHBlbmQocHJvamVjdE5hbWVJbnB1dCk7XG5cbiAgICBjb25zdCBpY29uU3BhbiA9IGNyZWF0ZUljb25TcGFuKCk7XG4gICAgcHJvamVjdExpc3RFbGVtZW50LmFwcGVuZChwcm9qZWN0SW5wdXRGb3JtLCBpY29uU3Bhbik7XG4gICAgcHJvamVjdHNDb250YWluZXIuaW5zZXJ0QmVmb3JlKHByb2plY3RMaXN0RWxlbWVudCwgcHJvamVjdHNDb250YWluZXIubGFzdEVsZW1lbnRDaGlsZCk7XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgcHJvamVjdE5hbWVJbnB1dC5mb2N1cygpO1xuICAgIH0sIDApO1xufVxuXG5jb25zdCBhZGRQcm9qZWN0VG9Ob3RlcGFkID0gKHByb2plY3RJZCkgPT4ge1xuICAgIGNvbnN0IHZpZXcgPSBjcmVhdGVFbGVtZW50cygpO1xuICAgIGNvbnN0IHByb2plY3RMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2plY3QtbGlzdCcpO1xuICAgIGNvbnN0IGN1cnJlbnRQcm9qZWN0TnVtYmVyID0gcHJvamVjdExpc3QuY2hpbGRFbGVtZW50Q291bnQgLSAyO1xuICAgIGNvbnN0IHByb2plY3ROYW1lID0gcHJvamVjdExpc3QuY2hpbGRyZW5bY3VycmVudFByb2plY3ROdW1iZXJdLnRleHRDb250ZW50O1xuXG4gICAgY29uc3Qgbm90ZXBhZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN3cml0aW5nLWFyZWEnKTtcbiAgICBjb25zdCBwcm9qZWN0RGl2ID0gdmlldy5jcmVhdGVEaXYoJ3Byb2plY3QnKTtcbiAgICBwcm9qZWN0RGl2LnNldEF0dHJpYnV0ZSgnZGF0YS1wcm9qZWN0LWlkJywgcHJvamVjdElkKTtcbiAgICBjb25zdCBza2lwTGluZSA9IHZpZXcuY3JlYXRlRGl2KCdza2lwLWxpbmUnKTtcbiAgICBcbiAgICBjb25zdCBwcm9qZWN0SGVhZGluZyA9IHZpZXcuY3JlYXRlRGl2KCdwcm9qZWN0LWhlYWRpbmcnKTtcbiAgICBjb25zdCBoMiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gyJyk7XG4gICAgaDIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdub3RlcGFkLXRleHQnKTtcbiAgICBoMi50ZXh0Q29udGVudCA9IHByb2plY3ROYW1lO1xuICAgIGNvbnN0IGgzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDMnKTtcbiAgICBoMy5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ25vdGVwYWQtdGV4dCcpO1xuICAgIGgzLnRleHRDb250ZW50ID0gJ0R1ZSBEYXRlJztcbiAgICAgICAgXG4gICAgY29uc3QgdGFza3NDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpO1xuICAgIHRhc2tzQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ25vdGVwYWQtdGV4dCcsICd0b2RvcycpO1xuXG4gICAgY29uc3QgYWRkVGFza0xpc3RFbGVtZW50ID0gdmlldy5jcmVhdGVMaXN0RWxlbWVudCgndGFzaycpO1xuICAgIGNvbnN0IGFkZFRhc2tTcGFuID0gdmlldy5jcmVhdGVTcGFuRWxlbWVudCgnYWRkLXRhc2snKTtcbiAgICBjb25zdCBhZGRJY29uID0gdmlldy5jcmVhdGVJbWFnZUVsZW1lbnQoJ2ltYWdlcy9hZGQtaWNvbi5zdmcnLCAnYWRkLWljb24nKTtcbiAgICBhZGRUYXNrU3Bhbi5hcHBlbmQoYWRkSWNvbiwgJ0FkZCBUYXNrJyk7XG5cbiAgICBhZGRUYXNrTGlzdEVsZW1lbnQuYXBwZW5kKGFkZFRhc2tTcGFuKTtcbiAgICB0YXNrc0NvbnRhaW5lci5hcHBlbmQoYWRkVGFza0xpc3RFbGVtZW50LCBza2lwTGluZSk7XG4gICAgcHJvamVjdEhlYWRpbmcuYXBwZW5kKGgyLCBoMyk7XG4gICAgcHJvamVjdERpdi5hcHBlbmQocHJvamVjdEhlYWRpbmcsIHRhc2tzQ29udGFpbmVyKTtcbiAgICBub3RlcGFkLmFwcGVuZChwcm9qZWN0RGl2KTtcbn1cblxuY29uc3QgX2NyZWF0ZVByb2plY3RJdGVtSFRNTCA9IChpZCwgbmFtZSkgPT4ge1xuICAgIC8vIGNyZWF0ZXMgSFRNTCBmb3IgcHJvamVjdCBpdGVtcyBpbiBzaWRlYmFyIGZyb20gbG9jYWxTdG9yYWdlIGl0ZW1cbiAgICBjb25zdCB2aWV3ID0gY3JlYXRlRWxlbWVudHMoKTtcblxuICAgIGNvbnN0IHByb2plY3RJdGVtID0gdmlldy5jcmVhdGVMaXN0RWxlbWVudCgncHJvamVjdC1pdGVtJyk7XG4gICAgcHJvamVjdEl0ZW0uc2V0QXR0cmlidXRlKCdkYXRhLXByb2plY3QtaWQnLCBpZCk7XG4gICAgY29uc3QgcHJvamVjdE5hbWUgPSB2aWV3LmNyZWF0ZVNwYW5FbGVtZW50KCdwcm9qZWN0LW5hbWUnKTtcbiAgICBwcm9qZWN0TmFtZS50ZXh0Q29udGVudCA9IG5hbWU7XG4gICAgY29uc3QgaWNvblNwYW4gPSBjcmVhdGVJY29uU3BhbigpO1xuXG4gICAgcHJvamVjdEl0ZW0uYXBwZW5kKHByb2plY3ROYW1lLCBpY29uU3Bhbik7XG5cbiAgICByZXR1cm4gcHJvamVjdEl0ZW07XG59XG5cbmNvbnN0IHVwZGF0ZVByb2plY3RMaXN0ID0gKHByb2plY3RzKSA9PiB7XG4gICAgY29uc3QgcHJvamVjdHNMaXN0Q29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2plY3QtbGlzdCcpO1xuICAgIGNvbnN0IGFkZFByb2plY3RCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1hZGQtcHJvamVjdF0nKTtcbiAgICBcbiAgICAvLyBDbGVhciBhbGwgZWxlbWVudHMgb2YgY2xhc3MgJy5wcm9qZWN0LWl0ZW0nXG4gICAgY29uc3QgcHJvamVjdHNBcnJheSA9IFtdLnNsaWNlLmNhbGwocHJvamVjdHNMaXN0Q29udGFpbmVyLmNoaWxkcmVuKTtcbiAgICBwcm9qZWN0c0FycmF5LmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgIGlmIChpdGVtLmNsYXNzTGlzdC5jb250YWlucygncHJvamVjdC1pdGVtJykpIGl0ZW0ucmVtb3ZlKCk7XG4gICAgfSk7XG5cbiAgICBmb3IgKGNvbnN0IHByb2plY3Qgb2YgcHJvamVjdHMpIHtcbiAgICAgICAgY29uc3QgaHRtbCA9IF9jcmVhdGVQcm9qZWN0SXRlbUhUTUwocHJvamVjdC5pZCwgcHJvamVjdC5wcm9qZWN0TmFtZSk7XG4gICAgICAgIHByb2plY3RzTGlzdENvbnRhaW5lci5pbnNlcnRCZWZvcmUoaHRtbCwgYWRkUHJvamVjdEJ0bik7XG4gICAgfVxuXG4gICAgLy8gQWRkIGxpc3RlbmVycyBmb3IgZWRpdCwgZGVsZXRlID8/Pz9cbiAgICBwcm9qZWN0c0xpc3RDb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLnByb2plY3QtaXRlbScpLmZvckVhY2gocHJvamVjdEl0ZW0gPT4ge1xuICAgICAgICBwcm9qZWN0SXRlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIGhhbmRsZXJzLm9uUHJvamVjdFNlbGVjdChwcm9qZWN0SXRlbS5kYXRhc2V0LnByb2plY3RJZCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuXG5jb25zdCB1cGRhdGVBY3RpdmVUYWIgPSAodGFiKSA9PiB7XG4gICAgLy8gZm9yIGFsbCBvdGhlciBwcm9qZWN0cywgY2hhbmdlIGRpc3BsYXkgdG8gbm9uZSwgdG8gYnJpbmcgYmFjayBzZXQgZGlzcGxheSB0byBjb250ZW50cyAgXG4gICAgICAgIC8vIGl0ZW0uc3R5bGUuZGlzcGxheSA9ICdub25lJ1xuICAgIC8vIHJlbW92ZSBhY3RpdmUgY2xhc3MgZnJvbSBhbnkgb3RoZXIgc2lkZWJhciBlbGVtZW50XG4gICAgY29uc3QgY3VycmVudEFjdGl2ZVRhYiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hY3RpdmUnKTtcbiAgICBpZiAoY3VycmVudEFjdGl2ZVRhYikgY3VycmVudEFjdGl2ZVRhYi5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICB0YWIuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgY29uc3QgcHJvamVjdE5hbWVTcGFuID0gdGFiLmNoaWxkcmVuLml0ZW0oMCk7IC8vIFVwZGF0ZSBub3RlcGFkIGhlcmU/XG4gICAgLy9jb25zb2xlLmxvZyhwcm9qZWN0TmFtZVNwYW4pO1xufVxuXG5leHBvcnQgeyBhZGRQcm9qZWN0VG9TaWRlYmFyLCBhZGRQcm9qZWN0VG9Ob3RlcGFkLCBjcmVhdGVFbGVtZW50cywgdXBkYXRlUHJvamVjdExpc3QsIHVwZGF0ZUFjdGl2ZVRhYn07IiwiaW1wb3J0IHsgYWRkUHJvamVjdFRvU2lkZWJhciwgYWRkUHJvamVjdFRvTm90ZXBhZCwgY3JlYXRlRWxlbWVudHMgfSBmcm9tIFwiLi9jcmVhdGVET01FbGVtZW50c1wiO1xuaW1wb3J0IGhhbmRsZXJzIGZyb20gXCIuL2hhbmRsZXJzXCI7XG5pbXBvcnQgdXBkYXRlU3RvcmFnZSBmcm9tIFwiLi9zdG9yYWdlXCJcblxuY29uc3QgYXdhaXRpbmdJbnB1dCA9ICgpID0+IHtcbiAgICBjb25zdCB1c2VySW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdXNlci1pbnB1dCcpO1xuICAgIGlmICh1c2VySW5wdXQgIT0gbnVsbCkgcmV0dXJuIHRydWU7XG5cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmNvbnN0IGhhbmRsZVVzZXJJbnB1dCA9ICgpID0+IHsgXG4gICAgLy8gVGhpcyBpcyBET00gU3R1ZmZcbiAgICBjb25zdCB1c2VySW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdXNlci1pbnB1dCcpXG4gICAgY29uc3QgaW5wdXRGb3JtID0gdXNlcklucHV0LnBhcmVudEVsZW1lbnQ7XG4gICAgY29uc3QgcHJvamVjdEl0ZW0gPSBpbnB1dEZvcm0ucGFyZW50RWxlbWVudDtcbiAgICBjb25zdCBwcm9qZWN0U3BhbiA9IGNyZWF0ZUVsZW1lbnRzKCkuY3JlYXRlU3BhbkVsZW1lbnQoJ3Byb2plY3QtbmFtZScpO1xuICAgIFxuICAgIGNvbnN0IHByb2plY3ROYW1lID0gdXNlcklucHV0LnZhbHVlLnRyaW0oKTtcbiAgICBpZiAoIXByb2plY3ROYW1lKSByZXR1cm47XG5cbiAgICBwcm9qZWN0U3Bhbi50ZXh0Q29udGVudCA9IHByb2plY3ROYW1lO1xuICAgIHVzZXJJbnB1dC5wYXJlbnRFbGVtZW50LnJlbW92ZSgpO1xuICAgIHByb2plY3RJdGVtLmluc2VydEJlZm9yZShwcm9qZWN0U3BhbiwgcHJvamVjdEl0ZW0uY2hpbGROb2Rlc1swXSk7IFxufVxuXG5jb25zdCBhZGRQcm9qZWN0ID0gKCkgPT4ge1xuICAgIGlmIChhd2FpdGluZ0lucHV0KCkpIHJldHVybjtcbiAgICBhZGRQcm9qZWN0VG9TaWRlYmFyKCk7XG4gICAgXG4gICAgY29uc3QgdXNlcklucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3VzZXItaW5wdXQnKTtcbiAgICBjb25zdCBpbnB1dEZvcm0gPSB1c2VySW5wdXQucGFyZW50RWxlbWVudDtcbiAgICBjb25zdCBwcm9qZWN0SXRlbSA9IGlucHV0Rm9ybS5wYXJlbnRFbGVtZW50O1xuXG4gICAgdXNlcklucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh1c2VySW5wdXQudmFsdWUudHJpbSgpID09ICcnKSB7XG4gICAgICAgICAgICBwcm9qZWN0SXRlbS5yZW1vdmUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBoYW5kbGVVc2VySW5wdXQoKTtcblxuICAgICAgICBjb25zdCBwcm9qZWN0TmFtZSA9IHByb2plY3RJdGVtLmZpcnN0RWxlbWVudENoaWxkLnRleHRDb250ZW50O1xuICAgICAgICBoYW5kbGVycy5vblByb2plY3RBZGQocHJvamVjdE5hbWUpOyBcblxuICAgICAgICBjb25zdCBwcm9qZWN0TGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9qZWN0LWxpc3QnKTtcbiAgICAgICAgLy8gU2VsZWN0IGxhc3QgcHJvamVjdCBhZGRlZCBhbmQgZ2V0IGlkIGF0dHJpYnV0ZVxuICAgICAgICBjb25zdCBwcm9qZWN0SWQgPSBwcm9qZWN0TGlzdC5jaGlsZHJlbltwcm9qZWN0TGlzdC5jaGlsZEVsZW1lbnRDb3VudCAtIDJdLmdldEF0dHJpYnV0ZSgnZGF0YS1wcm9qZWN0LWlkJyk7XG4gICAgICAgIGlmICghYXdhaXRpbmdJbnB1dCgpKSBhZGRQcm9qZWN0VG9Ob3RlcGFkKHByb2plY3RJZCk7XG4gICAgfSk7XG5cbiAgICBpbnB1dEZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBoYW5kbGVVc2VySW5wdXQoKTtcbiAgICAgICAgY29uc3QgcHJvamVjdE5hbWUgPSBwcm9qZWN0SXRlbS5maXJzdEVsZW1lbnRDaGlsZC50ZXh0Q29udGVudDtcbiAgICAgICAgaGFuZGxlcnMub25Qcm9qZWN0QWRkKHByb2plY3ROYW1lKTsgXG4gICAgICAgIGNvbnN0IHByb2plY3RMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2plY3QtbGlzdCcpO1xuICAgICAgICBjb25zdCBwcm9qZWN0SWQgPSBwcm9qZWN0TGlzdC5jaGlsZHJlbltwcm9qZWN0TGlzdC5jaGlsZEVsZW1lbnRDb3VudCAtIDJdLmdldEF0dHJpYnV0ZSgnZGF0YS1wcm9qZWN0LWlkJyk7XG4gICAgICAgIGlmICghYXdhaXRpbmdJbnB1dCgpKSBhZGRQcm9qZWN0VG9Ob3RlcGFkKHByb2plY3RJZCk7XG4gICAgfSk7XG59XG5jb25zdCBkZWxldGVQcm9qZWN0ID0gKCkgPT4ge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgaWYgKGUudGFyZ2V0LmNsb3Nlc3QoJy5kZWxldGUtcHJvamVjdCcpKSB7XG4gICAgICAgICAgICBjb25zdCBwcm9qZWN0SXRlbSA9IGUudGFyZ2V0LmNsb3Nlc3QoJy5wcm9qZWN0LWl0ZW0nKVxuICAgICAgICAgICAgcHJvamVjdEl0ZW0ucmVtb3ZlKCk7XG4gICAgICAgICAgICBjb25zdCBwcm9qZWN0SWQgPSBwcm9qZWN0SXRlbS5kYXRhc2V0LnByb2plY3RJZDtcbiAgICAgICAgICAgIHVwZGF0ZVN0b3JhZ2UuZGVsZXRlUHJvamVjdChwcm9qZWN0SWQpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgLy8gVE9ETzogUmVtb3ZlIHByb2plY3QgZnJvbSBub3RlcGFkIGJ5IHJlbG9hZGluZyBsb2NhbFN0b3JhZ2UgaXRlbXMgZm9yIGN1cnJlbnQgc2VsZWN0ZWQgdGFiIChpLmUuIFRvZGF5KS4gSWYgY3VycmVudCBzZWxlY3QgdGFiIGlzIHRoZSBvbmUgdGhhdCBpcyBkZWxldGVkIGxvYWQgbm90ZXBhZCB3aXRoIEhvbWUgdGFiIFxufVxuXG4vLyBUT0RPOiBjcmVhdGUgZnVuY3Rpb24gdG8gdXBkYXRlIHByb2plY3QgbmFtZSBvbiBub3RlcGFkIHdoZW4gdXNlciBlZGl0cyBpdFxuIFxuY29uc3QgZWRpdFByb2plY3QgPSAoZSkgPT4ge1xuICAgIGlmIChhd2FpdGluZ0lucHV0KCkpIHJldHVybjtcbiAgICBcbiAgICAvLyBUaGlzIGlzIERPTSBTdHVmZlxuICAgIGNvbnN0IGlucHV0Rm9ybSA9IGNyZWF0ZUVsZW1lbnRzKCkuY3JlYXRlRm9ybSgpO1xuICAgIGNvbnN0IGlucHV0RmllbGQgPSBjcmVhdGVFbGVtZW50cygpLmNyZWF0ZUlucHV0RmllbGQoJ1Byb2plY3QgbmFtZS4uLicpO1xuICAgIGNvbnN0IHByb2plY3ROYW1lID0gZS50YXJnZXQucGFyZW50RWxlbWVudC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuXG4gICAgaW5wdXRGaWVsZC52YWx1ZSA9IHByb2plY3ROYW1lLnRleHRDb250ZW50O1xuICAgIHByb2plY3ROYW1lLnJlbW92ZSgpO1xuICAgIGlucHV0Rm9ybS5hcHBlbmQoaW5wdXRGaWVsZCk7XG5cbiAgICBjb25zdCBwcm9qZWN0SXRlbSA9IGUudGFyZ2V0LmNsb3Nlc3QoJy5wcm9qZWN0LWl0ZW0nKTtcbiAgICBwcm9qZWN0SXRlbS5pbnNlcnRCZWZvcmUoaW5wdXRGb3JtLCBwcm9qZWN0SXRlbS5jaGlsZE5vZGVzWzBdKTtcblxuICAgIGNvbnN0IHVzZXJJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN1c2VyLWlucHV0Jyk7XG4gICAgXG4gICAgY29uc3QgcHJvamVjdElkID0gcHJvamVjdEl0ZW0uZGF0YXNldC5wcm9qZWN0SWQ7XG5cbiAgICB1c2VySW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHVzZXJJbnB1dC52YWx1ZSAhPSAnJykgaGFuZGxlVXNlcklucHV0KCk7XG4gICAgICAgIC8vaWYgKCFhd2FpdGluZ0lucHV0KCkpIGVkaXRQcm9qZWN0T25Ob3RlcGFkKCk7XG4gICAgICAgIGNvbnN0IHByb2plY3ROYW1lID0gcHJvamVjdEl0ZW0uZmlyc3RFbGVtZW50Q2hpbGQudGV4dENvbnRlbnQ7XG4gICAgICAgIGhhbmRsZXJzLm9uUHJvamVjdEVkaXQocHJvamVjdElkLCBwcm9qZWN0TmFtZSwgJ2JlYW5zJyk7IC8vIFRPRE86IEZpZ3VyZSBvdXQgaG93IHRvIHN0b3JlIHRhc2sgZGF0YSwgdGhpcyBkb2Vzbid0IHdvcmtcbiAgICB9KTtcblxuICAgIGlucHV0Rm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGhhbmRsZVVzZXJJbnB1dCgpO1xuICAgICAgICAvL2lmICghYXdhaXRpbmdJbnB1dCgpKSBlZGl0UHJvamVjdE9uTm90ZXBhZCgpO1xuICAgICAgICBjb25zdCBwcm9qZWN0TmFtZSA9IHByb2plY3RJdGVtLmZpcnN0RWxlbWVudENoaWxkLnRleHRDb250ZW50O1xuICAgICAgICBoYW5kbGVycy5vblByb2plY3RFZGl0KHByb2plY3RJZCwgcHJvamVjdE5hbWUsICdiZWFucycpOyAvLyBUT0RPOiBGaWd1cmUgb3V0IGhvdyB0byBzdG9yZSB0YXNrIGRhdGEsIHRoaXMgZG9lc24ndCB3b3JrXG4gICAgfSk7XG59XG5cbmV4cG9ydCB7IFxuICAgIGFkZFByb2plY3QsXG4gICAgZGVsZXRlUHJvamVjdCxcbiAgICBlZGl0UHJvamVjdFxufSIsImltcG9ydCB7Y3JlYXRlRWxlbWVudHN9IGZyb20gXCIuL2NyZWF0ZURPTUVsZW1lbnRzXCI7XG5pbXBvcnQge2Zvcm1hdH0gZnJvbSBcImRhdGUtZm5zXCI7XG5pbXBvcnQgaGFuZGxlcnMgZnJvbSBcIi4vaGFuZGxlcnNcIjtcbmltcG9ydCB1cGRhdGVTdG9yYWdlIGZyb20gXCIuL3N0b3JhZ2VcIjtcblxuY29uc3QgdG9nZ2xlVGFzayA9ICh0YXNrRWxlbWVudCkgPT4ge1xuICAgIHRhc2tFbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoJ2NvbXBsZXRlZCcpO1xufVxuXG5jb25zdCBhZGRUYXNrVG9ET00gPSAoYWRkVGFza0J0bikgPT4ge1xuICAgIGlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndXNlci1pbnB1dCcpKSByZXR1cm47XG4gICAgY29uc3QgdGFza0xpc3RFbGVtZW50ID0gY3JlYXRlRWxlbWVudHMoKS5jcmVhdGVMaXN0RWxlbWVudCgndGFzaycpO1xuICAgIGNvbnN0IHRhc2tTcGFuID0gY3JlYXRlRWxlbWVudHMoKS5jcmVhdGVTcGFuRWxlbWVudCgndGFzay1pdGVtJyk7XG4gICAgY29uc3QgaW5wdXRGb3JtID0gY3JlYXRlRWxlbWVudHMoKS5jcmVhdGVGb3JtKCk7XG4gICAgY29uc3QgaW5wdXRGaWVsZCA9IGNyZWF0ZUVsZW1lbnRzKCkuY3JlYXRlSW5wdXRGaWVsZCgnRW50ZXIgVGFzay4uLicpO1xuICAgIFxuICAgIGlucHV0Rm9ybS5hcHBlbmQoaW5wdXRGaWVsZCk7XG4gICAgdGFza1NwYW4uYXBwZW5kKGlucHV0Rm9ybSk7XG5cbiAgICBjb25zdCBpY29uU3BhbiA9IGNyZWF0ZUVsZW1lbnRzKCkuY3JlYXRlU3BhbkVsZW1lbnQoJ2ljb25zJyk7XG4gICAgY29uc3QgZWRpdEljb24gPSBjcmVhdGVFbGVtZW50cygpLmNyZWF0ZUltYWdlRWxlbWVudCgnaW1hZ2VzL2VkaXQtaWNvbi5zdmcnLCAnZWRpdC1pY29uJyk7XG4gICAgY29uc3QgZGVsZXRlSWNvbiA9IGNyZWF0ZUVsZW1lbnRzKCkuY3JlYXRlSW1hZ2VFbGVtZW50KCdpbWFnZXMvZGVsZXRlLWljb24uc3ZnJywgJ2RlbGV0ZS1pY29uJyk7XG5cbiAgICBlZGl0SWNvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgaWYgKHRhc2tMaXN0RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2NvbXBsZXRlZCcpKSByZXR1cm47XG4gICAgICAgIGNvbnN0IHRhc2tUZXh0U3BhbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50YXNrLXRleHQnKTtcbiAgICAgICAgY29uc3QgdGFzayA9IHRhc2tUZXh0U3Bhbi50ZXh0Q29udGVudDtcbiAgICAgICAgdGFza1RleHRTcGFuLnJlbW92ZSgpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgaW5wdXRGb3JtID0gY3JlYXRlRWxlbWVudHMoKS5jcmVhdGVGb3JtKCk7XG4gICAgICAgIGNvbnN0IGlucHV0RmllbGQgPSBjcmVhdGVFbGVtZW50cygpLmNyZWF0ZUlucHV0RmllbGQoJ0VudGVyIFRhc2suLi4nKTtcblxuICAgICAgICBpbnB1dEZpZWxkLnZhbHVlID0gdGFzaztcbiAgICAgICAgXG4gICAgICAgIGlucHV0Rm9ybS5hcHBlbmQoaW5wdXRGaWVsZCk7XG4gICAgICAgIHRhc2tTcGFuLmluc2VydEJlZm9yZShpbnB1dEZvcm0sIGljb25TcGFuKTtcbiAgICAgICAgdGFza0xpc3RFbGVtZW50LnByZXBlbmQodGFza1NwYW4pO1xuICAgICAgICBhZGRUYXNrKCk7XG4gICAgICAgIC8vIFRPRE86IFVwZGF0ZSB0YXNrIGluIGxvY2FsIHN0b3JhZ2VcbiAgICB9KTtcblxuICAgIGRlbGV0ZUljb24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICBjb25zdCBwcm9qZWN0SWQgPSBlLnRhcmdldC5jbG9zZXN0KCdbZGF0YS1wcm9qZWN0LWlkXScpLmRhdGFzZXQucHJvamVjdElkO1xuICAgICAgICBjb25zdCB0YXNrVG9EZWxldGUgPSBlLnRhcmdldC5wYXJlbnRFbGVtZW50LnByZXZpb3VzRWxlbWVudFNpYmxpbmcudGV4dENvbnRlbnQ7XG4gICAgICAgIHRhc2tMaXN0RWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgLy8gVE9ETzogVXBkYXRlIHRoaXMgaWYgdXNpbmcgdGFza0lkXG4gICAgICAgIHVwZGF0ZVN0b3JhZ2UuZGVsZXRlVGFzayhwcm9qZWN0SWQsIHRhc2tUb0RlbGV0ZSk7XG4gICAgfSk7XG5cbiAgICBpY29uU3Bhbi5hcHBlbmQoZWRpdEljb24sIGRlbGV0ZUljb24pO1xuICAgIHRhc2tTcGFuLmFwcGVuZChpY29uU3Bhbik7XG4gICAgY29uc3QgZHVlRGF0ZSA9IGFkZER1ZURhdGVUb0RPTSgpO1xuICAgIHRhc2tMaXN0RWxlbWVudC5hcHBlbmQodGFza1NwYW4sIGR1ZURhdGUpO1xuICAgIFxuICAgIGNvbnN0IGNvbnRhaW5lciA9IGFkZFRhc2tCdG4uY2xvc2VzdCgnLnRvZG9zJyk7XG4gICAgY29uc3QgbnVtYmVyT2ZUYXNrcyA9IGNvbnRhaW5lci5jaGlsZEVsZW1lbnRDb3VudCAtIDI7XG5cbiAgICBjb250YWluZXIuaW5zZXJ0QmVmb3JlKHRhc2tMaXN0RWxlbWVudCwgY29udGFpbmVyLmNoaWxkcmVuW251bWJlck9mVGFza3NdKTtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBpbnB1dEZpZWxkLmZvY3VzKCk7XG4gICAgfSwgMCk7XG5cbiAgICByZXR1cm4gdGFza1NwYW47XG59XG5cbmNvbnN0IGFkZER1ZURhdGVUb0RPTSA9ICgpID0+IHtcbiAgICBjb25zdCBkdWVEYXRlU3BhbiA9IGNyZWF0ZUVsZW1lbnRzKCkuY3JlYXRlU3BhbkVsZW1lbnQoJ2R1ZS1kYXRlJyk7XG5cbiAgICBjb25zdCBwcmlvcml0eUljb24gPSBjcmVhdGVFbGVtZW50cygpLmNyZWF0ZUltYWdlRWxlbWVudCgnaW1hZ2VzL3ByaW9yaXR5LWljb24uc3ZnJywgJ3ByaW9yaXR5LWljb24nKVxuICAgIHByaW9yaXR5SWNvbi5jbGFzc0xpc3QuYWRkKCdwcmlvcml0eS1sb3cnKTtcbiAgICBcbiAgICBjb25zdCBkYXRlTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuICAgIGRhdGVMYWJlbC5jbGFzc0xpc3QuYWRkKCdkYXRlLWxhYmVsJyk7XG4gICAgXG4gICAgY29uc3QgZGF0ZUlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICBkYXRlSW5wdXQuc2V0QXR0cmlidXRlKCd0eXBlJywgJ2RhdGUnKTtcbiAgICBkYXRlSW5wdXQucmVxdWlyZWQgPSB0cnVlO1xuXG4gICAgY29uc3QgY2FsZW5kYXJJY29uID0gY3JlYXRlRWxlbWVudHMoKS5jcmVhdGVJbWFnZUVsZW1lbnQoJ2ltYWdlcy9jYWxlbmRhci1pY29uLnN2ZycsICdjYWxlbmRhci1pY29uJyk7XG5cbiAgICBkYXRlTGFiZWwuYXBwZW5kKGRhdGVJbnB1dCwgY2FsZW5kYXJJY29uKTtcbiAgICBkdWVEYXRlU3Bhbi5hcHBlbmQocHJpb3JpdHlJY29uLCBkYXRlTGFiZWwpO1xuXG4gICAgcmV0dXJuIGR1ZURhdGVTcGFuO1xufVxuXG5jb25zdCBhZGRUYXNrID0gKCkgPT4ge1xuICAgIGNvbnN0IGlucHV0RmllbGQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdXNlci1pbnB1dCcpO1xuICAgIGNvbnN0IGlucHV0Rm9ybSA9IGlucHV0RmllbGQucGFyZW50RWxlbWVudDtcbiAgICBjb25zdCB0YXNrQ29udGFpbmVyID0gaW5wdXRGb3JtLnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudDtcblxuICAgIGlucHV0RmllbGQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGNvbnN0IHByb2plY3RJZCA9IGUudGFyZ2V0LmNsb3Nlc3QoJ1tkYXRhLXByb2plY3QtaWRdJykuZGF0YXNldC5wcm9qZWN0SWQ7XG4gICAgICAgIGNvbnN0IHRhc2sgPSBpbnB1dEZpZWxkLnZhbHVlO1xuICAgICAgICB2YWxpZGF0ZVVzZXJJbnB1dCgpO1xuICAgICAgICAvL2lmICh0YXNrKSBoYW5kbGVycy5vblRhc2tBZGQodGFzaywgcHJvamVjdElkKTtcbiAgICAgICAgaWYgKHRhc2spIGNyZWF0ZVRhc2sodGFzaywgcHJvamVjdElkLCB0YXNrQ29udGFpbmVyKTtcbiAgICB9KTtcbiAgICBcbiAgICBpbnB1dEZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBjb25zdCBwcm9qZWN0SWQgPSBlLnRhcmdldC5jbG9zZXN0KCdbZGF0YS1wcm9qZWN0LWlkXScpLmRhdGFzZXQucHJvamVjdElkO1xuICAgICAgICBjb25zdCB0YXNrID0gaW5wdXRGaWVsZC52YWx1ZTtcbiAgICAgICAgdmFsaWRhdGVVc2VySW5wdXQoKTtcbiAgICAgICAgaWYgKHRhc2spIGNyZWF0ZVRhc2sodGFzaywgcHJvamVjdElkLCB0YXNrQ29udGFpbmVyKTtcbiAgICB9KTtcbn1cblxuY29uc3QgY3JlYXRlVGFzayA9ICh0YXNrLCBwcm9qZWN0SWQsIHRhc2tDb250YWluZXIpID0+IHtcbiAgICBjb25zdCB0YXNrT2JqID0gaGFuZGxlcnMub25UYXNrQWRkKHRhc2ssIHByb2plY3RJZCk7XG4gICAgdGFza0NvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGFzay1pZCcsIHRhc2tPYmoudGFzay50YXNrSWQpO1xufVxuXG5jb25zdCB2YWxpZGF0ZVVzZXJJbnB1dCA9ICgpID0+IHtcbiAgICBjb25zdCBpbnB1dEZpZWxkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3VzZXItaW5wdXQnKTtcbiAgICBjb25zdCBpbnB1dEZvcm0gPSBpbnB1dEZpZWxkLnBhcmVudEVsZW1lbnQ7XG4gICAgY29uc3QgdGFza0l0ZW0gPSBpbnB1dEZvcm0ucGFyZW50RWxlbWVudDtcbiAgICBjb25zdCB0YXNrQ29udGFpbmVyID0gdGFza0l0ZW0ucGFyZW50RWxlbWVudDtcblxuICAgIGNvbnN0IHVzZXJJbnB1dCA9IGlucHV0RmllbGQudmFsdWUudHJpbSgpO1xuICAgIGNvbnN0IHRhc2tUZXh0U3BhbiA9IGNyZWF0ZUVsZW1lbnRzKCkuY3JlYXRlU3BhbkVsZW1lbnQoJ3Rhc2stdGV4dCcpO1xuICAgIHRhc2tUZXh0U3Bhbi5hcHBlbmQodXNlcklucHV0KTtcblxuICAgICAgICBpZiAodXNlcklucHV0ID09ICcnKSB7XG4gICAgICAgICAgICB0YXNrQ29udGFpbmVyLnJlbW92ZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlucHV0Rm9ybS5yZW1vdmUoKTtcbiAgICAgICAgdGFza0l0ZW0ucHJlcGVuZCh0YXNrVGV4dFNwYW4pO1xuICAgICAgICAvL2ljb25TcGFuLmluc2VydEFkamFjZW50VGV4dCgnYmVmb3JlYmVnaW4nLCB1c2VySW5wdXQpO1xufVxuXG4vLyBUT0RPOiBVcGRhdGUgcHJpb3JpdHkgaW4gbG9jYWxTdG9yYWdlXG5jb25zdCB1cGRhdGVQcmlvcml0eSA9IChldmVudFRhcmdldCkgPT4ge1xuICAgIGNvbnN0IHRhc2tJdGVtQ2xhc3NMaXN0ID0gZXZlbnRUYXJnZXQucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdDtcbiAgICBpZiAodGFza0l0ZW1DbGFzc0xpc3QuY29udGFpbnMoJ2NvbXBsZXRlZCcpKSByZXR1cm47XG5cbiAgICBjb25zdCBwcmlvcml0eUNsYXNzTGlzdCA9IGV2ZW50VGFyZ2V0LmNsYXNzTGlzdDtcblxuICAgIGlmIChwcmlvcml0eUNsYXNzTGlzdC5jb250YWlucygncHJpb3JpdHktbG93JykpIHtcbiAgICAgICAgcHJpb3JpdHlDbGFzc0xpc3QucmVtb3ZlKCdwcmlvcml0eS1sb3cnKTtcbiAgICAgICAgcHJpb3JpdHlDbGFzc0xpc3QuYWRkKCdwcmlvcml0eS1tZWRpdW0nKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAocHJpb3JpdHlDbGFzc0xpc3QuY29udGFpbnMoJ3ByaW9yaXR5LW1lZGl1bScpKSB7XG4gICAgICAgIHByaW9yaXR5Q2xhc3NMaXN0LnJlbW92ZSgncHJpb3JpdHktbWVkaXVtJyk7XG4gICAgICAgIHByaW9yaXR5Q2xhc3NMaXN0LmFkZCgncHJpb3JpdHktaGlnaCcpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChwcmlvcml0eUNsYXNzTGlzdC5jb250YWlucygncHJpb3JpdHktaGlnaCcpKSB7XG4gICAgICAgIHByaW9yaXR5Q2xhc3NMaXN0LnJlbW92ZSgncHJpb3JpdHktaGlnaCcpO1xuICAgICAgICBwcmlvcml0eUNsYXNzTGlzdC5hZGQoJ3ByaW9yaXR5LWxvdycpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxufVxuXG5leHBvcnQge1xuICAgIHRvZ2dsZVRhc2ssXG4gICAgYWRkVGFza1RvRE9NLFxuICAgIGFkZFRhc2ssXG4gICAgdXBkYXRlUHJpb3JpdHksXG59IiwiaW1wb3J0IHsgYWRkUHJvamVjdCwgZGVsZXRlUHJvamVjdCwgZWRpdFByb2plY3QgfSBmcm9tIFwiLi9wcm9qZWN0c1wiO1xuaW1wb3J0IHVwZGF0ZVN0b3JhZ2UgZnJvbSBcIi4vc3RvcmFnZVwiO1xuaW1wb3J0IHsgdXBkYXRlUHJvamVjdExpc3QgfSBmcm9tIFwiLi9jcmVhdGVET01FbGVtZW50c1wiO1xuaW1wb3J0IHsgdG9nZ2xlVGFzaywgYWRkVGFza1RvRE9NLCBhZGRUYXNrLCB1cGRhdGVQcmlvcml0eSB9IGZyb20gXCIuL3Rhc2tzXCI7XG5cbi8vIExvYWQgbG9jYWxTdG9yYWdlIGl0ZW1zIG9uIHBhZ2UgbG9hZFxud2luZG93Lm9ubG9hZCA9ICgpID0+IHtcbiAgICBjb25zdCBwcm9qZWN0cyA9IHVwZGF0ZVN0b3JhZ2UuZ2V0UHJvamVjdHMoKTtcbiAgICB1cGRhdGVQcm9qZWN0TGlzdChwcm9qZWN0cyk7XG59XG5cbi8vIFNpZGViYXIgTW9kdWxlXG5jb25zdCBzaWRlYmFyQ29udHJvbGxlciA9ICgoKSA9PiB7XG5cbiAgICBjb25zdCBtb2JpbGVUb2dnbGVCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYmFycy1pY29uLW1vYmlsZScpO1xuICAgIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA8PSAxMDI0ICYmIG1vYmlsZVRvZ2dsZUJ0bi5jbGFzc0xpc3QuY29udGFpbnMoJ2hpZGRlbicpKSB7XG4gICAgICAgIG1vYmlsZVRvZ2dsZUJ0bi5jbGFzc0xpc3QudG9nZ2xlKCdoaWRkZW4nKTtcbiAgICB9XG5cbiAgICBjb25zdCBzaWRlYmFyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NpZGViYXInKTtcbiAgICBcbiAgICBjb25zdCB0b2dnbGVTaWRlYmFyID0gKCkgPT4ge1xuICAgICAgICBzaWRlYmFyLmNsYXNzTGlzdC50b2dnbGUoJ3RvZ2dsZS1zaWRlYmFyJyk7XG4gICAgICAgIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA8PSAxMDI0KSBtb2JpbGVUb2dnbGVCdG4uY2xhc3NMaXN0LnRvZ2dsZSgnaGlkZGVuJyk7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHRvZ2dsZUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5iYXJzLWljb24nKTtcbiAgICB0b2dnbGVCdG4uZm9yRWFjaChidXR0b24gPT4ge1xuICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b2dnbGVTaWRlYmFyKTtcbiAgICB9KTsgICAgICAgIFxufSkoKTtcblxuY29uc3QgcHJvamVjdENvbnRyb2xsZXIgPSAoKCkgPT4ge1xuICAgIGRlbGV0ZVByb2plY3QoKTtcbiAgICBjb25zdCBhZGRQcm9qZWN0QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtYWRkLXByb2plY3RdJyk7XG4gICAgYWRkUHJvamVjdEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFkZFByb2plY3QpO1xuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdlZGl0LXByb2plY3QnKSkge1xuICAgICAgICAgICAgZWRpdFByb2plY3QoZSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn0pKCk7XG5cbmNvbnN0IHRhc2tDb250cm9sbGVyID0gKCgpID0+IHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3Rhc2staXRlbScpKSB7XG4gICAgICAgICAgICBjb25zdCB0YXNrRWxlbWVudCA9IGUudGFyZ2V0LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICB0b2dnbGVUYXNrKHRhc2tFbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdhZGQtdGFzaycpKSB7XG4gICAgICAgICAgICBhZGRUYXNrVG9ET00oZS50YXJnZXQpO1xuICAgICAgICAgICAgYWRkVGFzaygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3ByaW9yaXR5LWljb24nKSkge1xuICAgICAgICAgICAgdXBkYXRlUHJpb3JpdHkoZS50YXJnZXQpO1xuICAgICAgICB9XG4gICAgfSk7XG59KSgpO1xuLypcbnVwZGF0ZVN0b3JhZ2Uuc2F2ZVByb2plY3Qoe1xuICAgIHByb2plY3ROYW1lOiBcIlByb2plY3QgMVwiLFxuICAgIHRhc2tzOiBbW1wiRmluaXNoIHRvZG8gbGlzdFwiLCBcImxvd1wiLCBcImR1ZURhdGVcIiwgZmFsc2VdLCBbXCJEbyBzb21ldGhpbmdcIiwgXCJtZWRpdW1cIiwgXCJkdWVEYXRlXCIsIHRydWVdLCBbXCJEbyBzb21ldGhpbmcgZWxzZVwiLCBcImhpZ2hcIiwgXCJkdWVEYXRlXCIsIGZhbHNlXV0sXG4gICAgaWQ6IDgxNjA4OVxufSk7XG4qL1xuLy9zdG9yYWdlLmRlbGV0ZVByb2plY3QoNTgxODQwKTsiXSwibmFtZXMiOlsiZ2V0UHJvamVjdHMiLCJKU09OIiwicGFyc2UiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwic2F2ZVByb2plY3QiLCJwcm9qZWN0VG9TYXZlIiwicHJvamVjdHMiLCJleGlzdGluZyIsImZpbmQiLCJwcm9qZWN0IiwiaWQiLCJwcm9qZWN0TmFtZSIsInRhc2tzIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwicHVzaCIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJkZWxldGVQcm9qZWN0IiwidXBkYXRlZFByb2plY3RMaXN0IiwiZmlsdGVyIiwiZGVsZXRlVGFzayIsInRhc2tUb0RlbGV0ZSIsInByb2plY3RXaXRoVGFzayIsInVwZGF0ZWRUYXNrT2JqIiwidGFza09iaiIsInRhc2siLCJpdGVtIiwiX3JlZnJlc2hQcm9qZWN0TGlzdCIsIl9zZXRQcm9qZWN0TGlzdCIsInVwZGF0ZVByb2plY3RMaXN0IiwiX3NldEFjdGl2ZVRhYiIsInRhYiIsInVwZGF0ZUFjdGl2ZVRhYiIsIm9uUHJvamVjdFNlbGVjdCIsInByb2plY3RJZCIsInByb2plY3RPYmplY3QiLCJzZWxlY3RlZFByb2plY3QiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJvblByb2plY3RBZGQiLCJuZXdQcm9qZWN0IiwibmV3UHJvamVjdERPTUVsZW1lbnQiLCJvblByb2plY3RFZGl0Iiwib25UYXNrQWRkIiwibmV3VGFzayIsInRhc2tJZCIsInByaW9yaXR5IiwiZHVlRGF0ZSIsImlzQ29tcGxldGUiLCJwcm9qZWN0VG9VcGRhdGUiLCJjcmVhdGVFbGVtZW50cyIsImNyZWF0ZUxpc3RFbGVtZW50IiwiaHRtbENsYXNzIiwibGkiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwiY3JlYXRlU3BhbkVsZW1lbnQiLCJzcGFuIiwiY2xhc3NMaXN0IiwiYWRkIiwiY3JlYXRlSW1hZ2VFbGVtZW50Iiwic3JjIiwiaW1nIiwiY3JlYXRlSW5wdXRGaWVsZCIsInBsYWNlaG9sZGVyVGV4dCIsInVzZXJJbnB1dCIsInJlcXVpcmVkIiwiY3JlYXRlRm9ybSIsImNyZWF0ZURpdiIsImRpdiIsImNyZWF0ZUljb25TcGFuIiwidmlldyIsImljb25TcGFuIiwiZWRpdEljb24iLCJkZWxldGVJY29uIiwiYXBwZW5kIiwiYWRkUHJvamVjdFRvTm90ZXBhZCIsInByb2plY3RMaXN0IiwiY3VycmVudFByb2plY3ROdW1iZXIiLCJjaGlsZEVsZW1lbnRDb3VudCIsImNoaWxkcmVuIiwidGV4dENvbnRlbnQiLCJub3RlcGFkIiwicHJvamVjdERpdiIsInNraXBMaW5lIiwicHJvamVjdEhlYWRpbmciLCJoMiIsImgzIiwidGFza3NDb250YWluZXIiLCJhZGRUYXNrTGlzdEVsZW1lbnQiLCJhZGRUYXNrU3BhbiIsImFkZEljb24iLCJfY3JlYXRlUHJvamVjdEl0ZW1IVE1MIiwibmFtZSIsInByb2plY3RJdGVtIiwicHJvamVjdHNMaXN0Q29udGFpbmVyIiwiYWRkUHJvamVjdEJ0biIsInNsaWNlIiwiY2FsbCIsImZvckVhY2giLCJjb250YWlucyIsInJlbW92ZSIsImh0bWwiLCJpbnNlcnRCZWZvcmUiLCJxdWVyeVNlbGVjdG9yQWxsIiwiYWRkRXZlbnRMaXN0ZW5lciIsImRhdGFzZXQiLCJjdXJyZW50QWN0aXZlVGFiIiwiYXdhaXRpbmdJbnB1dCIsImhhbmRsZVVzZXJJbnB1dCIsInBhcmVudEVsZW1lbnQiLCJwcm9qZWN0U3BhbiIsInZhbHVlIiwidHJpbSIsImNoaWxkTm9kZXMiLCJhZGRQcm9qZWN0IiwicHJvamVjdHNDb250YWluZXIiLCJwcm9qZWN0TGlzdEVsZW1lbnQiLCJwcm9qZWN0SW5wdXRGb3JtIiwicHJvamVjdE5hbWVJbnB1dCIsImxhc3RFbGVtZW50Q2hpbGQiLCJzZXRUaW1lb3V0IiwiZm9jdXMiLCJhZGRQcm9qZWN0VG9TaWRlYmFyIiwiaW5wdXRGb3JtIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJnZXRBdHRyaWJ1dGUiLCJlIiwicHJldmVudERlZmF1bHQiLCJhZGRUYXNrIiwiaW5wdXRGaWVsZCIsInRhc2tDb250YWluZXIiLCJ0YXJnZXQiLCJjbG9zZXN0IiwidmFsaWRhdGVVc2VySW5wdXQiLCJjcmVhdGVUYXNrIiwidGFza0l0ZW0iLCJ0YXNrVGV4dFNwYW4iLCJwcmVwZW5kIiwid2luZG93Iiwib25sb2FkIiwibW9iaWxlVG9nZ2xlQnRuIiwiZ2V0RWxlbWVudEJ5SWQiLCJpbm5lcldpZHRoIiwidG9nZ2xlIiwic2lkZWJhciIsInRvZ2dsZVNpZGViYXIiLCJidXR0b24iLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwiZWRpdFByb2plY3QiLCJhZGRUYXNrQnRuIiwidGFza0xpc3RFbGVtZW50IiwidGFza1NwYW4iLCJkdWVEYXRlU3BhbiIsInByaW9yaXR5SWNvbiIsImRhdGVMYWJlbCIsImRhdGVJbnB1dCIsImNhbGVuZGFySWNvbiIsImFkZER1ZURhdGVUb0RPTSIsImNvbnRhaW5lciIsIm51bWJlck9mVGFza3MiLCJhZGRUYXNrVG9ET00iLCJldmVudFRhcmdldCIsInByaW9yaXR5Q2xhc3NMaXN0IiwidXBkYXRlUHJpb3JpdHkiXSwic291cmNlUm9vdCI6IiJ9