(()=>{"use strict";const t=(()=>{const e=()=>JSON.parse(localStorage.getItem("projects")||"[]"),t=t=>{const n=e(),a=n.find((e=>e.id==t.id));a?(a.projectName=t.projectName,a.tasks=t.tasks):(t.id=Math.floor(1e6*Math.random()),n.push(t)),localStorage.setItem("projects",JSON.stringify(n))};return{getProjects:e,getTasks:t=>e().find((e=>e.id==t)).tasks,saveProject:t,deleteProject:t=>{const n=e().filter((e=>e.id!=t));localStorage.setItem("projects",JSON.stringify(n))},deleteTask:(n,a)=>{const s=e().find((e=>e.id==n)),o=s.tasks.filter((e=>e.taskId!=a));s.tasks=o,t(s)},findTaskToUpdate:(t,n)=>e().find((e=>e.id==t)).tasks.find((e=>e.taskId==n)),updateTask:(t,n)=>{const a=e(),s=a.find((e=>e.id==t)),o=s.tasks,r=o.findIndex((e=>e.taskId==n.taskId));o[r]=n,s.tasks=o,localStorage.setItem("projects",JSON.stringify(a))}}})(),n=(()=>{const e=()=>{const e=t.getProjects();n(e)},n=e=>{c(e)},a=e=>{d(e)};return{onProjectSelect:e=>{const n=t.getProjects().find((t=>t.id==e)),s=document.querySelector(`[data-project-id='${n.id}']`);a(s)},onProjectAdd:n=>{const s={projectName:n,tasks:[]};t.saveProject(s),e();const o=document.querySelector(`[data-project-id='${s.id}']`);a(o)},onProjectNameEdit:(n,a,s=t.getTasks(n))=>{t.saveProject({id:n,projectName:a,tasks:s}),e()},onTaskAdd:(e,n)=>{const a={item:e,taskId:Math.floor(1e6*Math.random()),priority:"low",dueDate:null,isComplete:!1},s=t.getProjects().find((e=>e.id==n));return s.tasks.push(a),t.saveProject(s),a},onTaskNameEdit:(e,n,a)=>{const s=t.findTaskToUpdate(e,n);t.updateTask(e,{item:a,taskId:s.taskId,priority:s.priority,dueDate:s.dueDate,isComplete:s.isComplete})},onTaskPriorityEdit:(e,n,a)=>{const s=t.findTaskToUpdate(e,n);t.updateTask(e,{item:s.item,taskId:s.taskId,priority:a,dueDate:s.dueDate,isComplete:s.isComplete})},onTaskDueDateEdit:(e,n,a)=>{const s=t.findTaskToUpdate(e,n);t.updateTask(e,{item:s.item,taskId:s.taskId,priority:s.priority,dueDate:a,isComplete:s.isComplete})},onTaskCompleteEdit:(e,n,a)=>{const s=t.findTaskToUpdate(e,n);t.updateTask(e,{item:s.item,taskId:s.taskId,priority:s.priority,dueDate:s.dueDate,isComplete:a})}}})(),a=()=>({createListElement:e=>{const t=document.createElement("li");return t.setAttribute("class",e),t},createSpanElement:e=>{const t=document.createElement("span");return t.classList.add(e),t},createImageElement:(e,t)=>{const n=document.createElement("img");return n.classList.add(t),n.setAttribute("src",e),n.setAttribute("draggable","false"),n},createInputField:e=>{const t=document.createElement("input");return t.setAttribute("type","text"),t.setAttribute("placeholder",e),t.setAttribute("id","user-input"),t.required=!0,t},createForm:()=>document.createElement("form"),createDiv:e=>{const t=document.createElement("div");return t.setAttribute("class",e),t}}),s=()=>{const e=a(),t=e.createSpanElement("icons"),n=e.createImageElement("images/edit-icon.svg","edit-icon"),s=e.createImageElement("images/delete-icon.svg","delete-icon");return n.classList.add("edit-project"),s.classList.add("delete-project"),t.append(n,s),t},o=e=>{const t=a(),n=document.querySelector(".project-list"),s=n.childElementCount-2,o=n.children[s].textContent,r=document.querySelector("#writing-area"),c=t.createDiv("project");c.setAttribute("data-project-id",e);const d=t.createDiv("skip-line"),i=t.createDiv("project-heading"),l=document.createElement("h2");l.setAttribute("class","notepad-text"),l.textContent=o;const m=document.createElement("h3");m.setAttribute("class","notepad-text"),m.textContent="Due Date";const p=document.createElement("ul");p.classList.add("notepad-text","todos");const u=t.createListElement("task"),E=t.createSpanElement("add-task"),k=t.createImageElement("images/add-icon.svg","add-icon");E.append(k,"Add Task"),u.append(E),p.append(u,d),i.append(l,m),c.append(i,p),r.append(c)},r=(e,t)=>{const n=a(),o=n.createListElement("project-item");o.setAttribute("data-project-id",e);const r=n.createSpanElement("project-name");r.textContent=t;const c=s();return o.append(r,c),o},c=e=>{const t=document.querySelector(".project-list"),a=document.querySelector("[data-add-project]");[].slice.call(t.children).forEach((e=>{e.classList.contains("project-item")&&e.remove()}));for(const n of e){const e=r(n.id,n.projectName);t.insertBefore(e,a)}t.querySelectorAll(".project-item").forEach((e=>{e.addEventListener("click",(()=>{n.onProjectSelect(e.dataset.projectId)}))}))},d=e=>{const t=document.querySelector(".active");t&&t.classList.remove("active"),e.classList.add("active"),e.children.item(0)},i=()=>null!=document.querySelector("#user-input"),l=()=>{const e=document.querySelector("#user-input"),t=e.parentElement.parentElement,n=a().createSpanElement("project-name"),s=e.value.trim();s&&(n.textContent=s,e.parentElement.remove(),t.insertBefore(n,t.childNodes[0]))},m=()=>{if(i())return;(()=>{const e=a(),t=document.querySelector(".project-list"),n=e.createListElement("project-item"),o=e.createForm(),r=e.createInputField("Project name...");o.append(r);const c=s();n.append(o,c),t.insertBefore(n,t.lastElementChild),setTimeout((()=>{r.focus()}),0)})();const e=document.querySelector("#user-input"),t=e.parentElement,r=t.parentElement;e.addEventListener("blur",(function(){if(""==e.value.trim())return void r.remove();l();const t=r.firstElementChild.textContent;n.onProjectAdd(t);const a=document.querySelector(".project-list"),s=a.children[a.childElementCount-2].getAttribute("data-project-id");i()||o(s)})),t.addEventListener("submit",(function(e){e.preventDefault(),l();const t=r.firstElementChild.textContent;n.onProjectAdd(t);const a=document.querySelector(".project-list"),s=a.children[a.childElementCount-2].getAttribute("data-project-id");i()||o(s)}))},p=()=>{const t=document.querySelector("#user-input"),n=t.parentElement,a=n.parentElement.parentElement;t.addEventListener("blur",(function(){const e=a.closest("[data-project-id]").dataset.projectId,n=t.value;E(),n&&u(n,e,a)})),n.addEventListener("submit",(function(){e.preventDefault();const n=a.closest("[data-project-id]").dataset.projectId,s=t.value;E(),s&&u(s,n,a)}))},u=(e,t,a)=>{if(a.dataset.taskId)return n.onTaskNameEdit(t,a.dataset.taskId,e);const s=n.onTaskAdd(e,t);a.setAttribute("data-task-id",s.taskId)},E=()=>{const e=document.querySelector("#user-input"),t=e.parentElement,n=t.parentElement,s=n.parentElement,o=e.value.trim(),r=a().createSpanElement("task-text");r.append(o),""!=o||s.dataset.taskId?""==o&&s.dataset.taskId||(t.remove(),n.prepend(r)):s.remove()};window.onload=()=>{const e=t.getProjects();c(e)},(()=>{const e=document.getElementById("bars-icon-mobile");window.innerWidth<=1024&&e.classList.contains("hidden")&&e.classList.toggle("hidden");const t=document.getElementById("sidebar"),n=()=>{t.classList.toggle("toggle-sidebar"),window.innerWidth<=1024&&e.classList.toggle("hidden")};document.querySelectorAll(".bars-icon").forEach((e=>{e.addEventListener("click",n)}))})(),document.addEventListener("click",(e=>{if(e.target.closest(".delete-project")){const n=e.target.closest(".project-item");n.remove();const a=n.dataset.projectId;t.deleteProject(a)}})),document.querySelector("[data-add-project]").addEventListener("click",m),document.addEventListener("click",(e=>{e.target.classList.contains("edit-project")&&(e=>{if(i())return;const t=a().createForm(),s=a().createInputField("Project name..."),o=e.target.parentElement.previousElementSibling;s.value=o.textContent,o.remove(),t.append(s);const r=e.target.closest(".project-item");r.insertBefore(t,r.childNodes[0]);const c=document.querySelector("#user-input");c.focus();const d=r.dataset.projectId;c.addEventListener("blur",(function(){""!=c.value&&l();const e=r.firstElementChild.textContent;m(d,e),n.onProjectNameEdit(d,e)})),t.addEventListener("submit",(function(e){e.preventDefault(),l();const t=r.firstElementChild.textContent;m(d,t),n.onProjectNameEdit(d,t)}));const m=(e,t)=>{const n=document.querySelector(".notepad").querySelector(`[data-project-id="${e}"]`);n&&(n.childNodes[0].childNodes[0].textContent=t)}})(e)})),document.addEventListener("click",(e=>{e.target.classList.contains("task-text")&&(e=>{e.classList.toggle("completed");let t=!1;e.classList.contains("completed")&&(t=!0);const a=e.closest(".project").dataset.projectId,s=e.dataset.taskId;n.onTaskCompleteEdit(a,s,t)})(e.target.closest(".task")),e.target.classList.contains("add-task")&&((e=>{if(document.getElementById("user-input"))return;const s=a().createListElement("task"),o=a().createSpanElement("task-item"),r=a().createForm(),c=a().createInputField("Enter Task...");r.append(c),o.append(r);const d=a().createSpanElement("icons"),i=a().createImageElement("images/edit-icon.svg","edit-icon"),l=a().createImageElement("images/delete-icon.svg","delete-icon");i.addEventListener("click",(()=>{if(s.classList.contains("completed"))return;const e=document.querySelector(".task-text"),t=e.textContent;e.remove();const n=a().createForm(),r=a().createInputField("Enter Task...");r.value=t,n.append(r),o.insertBefore(n,d),s.prepend(o),r.focus(),p()})),l.addEventListener("click",(e=>{const n=e.target.closest("[data-project-id]").dataset.projectId,a=e.target.closest("[data-task-id]").dataset.taskId;s.remove(),t.deleteTask(n,a)})),d.append(i,l),o.append(d);const m=(()=>{const e=a().createSpanElement("due-date"),t=a().createImageElement("images/priority-icon.svg","priority-icon");t.classList.add("priority-low");const s=document.createElement("label");s.classList.add("date-label");const o=document.createElement("input");o.setAttribute("type","date"),o.required=!0;const r=a().createImageElement("images/calendar-icon.svg","calendar-icon");return s.append(o,r),e.append(t,s),o.addEventListener("change",(()=>{const e=o.closest([".project"]).dataset.projectId,t=o.closest("[data-task-id").dataset.taskId,a=o.value;return n.onTaskDueDateEdit(e,t,a)})),e})();s.append(o,m);const u=e.closest(".todos"),E=u.childElementCount-2;u.insertBefore(s,u.children[E]),setTimeout((()=>{c.focus()}),0)})(e.target),p()),e.target.classList.contains("priority-icon")&&(e=>{if(e.parentElement.parentElement.classList.contains("completed"))return;const t=e.closest(".project").dataset.projectId,a=e.closest("[data-task-id]").dataset.taskId,s=e.classList;s.contains("priority-low")?(s.remove("priority-low"),s.add("priority-medium"),n.onTaskPriorityEdit(t,a,"medium")):s.contains("priority-medium")?(s.remove("priority-medium"),s.add("priority-high"),n.onTaskPriorityEdit(t,a,"high")):s.contains("priority-high")&&(s.remove("priority-high"),s.add("priority-low"),n.onTaskPriorityEdit(t,a,"low"))})(e.target)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,