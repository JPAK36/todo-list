(()=>{"use strict";const e=(()=>{const e=()=>JSON.parse(localStorage.getItem("projects")||"[]"),t=t=>{const a=e(),n=a.find((e=>e.id==t.id));n?(n.projectName=t.projectName,n.tasks=t.tasks):(t.id=Math.floor(1e6*Math.random()),a.push(t)),localStorage.setItem("projects",JSON.stringify(a))};return{getProjects:e,getTasks:t=>e().find((e=>e.id==t)).tasks,saveProject:t,deleteProject:t=>{const a=e().filter((e=>e.id!=t));localStorage.setItem("projects",JSON.stringify(a))},deleteTask:(a,n)=>{const s=e().find((e=>e.id==a)),o=s.tasks.filter((e=>e.taskId!=n));s.tasks=o,t(s)},findTaskToUpdate:(t,a)=>e().find((e=>e.id==t)).tasks.find((e=>e.taskId==a)),updateTask:(t,a)=>{const n=e(),s=n.find((e=>e.id==t)),o=s.tasks,r=o.findIndex((e=>e.taskId==a.taskId));o[r]=a,s.tasks=o,localStorage.setItem("projects",JSON.stringify(n))}}})(),t=(()=>{const t=()=>{const t=e.getProjects();a(t)},a=e=>{c(e)},n=e=>{i(e)};return{onProjectSelect:t=>{const a=e.getProjects().find((e=>e.id==t)),s=document.querySelector(`[data-project-id='${a.id}']`);n(s)},onProjectAdd:a=>{const s={projectName:a,tasks:[]};e.saveProject(s),t();const o=document.querySelector(`[data-project-id='${s.id}']`);n(o)},onProjectNameEdit:(a,n,s=e.getTasks(a))=>{e.saveProject({id:a,projectName:n,tasks:s}),t()},onTaskAdd:(t,a)=>{const n={item:t,taskId:Math.floor(1e6*Math.random()),priority:"low",dueDate:null,isComplete:!1},s=e.getProjects().find((e=>e.id==a));return s.tasks.push(n),e.saveProject(s),n},onTaskNameEdit:(t,a,n)=>{const s=e.findTaskToUpdate(t,a);e.updateTask(t,{item:n,taskId:s.taskId,priority:s.priority,dueDate:s.dueDate,isComplete:s.isComplete})},onTaskPriorityEdit:(t,a,n)=>{const s=e.findTaskToUpdate(t,a);e.updateTask(t,{item:s.item,taskId:s.taskId,priority:n,dueDate:s.dueDate,isComplete:s.isComplete})},onTaskDueDateEdit:(t,a,n)=>{const s=e.findTaskToUpdate(t,a);e.updateTask(t,{item:s.item,taskId:s.taskId,priority:s.priority,dueDate:n,isComplete:s.isComplete})},onTaskCompleteEdit:(t,a,n)=>{const s=e.findTaskToUpdate(t,a);e.updateTask(t,{item:s.item,taskId:s.taskId,priority:s.priority,dueDate:s.dueDate,isComplete:n})}}})(),a=()=>({createListElement:e=>{const t=document.createElement("li");return t.setAttribute("class",e),t},createSpanElement:e=>{const t=document.createElement("span");return t.classList.add(e),t},createImageElement:(e,t)=>{const a=document.createElement("img");return a.classList.add(t),a.setAttribute("src",e),a.setAttribute("draggable","false"),a},createInputField:e=>{const t=document.createElement("input");return t.setAttribute("type","text"),t.setAttribute("placeholder",e),t.setAttribute("id","user-input"),t.required=!0,t},createForm:()=>document.createElement("form"),createDiv:e=>{const t=document.createElement("div");return t.setAttribute("class",e),t}}),n=()=>{const e=a(),t=e.createSpanElement("icons"),n=e.createImageElement("images/edit-icon.svg","edit-icon"),s=e.createImageElement("images/delete-icon.svg","delete-icon");return n.classList.add("edit-project"),s.classList.add("delete-project"),t.append(n,s),t},s=t=>{const n=a(),s=e.getProjects().find((e=>e.id==t)).projectName,o=document.querySelector("#writing-area"),r=n.createDiv("project");r.setAttribute("data-project-id",t);const c=n.createDiv("skip-line"),i=n.createDiv("project-heading"),d=document.createElement("h2");d.setAttribute("class","notepad-text"),d.textContent=s;const l=document.createElement("h3");l.setAttribute("class","notepad-text"),l.textContent="Due Date";const p=document.createElement("ul");p.classList.add("notepad-text","todos");const m=n.createListElement("task"),u=n.createSpanElement("add-task"),E=n.createImageElement("images/add-icon.svg","add-icon");u.append(E,"Add Task"),m.append(u),p.append(m,c),i.append(d,l),r.append(i,p),o.append(r)},o=()=>{const e=a().createSpanElement("due-date"),n=a().createImageElement("images/priority-icon.svg","priority-icon");n.classList.add("priority-low");const s=document.createElement("label");s.classList.add("date-label");const o=document.createElement("input");o.setAttribute("type","date"),o.required=!0;const r=a().createImageElement("images/calendar-icon.svg","calendar-icon");return s.append(o,r),e.append(n,s),o.addEventListener("change",(()=>{const e=o.closest(".project").dataset.projectId,a=o.closest("[data-task-id]").dataset.taskId,n=o.value;return t.onTaskDueDateEdit(e,a,n)})),e},r=(e,t)=>{const s=a(),o=s.createListElement("project-item");o.setAttribute("data-project-id",e);const r=s.createSpanElement("project-name");r.textContent=t;const c=n();return o.append(r,c),o},c=e=>{const a=document.querySelector(".project-list"),n=document.querySelector("[data-add-project]");[].slice.call(a.children).forEach((e=>{e.classList.contains("project-item")&&e.remove()}));for(const t of e){const e=r(t.id,t.projectName);a.insertBefore(e,n)}a.querySelectorAll(".project-item").forEach((e=>{e.addEventListener("click",(()=>{t.onProjectSelect(e.dataset.projectId)}))}))},i=e=>{const t=document.querySelector(".active");t&&t.classList.remove("active"),e.classList.add("active"),e.children.item(0)},d=()=>null!=document.querySelector("#user-input"),l=()=>{const e=document.querySelector("#user-input"),t=e.parentElement.parentElement,n=a().createSpanElement("project-name"),s=e.value.trim();s&&(n.textContent=s,e.parentElement.remove(),t.insertBefore(n,t.childNodes[0]))},p=()=>{if(d())return;(()=>{const e=a(),t=document.querySelector(".project-list"),s=e.createListElement("project-item"),o=e.createForm(),r=e.createInputField("Project name...");o.append(r);const c=n();s.append(o,c),t.insertBefore(s,t.lastElementChild),setTimeout((()=>{r.focus()}),0)})();const e=document.querySelector("#user-input"),o=e.parentElement,r=o.parentElement;e.addEventListener("blur",(function(){if(""==e.value.trim())return void r.remove();l();const a=r.firstElementChild.textContent;t.onProjectAdd(a);const n=document.querySelector(".project-list"),o=n.children[n.childElementCount-2].getAttribute("data-project-id");d()||s(o)})),o.addEventListener("submit",(function(e){e.preventDefault(),l();const a=r.firstElementChild.textContent;t.onProjectAdd(a);const n=document.querySelector(".project-list"),o=n.children[n.childElementCount-2].getAttribute("data-project-id");d()||s(o)}))},m=()=>{const e=document.querySelector("#user-input"),t=e.parentElement,a=t.parentElement.parentElement;e.addEventListener("blur",(function(){const t=a.closest("[data-project-id]").dataset.projectId,n=e.value;E(),n&&u(n,t,a)})),t.addEventListener("submit",(function(t){t.preventDefault();const n=a.closest("[data-project-id]").dataset.projectId,s=e.value;E(),s&&u(s,n,a)}))},u=(e,a,n)=>{if(n.dataset.taskId)return t.onTaskNameEdit(a,n.dataset.taskId,e);const s=t.onTaskAdd(e,a);n.setAttribute("data-task-id",s.taskId)},E=()=>{const e=document.querySelector("#user-input"),t=e.parentElement,n=t.parentElement,s=n.parentElement,o=e.value.trim(),r=a().createSpanElement("task-text");r.append(o),""!=o||s.dataset.taskId?""==o&&s.dataset.taskId||(t.remove(),n.prepend(r)):s.remove()};window.onload=()=>{const t=e.getProjects();c(t),(()=>{const e=document.querySelector(".notepad");t.forEach((t=>{s(t.id);const r=t.tasks,c=e.querySelector(`[data-project-id="${t.id}"]`),i=c.querySelector("ul"),d=c.querySelector(".add-task");r.forEach((e=>{const t=(e=>{const t=a(),s=t.createListElement("task");s.setAttribute("data-task-id",e.taskId);const r=t.createSpanElement("task-item"),c=t.createSpanElement("task-text");c.textContent=e.item;const i=n();r.append(c,i);const d=o();return d.querySelector(".priority-icon").classList.add(`priority-${e.priority}`),d.querySelector("input").value=e.dueDate,e.isComplete&&s.classList.add("completed"),s.append(r,d),s})(e);i.insertBefore(t,d.parentElement)}))}))})()},(()=>{const e=document.getElementById("bars-icon-mobile");window.innerWidth<=1024&&e.classList.contains("hidden")&&e.classList.toggle("hidden");const t=document.getElementById("sidebar"),a=()=>{t.classList.toggle("toggle-sidebar"),window.innerWidth<=1024&&e.classList.toggle("hidden")};document.querySelectorAll(".bars-icon").forEach((e=>{e.addEventListener("click",a)}))})(),document.querySelector(".project-list").addEventListener("click",(t=>{if(t.target.closest(".delete-project")){const a=t.target.closest("[data-project-id]").dataset.projectId;document.querySelectorAll(`[data-project-id="${a}"]`).forEach((e=>e.remove())),e.deleteProject(a)}})),document.querySelector("[data-add-project]").addEventListener("click",p),document.querySelector(".project-list").addEventListener("click",(e=>{e.target.classList.contains("edit-project")&&(e=>{if(d())return;const n=a().createForm(),s=a().createInputField("Project name..."),o=e.target.parentElement.previousElementSibling;s.value=o.textContent,o.remove(),n.append(s);const r=e.target.closest(".project-item");r.insertBefore(n,r.childNodes[0]);const c=document.querySelector("#user-input");c.focus();const i=r.dataset.projectId;c.addEventListener("blur",(function(){""!=c.value&&l();const e=r.firstElementChild.textContent;p(i,e),t.onProjectNameEdit(i,e)})),n.addEventListener("submit",(function(e){e.preventDefault(),l();const a=r.firstElementChild.textContent;p(i,a),t.onProjectNameEdit(i,a)}));const p=(e,t)=>{const a=document.querySelector(".notepad").querySelector(`[data-project-id="${e}"]`);a&&(a.childNodes[0].childNodes[0].textContent=t)}})(e)})),document.querySelector(".notepad").addEventListener("click",(n=>{var s,r;n.target.classList.contains("task-text")?(e=>{e.classList.toggle("completed");let a=!1;e.classList.contains("completed")&&(a=!0);const n=e.closest(".project").dataset.projectId,s=e.dataset.taskId;t.onTaskCompleteEdit(n,s,a)})(n.target.closest(".task")):n.target.classList.contains("add-task")?((e=>{if(document.getElementById("user-input"))return;const t=a().createListElement("task"),n=a().createSpanElement("task-item"),s=a().createForm(),r=a().createInputField("Enter Task...");s.append(r),n.append(s);const c=a().createSpanElement("icons"),i=a().createImageElement("images/edit-icon.svg","edit-icon"),d=a().createImageElement("images/delete-icon.svg","delete-icon");c.append(i,d),n.append(c);const l=o();t.append(n,l);const p=e.closest(".todos"),m=p.childElementCount-2;p.insertBefore(t,p.children[m]),setTimeout((()=>{r.focus()}),0)})(n.target),m()):n.target.classList.contains("priority-icon")?(e=>{if(e.parentElement.parentElement.classList.contains("completed"))return;const a=e.closest(".project").dataset.projectId,n=e.closest("[data-task-id]").dataset.taskId,s=e.classList;s.contains("priority-low")?(s.remove("priority-low"),s.add("priority-medium"),t.onTaskPriorityEdit(a,n,"medium")):s.contains("priority-medium")?(s.remove("priority-medium"),s.add("priority-high"),t.onTaskPriorityEdit(a,n,"high")):s.contains("priority-high")&&(s.remove("priority-high"),s.add("priority-low"),t.onTaskPriorityEdit(a,n,"low"))})(n.target):n.target.classList.contains("edit-icon")?(e=>{if(e.classList.contains("completed"))return;const t=e.querySelector(".task-text"),n=t.textContent;t.remove();const s=a().createForm(),o=a().createInputField("Enter Task...");o.value=n,s.append(o);const r=e.querySelector(".task-item"),c=e.querySelector(".icons");r.insertBefore(s,c),e.prepend(r),o.focus(),m()})(n.target.closest(".task")):n.target.classList.contains("delete-icon")&&(s=n.target.closest("[data-project-id]").dataset.projectId,r=n.target.closest("[data-task-id]").dataset.taskId,document.querySelector(`[data-task-id="${r}"]`).remove(),e.deleteTask(s,r))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,