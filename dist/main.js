(()=>{"use strict";const t=(()=>{const e=()=>JSON.parse(localStorage.getItem("projects")||"[]"),t=t=>{const a=e(),n=a.find((e=>e.id==t.id));n?(n.projectName=t.projectName,n.tasks=t.tasks):(t.id=Math.floor(1e6*Math.random()),a.push(t)),localStorage.setItem("projects",JSON.stringify(a))};return{getProjects:e,getTasks:t=>e().find((e=>e.id==t)).tasks,saveProject:t,deleteProject:t=>{const a=e().filter((e=>e.id!=t));localStorage.setItem("projects",JSON.stringify(a))},deleteTask:(a,n)=>{const s=e().find((e=>e.id==a)),o=s.tasks.filter((e=>e.taskId!=n));s.tasks=o,t(s)},findTaskToUpdate:(t,a)=>e().find((e=>e.id==t)).tasks.find((e=>e.taskId==a)),updateTask:(t,a)=>{const n=e(),s=n.find((e=>e.id==t)),o=s.tasks,r=o.findIndex((e=>e.taskId==a.taskId));o[r]=a,s.tasks=o,localStorage.setItem("projects",JSON.stringify(n))}}})(),a=(()=>{const e=()=>{const e=t.getProjects();a(e)},a=e=>{c(e)},n=e=>{d(e)};return{onProjectSelect:e=>{const a=t.getProjects().find((t=>t.id==e)),s=document.querySelector(`[data-project-id='${a.id}']`);n(s)},onProjectAdd:a=>{const s={projectName:a,tasks:[]};t.saveProject(s),e();const o=document.querySelector(`[data-project-id='${s.id}']`);n(o)},onProjectNameEdit:(a,n,s=t.getTasks(a))=>{t.saveProject({id:a,projectName:n,tasks:s}),e()},onTaskAdd:(e,a)=>{const n={item:e,taskId:Math.floor(1e6*Math.random()),priority:"low",dueDate:null,isComplete:!1},s=t.getProjects().find((e=>e.id==a));return s.tasks.push(n),t.saveProject(s),n},onTaskNameEdit:(e,a,n)=>{const s=t.findTaskToUpdate(e,a);t.updateTask(e,{item:n,taskId:s.taskId,priority:s.priority,dueDate:s.dueDate,isComplete:s.isComplete})},onTaskPriorityEdit:(e,a,n)=>{const s=t.findTaskToUpdate(e,a);t.updateTask(e,{item:s.item,taskId:s.taskId,priority:n,dueDate:s.dueDate,isComplete:s.isComplete})},onTaskDueDateEdit:(e,a,n)=>{const s=t.findTaskToUpdate(e,a);t.updateTask(e,{item:s.item,taskId:s.taskId,priority:s.priority,dueDate:n,isComplete:s.isComplete})},onTaskCompleteEdit:(e,a,n)=>{const s=t.findTaskToUpdate(e,a);t.updateTask(e,{item:s.item,taskId:s.taskId,priority:s.priority,dueDate:s.dueDate,isComplete:n})}}})(),n=()=>({createListElement:e=>{const t=document.createElement("li");return t.setAttribute("class",e),t},createSpanElement:e=>{const t=document.createElement("span");return t.classList.add(e),t},createImageElement:(e,t)=>{const a=document.createElement("img");return a.classList.add(t),a.setAttribute("src",e),a.setAttribute("draggable","false"),a},createInputField:e=>{const t=document.createElement("input");return t.setAttribute("type","text"),t.setAttribute("placeholder",e),t.setAttribute("id","user-input"),t.required=!0,t},createForm:()=>document.createElement("form"),createDiv:e=>{const t=document.createElement("div");return t.setAttribute("class",e),t}}),s=()=>{const e=n(),t=e.createSpanElement("icons"),a=e.createImageElement("images/edit-icon.svg","edit-icon"),s=e.createImageElement("images/delete-icon.svg","delete-icon");return a.classList.add("edit-project"),s.classList.add("delete-project"),t.append(a,s),t},o=e=>{const a=n(),s=t.getProjects().find((t=>t.id==e)).projectName,o=document.querySelector("#writing-area"),r=a.createDiv("project");r.setAttribute("data-project-id",e);const c=a.createDiv("skip-line"),d=a.createDiv("project-heading"),i=document.createElement("h2");i.setAttribute("class","notepad-text"),i.textContent=s;const l=document.createElement("h3");l.setAttribute("class","notepad-text"),l.textContent="Due Date";const p=document.createElement("ul");p.classList.add("notepad-text","todos");const m=a.createListElement("task"),u=a.createSpanElement("add-task"),E=a.createImageElement("images/add-icon.svg","add-icon");u.append(E,"Add Task"),m.append(u),p.append(m,c),d.append(i,l),r.append(d,p),o.append(r)},r=(e,t)=>{const a=n(),o=a.createListElement("project-item");o.setAttribute("data-project-id",e);const r=a.createSpanElement("project-name");r.textContent=t;const c=s();return o.append(r,c),o},c=e=>{const t=document.querySelector(".project-list"),n=document.querySelector("[data-add-project]");[].slice.call(t.children).forEach((e=>{e.classList.contains("project-item")&&e.remove()}));for(const a of e){const e=r(a.id,a.projectName);t.insertBefore(e,n)}t.querySelectorAll(".project-item").forEach((e=>{e.addEventListener("click",(()=>{a.onProjectSelect(e.dataset.projectId)}))}))},d=e=>{const t=document.querySelector(".active");t&&t.classList.remove("active"),e.classList.add("active"),e.children.item(0)},i=()=>null!=document.querySelector("#user-input"),l=()=>{const e=document.querySelector("#user-input"),t=e.parentElement.parentElement,a=n().createSpanElement("project-name"),s=e.value.trim();s&&(a.textContent=s,e.parentElement.remove(),t.insertBefore(a,t.childNodes[0]))},p=()=>{if(i())return;(()=>{const e=n(),t=document.querySelector(".project-list"),a=e.createListElement("project-item"),o=e.createForm(),r=e.createInputField("Project name...");o.append(r);const c=s();a.append(o,c),t.insertBefore(a,t.lastElementChild),setTimeout((()=>{r.focus()}),0)})();const e=document.querySelector("#user-input"),t=e.parentElement,r=t.parentElement;e.addEventListener("blur",(function(){if(""==e.value.trim())return void r.remove();l();const t=r.firstElementChild.textContent;a.onProjectAdd(t);const n=document.querySelector(".project-list"),s=n.children[n.childElementCount-2].getAttribute("data-project-id");i()||o(s)})),t.addEventListener("submit",(function(e){e.preventDefault(),l();const t=r.firstElementChild.textContent;a.onProjectAdd(t);const n=document.querySelector(".project-list"),s=n.children[n.childElementCount-2].getAttribute("data-project-id");i()||o(s)}))},m=()=>{const t=document.querySelector("#user-input"),a=t.parentElement,n=a.parentElement.parentElement;t.addEventListener("blur",(function(){const e=n.closest("[data-project-id]").dataset.projectId,a=t.value;E(),a&&u(a,e,n)})),a.addEventListener("submit",(function(){e.preventDefault();const a=n.closest("[data-project-id]").dataset.projectId,s=t.value;E(),s&&u(s,a,n)}))},u=(e,t,n)=>{if(n.dataset.taskId)return a.onTaskNameEdit(t,n.dataset.taskId,e);const s=a.onTaskAdd(e,t);n.setAttribute("data-task-id",s.taskId)},E=()=>{const e=document.querySelector("#user-input"),t=e.parentElement,a=t.parentElement,s=a.parentElement,o=e.value.trim(),r=n().createSpanElement("task-text");r.append(o),""!=o||s.dataset.taskId?""==o&&s.dataset.taskId||(t.remove(),a.prepend(r)):s.remove()};window.onload=()=>{const e=t.getProjects();c(e),e.forEach((e=>{o(e.id);const t=e.tasks,r=document.querySelector(".notepad").querySelector(`[data-project-id="${e.id}"]`),c=r.querySelector("ul"),d=r.querySelector(".add-task");t.forEach((e=>{const t=(e=>{const t=n(),o=t.createListElement("task");o.setAttribute("data-task-id",e.taskId);const r=t.createSpanElement("task-item"),c=t.createSpanElement("task-text");c.textContent=e.item;const d=s();r.append(c,d);const i=(()=>{const e=n().createSpanElement("due-date"),t=n().createImageElement("images/priority-icon.svg","priority-icon");t.classList.add("priority-low");const s=document.createElement("label");s.classList.add("date-label");const o=document.createElement("input");o.setAttribute("type","date"),o.required=!0;const r=n().createImageElement("images/calendar-icon.svg","calendar-icon");return s.append(o,r),e.append(t,s),o.addEventListener("change",(()=>{const e=o.closest(".project").dataset.projectId,t=o.closest("[data-task-id]").dataset.taskId,n=o.value;return a.onTaskDueDateEdit(e,t,n)})),e})();return i.querySelector(".priority-icon").classList.add(`priority-${e.priority}`),i.querySelector("input").value=e.dueDate,e.isComplete&&o.classList.add("completed"),o.append(r,i),o})(e);c.insertBefore(t,d.parentElement)}))}))},(()=>{const e=document.getElementById("bars-icon-mobile");window.innerWidth<=1024&&e.classList.contains("hidden")&&e.classList.toggle("hidden");const t=document.getElementById("sidebar"),a=()=>{t.classList.toggle("toggle-sidebar"),window.innerWidth<=1024&&e.classList.toggle("hidden")};document.querySelectorAll(".bars-icon").forEach((e=>{e.addEventListener("click",a)}))})(),document.addEventListener("click",(e=>{if(e.target.closest(".delete-project")){const a=e.target.closest(".project-item");a.remove();const n=a.dataset.projectId;t.deleteProject(n)}})),document.querySelector("[data-add-project]").addEventListener("click",p),document.addEventListener("click",(e=>{e.target.classList.contains("edit-project")&&(e=>{if(i())return;const t=n().createForm(),s=n().createInputField("Project name..."),o=e.target.parentElement.previousElementSibling;s.value=o.textContent,o.remove(),t.append(s);const r=e.target.closest(".project-item");r.insertBefore(t,r.childNodes[0]);const c=document.querySelector("#user-input");c.focus();const d=r.dataset.projectId;c.addEventListener("blur",(function(){""!=c.value&&l();const e=r.firstElementChild.textContent;p(d,e),a.onProjectNameEdit(d,e)})),t.addEventListener("submit",(function(e){e.preventDefault(),l();const t=r.firstElementChild.textContent;p(d,t),a.onProjectNameEdit(d,t)}));const p=(e,t)=>{const a=document.querySelector(".notepad").querySelector(`[data-project-id="${e}"]`);a&&(a.childNodes[0].childNodes[0].textContent=t)}})(e)})),document.addEventListener("click",(e=>{e.target.classList.contains("task-text")&&(e=>{e.classList.toggle("completed");let t=!1;e.classList.contains("completed")&&(t=!0);const n=e.closest(".project").dataset.projectId,s=e.dataset.taskId;a.onTaskCompleteEdit(n,s,t)})(e.target.closest(".task")),e.target.classList.contains("add-task")&&((e=>{if(document.getElementById("user-input"))return;const s=n().createListElement("task"),o=n().createSpanElement("task-item"),r=n().createForm(),c=n().createInputField("Enter Task...");r.append(c),o.append(r);const d=n().createSpanElement("icons"),i=n().createImageElement("images/edit-icon.svg","edit-icon"),l=n().createImageElement("images/delete-icon.svg","delete-icon");i.addEventListener("click",(()=>{if(s.classList.contains("completed"))return;const e=document.querySelector(".task-text"),t=e.textContent;e.remove();const a=n().createForm(),r=n().createInputField("Enter Task...");r.value=t,a.append(r),o.insertBefore(a,d),s.prepend(o),r.focus(),m()})),l.addEventListener("click",(e=>{const a=e.target.closest("[data-project-id]").dataset.projectId,n=e.target.closest("[data-task-id]").dataset.taskId;s.remove(),t.deleteTask(a,n)})),d.append(i,l),o.append(d);const p=(()=>{const e=n().createSpanElement("due-date"),t=n().createImageElement("images/priority-icon.svg","priority-icon");t.classList.add("priority-low");const s=document.createElement("label");s.classList.add("date-label");const o=document.createElement("input");o.setAttribute("type","date"),o.required=!0;const r=n().createImageElement("images/calendar-icon.svg","calendar-icon");return s.append(o,r),e.append(t,s),o.addEventListener("change",(()=>{const e=o.closest([".project"]).dataset.projectId,t=o.closest("[data-task-id").dataset.taskId,n=o.value;return a.onTaskDueDateEdit(e,t,n)})),e})();s.append(o,p);const u=e.closest(".todos"),E=u.childElementCount-2;u.insertBefore(s,u.children[E]),setTimeout((()=>{c.focus()}),0)})(e.target),m()),e.target.classList.contains("priority-icon")&&(e=>{if(e.parentElement.parentElement.classList.contains("completed"))return;const t=e.closest(".project").dataset.projectId,n=e.closest("[data-task-id]").dataset.taskId,s=e.classList;s.contains("priority-low")?(s.remove("priority-low"),s.add("priority-medium"),a.onTaskPriorityEdit(t,n,"medium")):s.contains("priority-medium")?(s.remove("priority-medium"),s.add("priority-high"),a.onTaskPriorityEdit(t,n,"high")):s.contains("priority-high")&&(s.remove("priority-high"),s.add("priority-low"),a.onTaskPriorityEdit(t,n,"low"))})(e.target)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,