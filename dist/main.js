(()=>{"use strict";var e={d:(t,n)=>{for(var c in n)e.o(n,c)&&!e.o(t,c)&&Object.defineProperty(t,c,{enumerable:!0,get:n[c]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{qm:()=>s,M_:()=>a,Sx:()=>r,wc:()=>l,QW:()=>i});const n=(()=>{const e=()=>JSON.parse(localStorage.getItem("projects")||"[]");return{getProjects:e,saveProject:t=>{const n=e(),c=n.find((e=>e.id==t.id));c?(c.projectName=t.projectName,c.tasks=t.tasks,c.dueDate=t.dueDate,c.priority=t.priority):(t.id=Math.floor(1e6*Math.random()),n.push(t)),localStorage.setItem("projects",JSON.stringify(n))},deleteProject:t=>{const n=e().filter((e=>e.id!=t));localStorage.setItem("projects",JSON.stringify(n))}}})(),c={onProjectSelect:e=>{const t=n.getProjects().find((t=>t.id==e));l(t)},onProjectAdd:e=>{const t={projectName:e};var c;n.saveProject(t),c=n.getProjects(),i(c)}},r=()=>({createListElement:e=>{const t=document.createElement("li");return t.setAttribute("class",e),t},createSpanElement:e=>{const t=document.createElement("span");return t.classList.add(e),t},createImageElement:(e,t)=>{const n=document.createElement("img");return n.classList.add(t),n.setAttribute("src",e),n.setAttribute("draggable","false"),n},createInputField:e=>{const t=document.createElement("input");return t.setAttribute("type","text"),t.setAttribute("placeholder",e),t.setAttribute("id","user-input"),t.required=!0,t},createForm:()=>document.createElement("form"),createDiv:e=>{const t=document.createElement("div");return t.setAttribute("class",e),t}}),o=()=>{const e=r(),t=e.createSpanElement("icons"),n=e.createImageElement("images/edit-icon.svg","edit-icon"),c=e.createImageElement("images/delete-icon.svg","delete-icon");return n.classList.add("edit-project"),c.classList.add("delete-project"),t.append(n,c),t},a=()=>{const e=r(),t=document.querySelector(".project-list"),n=e.createListElement("project-item"),c=e.createForm(),a=e.createInputField("Project name...");c.append(a);const s=o();n.append(c,s),t.insertBefore(n,t.lastElementChild)},s=()=>{const e=r(),t=document.querySelector(".project-list"),n=t.childElementCount-2,c=t.children[n].textContent,o=document.querySelector("#writing-area"),a=e.createDiv("project"),s=e.createDiv("skip-line"),d=e.createDiv("project-heading"),i=document.createElement("h2");i.setAttribute("class","notepad-text"),i.textContent=c;const l=document.createElement("h3");l.setAttribute("class","notepad-text"),l.textContent="Due Date";const m=document.createElement("ul");m.classList.add("notepad-text","todos");const u=e.createListElement("task"),p=e.createSpanElement("add-task"),g=e.createImageElement("images/add-icon.svg","add-icon");p.append(g,"Add Task"),u.append(p),m.append(u,s),d.append(i,l),a.append(d,m),o.append(a)},d=(e,t)=>{const n=r(),c=n.createListElement("project-item");c.setAttribute("data-project-id",e);const a=n.createSpanElement("project-name");a.textContent=t;const s=o();return c.append(a,s),c},i=e=>{const t=document.querySelector(".project-list"),n=document.querySelector("[data-add-project]");[].slice.call(t.children).forEach((e=>{e.classList.contains("project-item")&&e.remove()}));for(const c of e){const e=d(c.id,c.projectName);t.insertBefore(e,n)}t.querySelectorAll(".project-item").forEach((e=>{e.addEventListener("click",(()=>{c.onProjectSelect(e.dataset.projectId)}))}))},l=e=>{document.querySelector(".active").classList.remove("active");const t=document.querySelector(`[data-project-id='${e.id}']`);t.classList.add("active");const n=t.children.item(0);console.log(n)},m=()=>null!=document.querySelector("#user-input"),u=()=>{const e=document.querySelector("#user-input"),t=e.parentElement.parentElement,n=r().createSpanElement("project-name"),c=e.value.trim();c&&(n.textContent=c,e.parentElement.remove(),t.insertBefore(n,t.childNodes[0]))},p=()=>{if(m())return;a();const e=document.querySelector("#user-input"),t=e.parentElement,n=t.parentElement;e.addEventListener("blur",(function(){""!=e.value&&u(),m()||s();const t=n.firstElementChild.textContent;c.onProjectAdd(t)})),t.addEventListener("submit",(function(e){e.preventDefault(),u(),m()||s();const t=n.firstElementChild.textContent;c.onProjectAdd(t)}))};window.onload=()=>{const e=n.getProjects();i(e)},(()=>{const e=document.getElementById("bars-icon-mobile");screen.width<=1024&&e.classList.contains("hidden")&&e.classList.toggle("hidden");const t=document.getElementById("sidebar"),n=()=>{t.classList.toggle("toggle-sidebar"),screen.width<=1024&&e.classList.toggle("hidden")};document.querySelectorAll(".bars-icon").forEach((e=>{e.addEventListener("click",n)}))})(),document.addEventListener("click",(e=>{e.target.closest(".delete-project")&&e.target.closest(".project-item").remove()})),document.querySelector("[data-add-project]").addEventListener("click",p),document.addEventListener("click",(e=>{e.target.classList.contains("edit-project")&&(e=>{if(m())return;const t=r().createForm(),n=r().createInputField("Project name..."),c=e.target.parentElement.previousElementSibling;n.value=c.textContent,c.remove(),t.append(n);const o=e.target.closest(".project-item");o.insertBefore(t,o.childNodes[0]);const a=document.querySelector("#user-input");a.addEventListener("blur",(function(){""!=a.value&&u()})),t.addEventListener("submit",(function(e){e.preventDefault(),u()}))})(e)})),document.addEventListener("click",(e=>{e.target.classList.contains("task-item")&&e.target.parentElement.classList.toggle("completed")})),document.addEventListener("click",(e=>{e.target.classList.contains("add-task")&&(console.log("add task"),(()=>{const e=t.default.createSpanElement("task-item");e.textContent="user input";const n=t.default.createSpanElement("icons"),c=t.default.createImageElement("images/edit-icon.svg","edit-icon"),r=t.default.createImageElement("images/delete-icon.svg","delete-icon");n.append(c,r),e.append(n)})())}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,