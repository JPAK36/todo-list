(()=>{"use strict";const e=(()=>{const e=()=>JSON.parse(localStorage.getItem("projects")||"[]"),t=t=>{const n=e(),a=n.find((e=>e.id==t.id));a?(a.projectName=t.projectName,a.tasks=t.tasks):(t.id=Math.floor(1e6*Math.random()),n.push(t)),localStorage.setItem("projects",JSON.stringify(n))};return{getProjects:e,getTasks:t=>e().find((e=>e.id==t)).tasks,saveProject:t,deleteProject:t=>{const n=e().filter((e=>e.id!=t));localStorage.setItem("projects",JSON.stringify(n))},deleteTask:(n,a)=>{const r=e().find((e=>e.id==n)),s=r.tasks.filter((e=>e.taskId!=a));r.tasks=s,t(r)},findTaskToUpdate:(t,n)=>e().find((e=>e.id==t)).tasks.find((e=>e.taskId==n)),updateTask:(t,n)=>{const a=e(),r=a.find((e=>e.id==t)),s=r.tasks,o=s.findIndex((e=>e.taskId==n.taskId));s[o]=n,r.tasks=s,localStorage.setItem("projects",JSON.stringify(a))}}})(),t=(()=>{const t=()=>{const t=e.getProjects();n(t)},n=e=>{o(e)},a=e=>{c(e)};return{onProjectSelect:t=>{const n=e.getProjects().find((e=>e.id==t)),r=document.querySelector(`[data-project-id='${n.id}']`);a(r)},onProjectAdd:n=>{const r={projectName:n,tasks:[]};e.saveProject(r),t();const s=document.querySelector(`[data-project-id='${r.id}']`);a(s)},onProjectNameEdit:(n,a,r=e.getTasks(n))=>{e.saveProject({id:n,projectName:a,tasks:r}),t()},onTaskAdd:(t,n)=>{const a={item:t,taskId:Math.floor(1e6*Math.random()),priority:"low",dueDate:null,isComplete:!1},r=e.getProjects().find((e=>e.id==n));return r.tasks.push(a),e.saveProject(r),a},onTaskNameEdit:(t,n,a)=>{const r=e.findTaskToUpdate(t,n);e.updateTask(t,{item:a,taskId:r.taskId,priority:r.priority,dueDate:r.dueDate,isComplete:r.isComplete})},onTaskPriorityEdit:(t,n,a)=>{const r=e.findTaskToUpdate(t,n);e.updateTask(t,{item:r.item,taskId:r.taskId,priority:a,dueDate:r.dueDate,isComplete:r.isComplete})}}})(),n=()=>({createListElement:e=>{const t=document.createElement("li");return t.setAttribute("class",e),t},createSpanElement:e=>{const t=document.createElement("span");return t.classList.add(e),t},createImageElement:(e,t)=>{const n=document.createElement("img");return n.classList.add(t),n.setAttribute("src",e),n.setAttribute("draggable","false"),n},createInputField:e=>{const t=document.createElement("input");return t.setAttribute("type","text"),t.setAttribute("placeholder",e),t.setAttribute("id","user-input"),t.required=!0,t},createForm:()=>document.createElement("form"),createDiv:e=>{const t=document.createElement("div");return t.setAttribute("class",e),t}}),a=()=>{const e=n(),t=e.createSpanElement("icons"),a=e.createImageElement("images/edit-icon.svg","edit-icon"),r=e.createImageElement("images/delete-icon.svg","delete-icon");return a.classList.add("edit-project"),r.classList.add("delete-project"),t.append(a,r),t},r=e=>{const t=n(),a=document.querySelector(".project-list"),r=a.childElementCount-2,s=a.children[r].textContent,o=document.querySelector("#writing-area"),c=t.createDiv("project");c.setAttribute("data-project-id",e);const i=t.createDiv("skip-line"),d=t.createDiv("project-heading"),l=document.createElement("h2");l.setAttribute("class","notepad-text"),l.textContent=s;const m=document.createElement("h3");m.setAttribute("class","notepad-text"),m.textContent="Due Date";const p=document.createElement("ul");p.classList.add("notepad-text","todos");const u=t.createListElement("task"),E=t.createSpanElement("add-task"),g=t.createImageElement("images/add-icon.svg","add-icon");E.append(g,"Add Task"),u.append(E),p.append(u,i),d.append(l,m),c.append(d,p),o.append(c)},s=(e,t)=>{const r=n(),s=r.createListElement("project-item");s.setAttribute("data-project-id",e);const o=r.createSpanElement("project-name");o.textContent=t;const c=a();return s.append(o,c),s},o=e=>{const n=document.querySelector(".project-list"),a=document.querySelector("[data-add-project]");[].slice.call(n.children).forEach((e=>{e.classList.contains("project-item")&&e.remove()}));for(const t of e){const e=s(t.id,t.projectName);n.insertBefore(e,a)}n.querySelectorAll(".project-item").forEach((e=>{e.addEventListener("click",(()=>{t.onProjectSelect(e.dataset.projectId)}))}))},c=e=>{const t=document.querySelector(".active");t&&t.classList.remove("active"),e.classList.add("active"),e.children.item(0)},i=()=>null!=document.querySelector("#user-input"),d=()=>{const e=document.querySelector("#user-input"),t=e.parentElement.parentElement,a=n().createSpanElement("project-name"),r=e.value.trim();r&&(a.textContent=r,e.parentElement.remove(),t.insertBefore(a,t.childNodes[0]))},l=()=>{if(i())return;(()=>{const e=n(),t=document.querySelector(".project-list"),r=e.createListElement("project-item"),s=e.createForm(),o=e.createInputField("Project name...");s.append(o);const c=a();r.append(s,c),t.insertBefore(r,t.lastElementChild),setTimeout((()=>{o.focus()}),0)})();const e=document.querySelector("#user-input"),s=e.parentElement,o=s.parentElement;e.addEventListener("blur",(function(){if(""==e.value.trim())return void o.remove();d();const n=o.firstElementChild.textContent;t.onProjectAdd(n);const a=document.querySelector(".project-list"),s=a.children[a.childElementCount-2].getAttribute("data-project-id");i()||r(s)})),s.addEventListener("submit",(function(e){e.preventDefault(),d();const n=o.firstElementChild.textContent;t.onProjectAdd(n);const a=document.querySelector(".project-list"),s=a.children[a.childElementCount-2].getAttribute("data-project-id");i()||r(s)}))},m=()=>{const e=document.querySelector("#user-input"),t=e.parentElement,n=t.parentElement.parentElement;e.addEventListener("blur",(function(t){const a=t.target.closest("[data-project-id]").dataset.projectId,r=e.value;u(),r&&p(r,a,n)})),t.addEventListener("submit",(function(t){t.preventDefault();const a=t.target.closest("[data-project-id]").dataset.projectId,r=e.value;u(),r&&p(r,a,n)}))},p=(e,n,a)=>{if(a.dataset.taskId)return t.onTaskNameEdit(n,a.dataset.taskId,e);const r=t.onTaskAdd(e,n);a.setAttribute("data-task-id",r.taskId)},u=()=>{const e=document.querySelector("#user-input"),t=e.parentElement,a=t.parentElement,r=a.parentElement,s=e.value.trim(),o=n().createSpanElement("task-text");o.append(s),""!=s||r.dataset.taskId?""==s&&r.dataset.taskId||(t.remove(),a.prepend(o)):r.remove()};window.onload=()=>{const t=e.getProjects();o(t)},(()=>{const e=document.getElementById("bars-icon-mobile");window.innerWidth<=1024&&e.classList.contains("hidden")&&e.classList.toggle("hidden");const t=document.getElementById("sidebar"),n=()=>{t.classList.toggle("toggle-sidebar"),window.innerWidth<=1024&&e.classList.toggle("hidden")};document.querySelectorAll(".bars-icon").forEach((e=>{e.addEventListener("click",n)}))})(),document.addEventListener("click",(t=>{if(t.target.closest(".delete-project")){const n=t.target.closest(".project-item");n.remove();const a=n.dataset.projectId;e.deleteProject(a)}})),document.querySelector("[data-add-project]").addEventListener("click",l),document.addEventListener("click",(e=>{e.target.classList.contains("edit-project")&&(e=>{if(i())return;const a=n().createForm(),r=n().createInputField("Project name..."),s=e.target.parentElement.previousElementSibling;r.value=s.textContent,s.remove(),a.append(r);const o=e.target.closest(".project-item");o.insertBefore(a,o.childNodes[0]);const c=document.querySelector("#user-input"),l=o.dataset.projectId;c.addEventListener("blur",(function(){""!=c.value&&d();const e=o.firstElementChild.textContent;t.onProjectNameEdit(l,e)})),a.addEventListener("submit",(function(e){e.preventDefault(),d();const n=o.firstElementChild.textContent;t.onProjectNameEdit(l,n)}))})(e)})),document.addEventListener("click",(a=>{a.target.classList.contains("task-item")&&a.target.parentElement.classList.toggle("completed"),a.target.classList.contains("add-task")&&((t=>{if(document.getElementById("user-input"))return;const a=n().createListElement("task"),r=n().createSpanElement("task-item"),s=n().createForm(),o=n().createInputField("Enter Task...");s.append(o),r.append(s);const c=n().createSpanElement("icons"),i=n().createImageElement("images/edit-icon.svg","edit-icon"),d=n().createImageElement("images/delete-icon.svg","delete-icon");i.addEventListener("click",(()=>{if(a.classList.contains("completed"))return;const e=document.querySelector(".task-text"),t=e.textContent;e.remove();const s=n().createForm(),o=n().createInputField("Enter Task...");o.value=t,s.append(o),r.insertBefore(s,c),a.prepend(r),m()})),d.addEventListener("click",(t=>{const n=t.target.closest("[data-project-id]").dataset.projectId,r=t.target.closest("[data-task-id]").dataset.taskId;a.remove(),e.deleteTask(n,r)})),c.append(i,d),r.append(c);const l=(()=>{const e=n().createSpanElement("due-date"),t=n().createImageElement("images/priority-icon.svg","priority-icon");t.classList.add("priority-low");const a=document.createElement("label");a.classList.add("date-label");const r=document.createElement("input");r.setAttribute("type","date"),r.required=!0;const s=n().createImageElement("images/calendar-icon.svg","calendar-icon");return a.append(r,s),e.append(t,a),e})();a.append(r,l);const p=t.closest(".todos"),u=p.childElementCount-2;p.insertBefore(a,p.children[u]),setTimeout((()=>{o.focus()}),0)})(a.target),m()),a.target.classList.contains("priority-icon")&&(e=>{if(e.parentElement.parentElement.classList.contains("completed"))return;const n=e.closest([".project"]).dataset.projectId,a=e.closest("[data-task-id").dataset.taskId,r=e.classList;r.contains("priority-low")?(r.remove("priority-low"),r.add("priority-medium"),t.onTaskPriorityEdit(n,a,"medium")):r.contains("priority-medium")?(r.remove("priority-medium"),r.add("priority-high"),t.onTaskPriorityEdit(n,a,"high")):r.contains("priority-high")&&(r.remove("priority-high"),r.add("priority-low"),t.onTaskPriorityEdit(n,a,"low"))})(a.target)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUNaLElDVEt3QyxDQUFhbkMsRUFBRUssUUFDZkgsS0FFQUYsRUFBRUssT0FBTzFFLFVBQVUwQyxTQUFTLGtCRGtGakIsQ0FBQytELElBRXBCLEdBRDBCQSxFQUFZckQsY0FBY0EsY0FBY3BELFVBQzVDMEMsU0FBUyxhQUFjLE9BQzdDLE1BQU05RixFQUFZNkosRUFBWTlCLFFBQVEsQ0FBQyxhQUFhM0IsUUFBUXBHLFVBQ3RESyxFQUFTd0osRUFBWTlCLFFBQVEsaUJBQWlCM0IsUUFBUS9GLE9BRXREeUosRUFBb0JELEVBQVl6RyxVQUVsQzBHLEVBQWtCaEUsU0FBUyxpQkFDM0JnRSxFQUFrQi9ELE9BQU8sZ0JBQ3pCK0QsRUFBa0J6RyxJQUFJLG1CQUNmLHFCQUE0QnJELEVBQVdLLEVBQVEsV0FFdER5SixFQUFrQmhFLFNBQVMsb0JBQzNCZ0UsRUFBa0IvRCxPQUFPLG1CQUN6QitELEVBQWtCekcsSUFBSSxpQkFDZixxQkFBNEJyRCxFQUFXSyxFQUFRLFNBRXREeUosRUFBa0JoRSxTQUFTLG1CQUMzQmdFLEVBQWtCL0QsT0FBTyxpQkFDekIrRCxFQUFrQnpHLElBQUksZ0JBQ2YscUJBQTRCckQsRUFBV0ssRUFBUSxTQ3RHbEQwSixDQUFldEMsRUFBRUssWSIsInNvdXJjZXMiOlsid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9zdG9yYWdlLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9oYW5kbGVycy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvY3JlYXRlRE9NRWxlbWVudHMuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3Byb2plY3RzLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy90YXNrcy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgdXBkYXRlU3RvcmFnZSA9ICgpID0+IHtcbiAgICBcbiAgICBjb25zdCBnZXRQcm9qZWN0cyA9ICgpID0+IHtcbiAgICAgICAgLy8gY3JlYXRlcyBhbiBhcnJheSBvZiBvYmplY3RzIFxuICAgICAgICBjb25zdCBwcm9qZWN0cyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Byb2plY3RzJykgfHwgJ1tdJyk7XG4gICAgICAgIHJldHVybiBwcm9qZWN0cztcbiAgICB9XG5cbiAgICBjb25zdCBnZXRUYXNrcyA9IChwcm9qZWN0SWQpID0+IHtcbiAgICAgICAgY29uc3QgcHJvamVjdHMgPSBnZXRQcm9qZWN0cygpO1xuICAgICAgICBjb25zdCBjdXJyZW50UHJvamVjdCA9IHByb2plY3RzLmZpbmQocHJvamVjdCA9PiBwcm9qZWN0LmlkID09IHByb2plY3RJZCk7XG4gICAgICAgIGNvbnN0IHRhc2tzID0gY3VycmVudFByb2plY3QudGFza3M7XG4gICAgICAgIHJldHVybiB0YXNrcztcbiAgICB9XG5cbiAgICBjb25zdCBzYXZlUHJvamVjdCA9IChwcm9qZWN0VG9TYXZlKSA9PiB7XG4gICAgICAgIGNvbnN0IHByb2plY3RzID0gZ2V0UHJvamVjdHMoKTtcblxuICAgICAgICAvLyBmaW5kIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBvYmplY3QgdGhhdCBtYXRjaGVzIHRoZSBpZFxuICAgICAgICBjb25zdCBleGlzdGluZyA9IHByb2plY3RzLmZpbmQocHJvamVjdCA9PiBwcm9qZWN0LmlkID09IHByb2plY3RUb1NhdmUuaWQpO1xuICAgICAgICBcbiAgICAgICAgaWYgKGV4aXN0aW5nKSB7XG4gICAgICAgICAgICBleGlzdGluZy5wcm9qZWN0TmFtZSA9IHByb2plY3RUb1NhdmUucHJvamVjdE5hbWU7XG4gICAgICAgICAgICBleGlzdGluZy50YXNrcyA9IHByb2plY3RUb1NhdmUudGFza3M7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwcm9qZWN0VG9TYXZlLmlkID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDAwMCk7XG4gICAgICAgICAgICAvLyBBZGQgcHJvamVjdE5hbWVcbiAgICAgICAgICAgIC8vIEFkZCBUYXNrcyBhcnJheSBjb250YWluaW5nIGFub3RoZXIgYXJyYXkgd2hpY2ggaW5jbHVkZXMgdGFzaywgcHJpb3JpdHksIGR1ZURhdGUsIGFuZCB0cnVlL2ZhbHNlIGZvciBjb21wbGV0ZWQgb3Igbm90XG4gICAgICAgICAgICBwcm9qZWN0cy5wdXNoKHByb2plY3RUb1NhdmUpO1xuICAgICAgICB9XG5cbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Byb2plY3RzJywgSlNPTi5zdHJpbmdpZnkocHJvamVjdHMpKTtcbiAgICB9XG5cbiAgICBjb25zdCB1cGRhdGVUYXNrID0gKHByb2plY3RJZCwgdXBkYXRlZFRhc2spID0+IHtcbiAgICAgICAgLy8gdGFza3MgZm9yIGN1cnJlbnQgcHJvamVjdFxuICAgICAgICBjb25zdCBwcm9qZWN0cyA9IGdldFByb2plY3RzKCk7XG4gICAgICAgIGNvbnN0IHByb2plY3RUb1VwZGF0ZSA9IHByb2plY3RzLmZpbmQocHJvamVjdCA9PiBwcm9qZWN0LmlkID09IHByb2plY3RJZCk7XG4gICAgICAgIGNvbnN0IHRhc2tzQXJyYXkgPSBwcm9qZWN0VG9VcGRhdGUudGFza3M7XG4gICAgICAgIFxuICAgICAgICAvLyBmaW5kIHRhc2sgaW5kZXggYW5kIHJlcGxhY2UgdGhlIHRhc2sgYXQgdGhhdCBpbmRleCB0byB1cGRhdGVcbiAgICAgICAgY29uc3QgaW5kZXhPZlVwZGF0ZWRUYXNrID0gdGFza3NBcnJheS5maW5kSW5kZXgoKHRhc2tPYmopID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0YXNrT2JqLnRhc2tJZCA9PSB1cGRhdGVkVGFzay50YXNrSWQ7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRhc2tzQXJyYXlbaW5kZXhPZlVwZGF0ZWRUYXNrXSA9IHVwZGF0ZWRUYXNrO1xuICAgICAgICAvLyBTYXZlIHVwZGF0ZWQgdGFza3MgYXJyYXkgdG8gdGhlIHByb2plY3Qgb2JqZWN0XG4gICAgICAgIHByb2plY3RUb1VwZGF0ZS50YXNrcyA9IHRhc2tzQXJyYXk7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwcm9qZWN0cycsIEpTT04uc3RyaW5naWZ5KHByb2plY3RzKSk7XG4gICAgfVxuXG4gICAgY29uc3QgZmluZFRhc2tUb1VwZGF0ZSA9IChwcm9qZWN0SWQsIGV4aXN0aW5nVGFza0lkKSA9PiB7XG4gICAgICAgIGNvbnN0IHByb2plY3RzID0gZ2V0UHJvamVjdHMoKTsgICAgIFxuICAgICAgICBjb25zdCBwcm9qZWN0VG9VcGRhdGUgPSBwcm9qZWN0cy5maW5kKHByb2plY3QgPT4gcHJvamVjdC5pZCA9PSBwcm9qZWN0SWQpO1xuICAgICAgICBjb25zdCB0YXNrc0FycmF5ID0gcHJvamVjdFRvVXBkYXRlLnRhc2tzXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nVGFzayA9IHRhc2tzQXJyYXkuZmluZCh0YXNrID0+IHRhc2sudGFza0lkID09IGV4aXN0aW5nVGFza0lkKTtcbiAgICAgICAgcmV0dXJuIGV4aXN0aW5nVGFzaztcbiAgICB9XG5cbiAgICBjb25zdCBkZWxldGVQcm9qZWN0ID0gKGlkKSA9PiB7XG4gICAgICAgIGNvbnN0IHByb2plY3RzID0gZ2V0UHJvamVjdHMoKTtcbiAgICAgICAgY29uc3QgdXBkYXRlZFByb2plY3RMaXN0ID0gcHJvamVjdHMuZmlsdGVyKHByb2plY3QgPT4gcHJvamVjdC5pZCAhPSBpZCk7XG5cbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Byb2plY3RzJywgSlNPTi5zdHJpbmdpZnkodXBkYXRlZFByb2plY3RMaXN0KSk7XG4gICAgfVxuXG4gICAgY29uc3QgZGVsZXRlVGFzayA9IChpZCwgdGFza0lkKSA9PiB7XG4gICAgICAgIGNvbnN0IHByb2plY3RzID0gZ2V0UHJvamVjdHMoKTtcbiAgICAgICAgY29uc3QgcHJvamVjdFdpdGhUYXNrID0gcHJvamVjdHMuZmluZChwcm9qZWN0ID0+IHByb2plY3QuaWQgPT0gaWQpO1xuICAgICAgICBjb25zdCBhbGxUYXNrcyA9IHByb2plY3RXaXRoVGFzay50YXNrcztcbiAgICAgICAgLy8gRWFjaCB0YXNrIGlzIGFuIG9iamVjdFxuICAgICAgICBjb25zdCB1cGRhdGVkVGFza09iaiA9IGFsbFRhc2tzLmZpbHRlcih0YXNrT2JqID0+IHRhc2tPYmoudGFza0lkICE9IHRhc2tJZCk7XG4gICAgICAgIHByb2plY3RXaXRoVGFzay50YXNrcyA9IHVwZGF0ZWRUYXNrT2JqO1xuXG4gICAgICAgIHNhdmVQcm9qZWN0KHByb2plY3RXaXRoVGFzayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgZ2V0UHJvamVjdHMsIGdldFRhc2tzLCBzYXZlUHJvamVjdCwgZGVsZXRlUHJvamVjdCwgZGVsZXRlVGFzaywgZmluZFRhc2tUb1VwZGF0ZSwgdXBkYXRlVGFzayB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHVwZGF0ZVN0b3JhZ2UoKTsiLCJpbXBvcnQgeyB1cGRhdGVQcm9qZWN0TGlzdCwgdXBkYXRlQWN0aXZlVGFiIH0gZnJvbSBcIi4vY3JlYXRlRE9NRWxlbWVudHNcIjtcbmltcG9ydCB1cGRhdGVTdG9yYWdlIGZyb20gXCIuL3N0b3JhZ2VcIjtcbmltcG9ydCB7Zm9ybWF0fSBmcm9tIFwiZGF0ZS1mbnNcIjtcblxuY29uc3QgaGFuZGxlcnMgPSAoKSA9PiB7XG4gICAgXG4gICAgY29uc3QgX3JlZnJlc2hQcm9qZWN0TGlzdCA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgcHJvamVjdHMgPSB1cGRhdGVTdG9yYWdlLmdldFByb2plY3RzKCk7IC8vIFVwZGF0ZSBwcm9qZWN0cyBpbiBzdG9yYWdlICAgICAgICBcbiAgICAgICAgX3NldFByb2plY3RMaXN0KHByb2plY3RzKTsgLy8gVXBkYXRlIHByb2plY3RzIG9uIERPTVxuICAgIH1cblxuICAgIGNvbnN0IF9zZXRQcm9qZWN0TGlzdCA9IChwcm9qZWN0cykgPT4ge1xuICAgICAgICB1cGRhdGVQcm9qZWN0TGlzdChwcm9qZWN0cyk7XG4gICAgfVxuXG4gICAgY29uc3QgX3NldEFjdGl2ZVRhYiA9ICh0YWIpID0+IHtcbiAgICAgICAgdXBkYXRlQWN0aXZlVGFiKHRhYik7XG4gICAgfVxuXG4gICAgLy8gSGVyZSBiZSBoYW5kbGVyc1xuICAgIGNvbnN0IG9uUHJvamVjdFNlbGVjdCA9IChwcm9qZWN0SWQpID0+IHtcbiAgICAgICAgY29uc3QgcHJvamVjdHMgPSB1cGRhdGVTdG9yYWdlLmdldFByb2plY3RzKCk7XG4gICAgICAgIGNvbnN0IHByb2plY3RPYmplY3QgPSBwcm9qZWN0cy5maW5kKHByb2plY3QgPT4gcHJvamVjdC5pZCA9PSBwcm9qZWN0SWQpO1xuICAgICAgICBjb25zdCBzZWxlY3RlZFByb2plY3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBbZGF0YS1wcm9qZWN0LWlkPScke3Byb2plY3RPYmplY3QuaWR9J11gKTtcbiAgICAgICAgX3NldEFjdGl2ZVRhYihzZWxlY3RlZFByb2plY3QpO1xuICAgIH1cblxuICAgIGNvbnN0IG9uUHJvamVjdEFkZCA9IChwcm9qZWN0TmFtZSkgPT4ge1xuICAgICAgICAvLyBwYXNzIHVzZXIgaW5wdXQgaW50byBmdW5jdGlvblxuICAgICAgICBjb25zdCBuZXdQcm9qZWN0ID0gIHtcbiAgICAgICAgICAgIHByb2plY3ROYW1lOiBwcm9qZWN0TmFtZSxcbiAgICAgICAgICAgIHRhc2tzOiBbXVxuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZVN0b3JhZ2Uuc2F2ZVByb2plY3QobmV3UHJvamVjdCk7XG4gICAgICAgIC8vIGFkZCBpbnB1dCB0byBwYWdlXG4gICAgICAgIF9yZWZyZXNoUHJvamVjdExpc3QoKTtcbiAgICAgICAgY29uc3QgbmV3UHJvamVjdERPTUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBbZGF0YS1wcm9qZWN0LWlkPScke25ld1Byb2plY3QuaWR9J11gKTtcbiAgICAgICAgX3NldEFjdGl2ZVRhYihuZXdQcm9qZWN0RE9NRWxlbWVudCk7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IG9uVGFza0FkZCA9ICh0YXNrLCBpZCkgPT4ge1xuICAgICAgICBjb25zdCBuZXdUYXNrID0ge1xuICAgICAgICAgICAgaXRlbTogdGFzaywgXG4gICAgICAgICAgICB0YXNrSWQ6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDApLFxuICAgICAgICAgICAgcHJpb3JpdHk6ICdsb3cnLFxuICAgICAgICAgICAgZHVlRGF0ZTogbnVsbCxcbiAgICAgICAgICAgIGlzQ29tcGxldGU6IGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJvamVjdHMgPSB1cGRhdGVTdG9yYWdlLmdldFByb2plY3RzKCk7XG4gICAgICAgIGNvbnN0IHByb2plY3RUb1VwZGF0ZSA9IHByb2plY3RzLmZpbmQocHJvamVjdCA9PiBwcm9qZWN0LmlkID09IGlkKTtcbiAgICAgICAgcHJvamVjdFRvVXBkYXRlLnRhc2tzLnB1c2gobmV3VGFzayk7XG4gICAgICAgIHVwZGF0ZVN0b3JhZ2Uuc2F2ZVByb2plY3QocHJvamVjdFRvVXBkYXRlKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBuZXdUYXNrO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCBvblByb2plY3ROYW1lRWRpdCA9IChwcm9qZWN0SWQsIHByb2plY3ROYW1lLCB0YXNrcyA9IHVwZGF0ZVN0b3JhZ2UuZ2V0VGFza3MocHJvamVjdElkKSkgPT4ge1xuICAgICAgICB1cGRhdGVTdG9yYWdlLnNhdmVQcm9qZWN0KHtcbiAgICAgICAgICAgIGlkOiBwcm9qZWN0SWQsXG4gICAgICAgICAgICBwcm9qZWN0TmFtZTogcHJvamVjdE5hbWUsXG4gICAgICAgICAgICB0YXNrczogdGFza3NcbiAgICAgICAgfSk7XG5cbiAgICAgICAgX3JlZnJlc2hQcm9qZWN0TGlzdCgpO1xuICAgIH1cblxuICAgIGNvbnN0IG9uVGFza05hbWVFZGl0ID0gKHByb2plY3RJZCwgdGFza0lkLCBuZXdUYXNrTmFtZSkgPT4ge1xuICAgICAgICBjb25zdCBleGlzdGluZ1Rhc2sgPSB1cGRhdGVTdG9yYWdlLmZpbmRUYXNrVG9VcGRhdGUocHJvamVjdElkLCB0YXNrSWQpO1xuICAgICAgICB1cGRhdGVTdG9yYWdlLnVwZGF0ZVRhc2socHJvamVjdElkLCB7XG4gICAgICAgICAgICAgICAgaXRlbTogbmV3VGFza05hbWUsXG4gICAgICAgICAgICAgICAgdGFza0lkOiBleGlzdGluZ1Rhc2sudGFza0lkLFxuICAgICAgICAgICAgICAgIHByaW9yaXR5OiBleGlzdGluZ1Rhc2sucHJpb3JpdHksXG4gICAgICAgICAgICAgICAgZHVlRGF0ZTogZXhpc3RpbmdUYXNrLmR1ZURhdGUsXG4gICAgICAgICAgICAgICAgaXNDb21wbGV0ZTogZXhpc3RpbmdUYXNrLmlzQ29tcGxldGVcbiAgICAgICAgICAgIH0pOyAgXG4gICAgfVxuXG4gICAgY29uc3Qgb25UYXNrUHJpb3JpdHlFZGl0ID0gKHByb2plY3RJZCwgdGFza0lkLCBuZXdQcmlvcml0eSkgPT4ge1xuICAgICAgICBjb25zdCBleGlzdGluZ1Rhc2sgPSB1cGRhdGVTdG9yYWdlLmZpbmRUYXNrVG9VcGRhdGUocHJvamVjdElkLCB0YXNrSWQpO1xuICAgICAgICB1cGRhdGVTdG9yYWdlLnVwZGF0ZVRhc2socHJvamVjdElkLCB7XG4gICAgICAgICAgICAgICAgaXRlbTogZXhpc3RpbmdUYXNrLml0ZW0sXG4gICAgICAgICAgICAgICAgdGFza0lkOiBleGlzdGluZ1Rhc2sudGFza0lkLFxuICAgICAgICAgICAgICAgIHByaW9yaXR5OiBuZXdQcmlvcml0eSxcbiAgICAgICAgICAgICAgICBkdWVEYXRlOiBleGlzdGluZ1Rhc2suZHVlRGF0ZSxcbiAgICAgICAgICAgICAgICBpc0NvbXBsZXRlOiBleGlzdGluZ1Rhc2suaXNDb21wbGV0ZVxuICAgICAgICAgICAgfSk7ICBcbiAgICB9XG4gICAgcmV0dXJuIHsgb25Qcm9qZWN0U2VsZWN0LCBvblByb2plY3RBZGQsIG9uUHJvamVjdE5hbWVFZGl0LCBvblRhc2tBZGQsIG9uVGFza05hbWVFZGl0LCBvblRhc2tQcmlvcml0eUVkaXQgfVxuICAgIFxufVxuXG5leHBvcnQgZGVmYXVsdCBoYW5kbGVycygpOyIsImltcG9ydCBoYW5kbGVycyBmcm9tIFwiLi9oYW5kbGVyc1wiXG5cbi8vIERPTSBFbGVtZW50cyBGYWN0b3J5IEZ1bmN0aW9uXG5jb25zdCBjcmVhdGVFbGVtZW50cyA9ICgpID0+IHtcbiAgICBcbiAgICBjb25zdCBjcmVhdGVMaXN0RWxlbWVudCA9IChodG1sQ2xhc3MpID0+IHtcbiAgICAgICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICAgICAgICBsaS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgaHRtbENsYXNzKTtcbiAgICAgICAgcmV0dXJuIGxpO1xuICAgIH1cblxuICAgIGNvbnN0IGNyZWF0ZVNwYW5FbGVtZW50ID0gKGh0bWxDbGFzcykgPT4ge1xuICAgICAgICBjb25zdCBzcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICBzcGFuLmNsYXNzTGlzdC5hZGQoaHRtbENsYXNzKTtcbiAgICAgICAgcmV0dXJuIHNwYW47XG4gICAgfVxuXG4gICAgY29uc3QgY3JlYXRlSW1hZ2VFbGVtZW50ID0gKHNyYywgaHRtbENsYXNzKSA9PiB7XG4gICAgICAgIGNvbnN0IGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICAgICAgICBpbWcuY2xhc3NMaXN0LmFkZChodG1sQ2xhc3MpO1xuICAgICAgICBpbWcuc2V0QXR0cmlidXRlKCdzcmMnLCBzcmMpO1xuICAgICAgICBpbWcuc2V0QXR0cmlidXRlKCdkcmFnZ2FibGUnLCAnZmFsc2UnKTtcbiAgICAgICAgcmV0dXJuIGltZztcbiAgICB9XG4gICAgXG4gICAgY29uc3QgY3JlYXRlRm9ybSA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgaW5wdXRGb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZm9ybScpO1xuICAgICAgICByZXR1cm4gaW5wdXRGb3JtO1xuICAgIH1cblxuICAgIGNvbnN0IGNyZWF0ZUlucHV0RmllbGQgPSAocGxhY2Vob2xkZXJUZXh0KSA9PiB7XG4gICAgICAgIGNvbnN0IHVzZXJJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgIHVzZXJJbnB1dC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dCcpO1xuICAgICAgICB1c2VySW5wdXQuc2V0QXR0cmlidXRlKCdwbGFjZWhvbGRlcicsIHBsYWNlaG9sZGVyVGV4dCk7XG4gICAgICAgIHVzZXJJbnB1dC5zZXRBdHRyaWJ1dGUoJ2lkJywgJ3VzZXItaW5wdXQnKTtcbiAgICAgICAgdXNlcklucHV0LnJlcXVpcmVkID0gdHJ1ZTtcblxuICAgICAgICByZXR1cm4gdXNlcklucHV0O1xuICAgIH1cblxuICAgIGNvbnN0IGNyZWF0ZURpdiA9IChodG1sQ2xhc3MpID0+IHtcbiAgICAgICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGRpdi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgaHRtbENsYXNzKTtcbiAgICAgICAgcmV0dXJuIGRpdjtcbiAgICB9XG5cbiAgICByZXR1cm4ge2NyZWF0ZUxpc3RFbGVtZW50LCBjcmVhdGVTcGFuRWxlbWVudCwgY3JlYXRlSW1hZ2VFbGVtZW50LCBjcmVhdGVJbnB1dEZpZWxkLCBjcmVhdGVGb3JtLCBjcmVhdGVEaXZ9XG59XG5cbmNvbnN0IGNyZWF0ZUljb25TcGFuID0gKCkgPT4ge1xuICAgIGNvbnN0IHZpZXcgPSBjcmVhdGVFbGVtZW50cygpO1xuXG4gICAgY29uc3QgaWNvblNwYW4gPSB2aWV3LmNyZWF0ZVNwYW5FbGVtZW50KCdpY29ucycpO1xuICAgIGNvbnN0IGVkaXRJY29uID0gdmlldy5jcmVhdGVJbWFnZUVsZW1lbnQoJ2ltYWdlcy9lZGl0LWljb24uc3ZnJywgJ2VkaXQtaWNvbicpO1xuICAgIGNvbnN0IGRlbGV0ZUljb24gPSB2aWV3LmNyZWF0ZUltYWdlRWxlbWVudCgnaW1hZ2VzL2RlbGV0ZS1pY29uLnN2ZycsICdkZWxldGUtaWNvbicpO1xuICAgIFxuICAgIGVkaXRJY29uLmNsYXNzTGlzdC5hZGQoJ2VkaXQtcHJvamVjdCcpO1xuICAgIGRlbGV0ZUljb24uY2xhc3NMaXN0LmFkZCgnZGVsZXRlLXByb2plY3QnKTtcbiAgICBcbiAgICBpY29uU3Bhbi5hcHBlbmQoZWRpdEljb24sIGRlbGV0ZUljb24pO1xuICAgIFxuICAgIHJldHVybiBpY29uU3Bhbjtcbn1cblxuY29uc3QgYWRkUHJvamVjdFRvU2lkZWJhciA9ICgpID0+IHtcbiAgICBjb25zdCB2aWV3ID0gY3JlYXRlRWxlbWVudHMoKTtcbiAgICBjb25zdCBwcm9qZWN0c0NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9qZWN0LWxpc3QnKTtcblxuICAgIGNvbnN0IHByb2plY3RMaXN0RWxlbWVudCA9ICB2aWV3LmNyZWF0ZUxpc3RFbGVtZW50KCdwcm9qZWN0LWl0ZW0nKTtcbiAgICBcbiAgICBjb25zdCBwcm9qZWN0SW5wdXRGb3JtID0gdmlldy5jcmVhdGVGb3JtKCk7XG4gICAgY29uc3QgcHJvamVjdE5hbWVJbnB1dCA9IHZpZXcuY3JlYXRlSW5wdXRGaWVsZCgnUHJvamVjdCBuYW1lLi4uJyk7XG4gICAgcHJvamVjdElucHV0Rm9ybS5hcHBlbmQocHJvamVjdE5hbWVJbnB1dCk7XG5cbiAgICBjb25zdCBpY29uU3BhbiA9IGNyZWF0ZUljb25TcGFuKCk7XG4gICAgcHJvamVjdExpc3RFbGVtZW50LmFwcGVuZChwcm9qZWN0SW5wdXRGb3JtLCBpY29uU3Bhbik7XG4gICAgcHJvamVjdHNDb250YWluZXIuaW5zZXJ0QmVmb3JlKHByb2plY3RMaXN0RWxlbWVudCwgcHJvamVjdHNDb250YWluZXIubGFzdEVsZW1lbnRDaGlsZCk7XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgcHJvamVjdE5hbWVJbnB1dC5mb2N1cygpO1xuICAgIH0sIDApO1xufVxuXG5jb25zdCBhZGRQcm9qZWN0VG9Ob3RlcGFkID0gKHByb2plY3RJZCkgPT4ge1xuICAgIGNvbnN0IHZpZXcgPSBjcmVhdGVFbGVtZW50cygpO1xuICAgIGNvbnN0IHByb2plY3RMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2plY3QtbGlzdCcpO1xuICAgIGNvbnN0IGN1cnJlbnRQcm9qZWN0TnVtYmVyID0gcHJvamVjdExpc3QuY2hpbGRFbGVtZW50Q291bnQgLSAyO1xuICAgIGNvbnN0IHByb2plY3ROYW1lID0gcHJvamVjdExpc3QuY2hpbGRyZW5bY3VycmVudFByb2plY3ROdW1iZXJdLnRleHRDb250ZW50O1xuXG4gICAgY29uc3Qgbm90ZXBhZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN3cml0aW5nLWFyZWEnKTtcbiAgICBjb25zdCBwcm9qZWN0RGl2ID0gdmlldy5jcmVhdGVEaXYoJ3Byb2plY3QnKTtcbiAgICBwcm9qZWN0RGl2LnNldEF0dHJpYnV0ZSgnZGF0YS1wcm9qZWN0LWlkJywgcHJvamVjdElkKTtcbiAgICBjb25zdCBza2lwTGluZSA9IHZpZXcuY3JlYXRlRGl2KCdza2lwLWxpbmUnKTtcbiAgICBcbiAgICBjb25zdCBwcm9qZWN0SGVhZGluZyA9IHZpZXcuY3JlYXRlRGl2KCdwcm9qZWN0LWhlYWRpbmcnKTtcbiAgICBjb25zdCBoMiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gyJyk7XG4gICAgaDIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdub3RlcGFkLXRleHQnKTtcbiAgICBoMi50ZXh0Q29udGVudCA9IHByb2plY3ROYW1lO1xuICAgIGNvbnN0IGgzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDMnKTtcbiAgICBoMy5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ25vdGVwYWQtdGV4dCcpO1xuICAgIGgzLnRleHRDb250ZW50ID0gJ0R1ZSBEYXRlJztcbiAgICAgICAgXG4gICAgY29uc3QgdGFza3NDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpO1xuICAgIHRhc2tzQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ25vdGVwYWQtdGV4dCcsICd0b2RvcycpO1xuXG4gICAgY29uc3QgYWRkVGFza0xpc3RFbGVtZW50ID0gdmlldy5jcmVhdGVMaXN0RWxlbWVudCgndGFzaycpO1xuICAgIGNvbnN0IGFkZFRhc2tTcGFuID0gdmlldy5jcmVhdGVTcGFuRWxlbWVudCgnYWRkLXRhc2snKTtcbiAgICBjb25zdCBhZGRJY29uID0gdmlldy5jcmVhdGVJbWFnZUVsZW1lbnQoJ2ltYWdlcy9hZGQtaWNvbi5zdmcnLCAnYWRkLWljb24nKTtcbiAgICBhZGRUYXNrU3Bhbi5hcHBlbmQoYWRkSWNvbiwgJ0FkZCBUYXNrJyk7XG5cbiAgICBhZGRUYXNrTGlzdEVsZW1lbnQuYXBwZW5kKGFkZFRhc2tTcGFuKTtcbiAgICB0YXNrc0NvbnRhaW5lci5hcHBlbmQoYWRkVGFza0xpc3RFbGVtZW50LCBza2lwTGluZSk7XG4gICAgcHJvamVjdEhlYWRpbmcuYXBwZW5kKGgyLCBoMyk7XG4gICAgcHJvamVjdERpdi5hcHBlbmQocHJvamVjdEhlYWRpbmcsIHRhc2tzQ29udGFpbmVyKTtcbiAgICBub3RlcGFkLmFwcGVuZChwcm9qZWN0RGl2KTtcbn1cblxuY29uc3QgX2NyZWF0ZVByb2plY3RJdGVtSFRNTCA9IChpZCwgbmFtZSkgPT4ge1xuICAgIC8vIGNyZWF0ZXMgSFRNTCBmb3IgcHJvamVjdCBpdGVtcyBpbiBzaWRlYmFyIGZyb20gbG9jYWxTdG9yYWdlIGl0ZW1cbiAgICBjb25zdCB2aWV3ID0gY3JlYXRlRWxlbWVudHMoKTtcblxuICAgIGNvbnN0IHByb2plY3RJdGVtID0gdmlldy5jcmVhdGVMaXN0RWxlbWVudCgncHJvamVjdC1pdGVtJyk7XG4gICAgcHJvamVjdEl0ZW0uc2V0QXR0cmlidXRlKCdkYXRhLXByb2plY3QtaWQnLCBpZCk7XG4gICAgY29uc3QgcHJvamVjdE5hbWUgPSB2aWV3LmNyZWF0ZVNwYW5FbGVtZW50KCdwcm9qZWN0LW5hbWUnKTtcbiAgICBwcm9qZWN0TmFtZS50ZXh0Q29udGVudCA9IG5hbWU7XG4gICAgY29uc3QgaWNvblNwYW4gPSBjcmVhdGVJY29uU3BhbigpO1xuXG4gICAgcHJvamVjdEl0ZW0uYXBwZW5kKHByb2plY3ROYW1lLCBpY29uU3Bhbik7XG5cbiAgICByZXR1cm4gcHJvamVjdEl0ZW07XG59XG5cbmNvbnN0IHVwZGF0ZVByb2plY3RMaXN0ID0gKHByb2plY3RzKSA9PiB7XG4gICAgY29uc3QgcHJvamVjdHNMaXN0Q29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2plY3QtbGlzdCcpO1xuICAgIGNvbnN0IGFkZFByb2plY3RCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1hZGQtcHJvamVjdF0nKTtcbiAgICBcbiAgICAvLyBDbGVhciBhbGwgZWxlbWVudHMgb2YgY2xhc3MgJy5wcm9qZWN0LWl0ZW0nXG4gICAgY29uc3QgcHJvamVjdHNBcnJheSA9IFtdLnNsaWNlLmNhbGwocHJvamVjdHNMaXN0Q29udGFpbmVyLmNoaWxkcmVuKTtcbiAgICBwcm9qZWN0c0FycmF5LmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgIGlmIChpdGVtLmNsYXNzTGlzdC5jb250YWlucygncHJvamVjdC1pdGVtJykpIGl0ZW0ucmVtb3ZlKCk7XG4gICAgfSk7XG5cbiAgICBmb3IgKGNvbnN0IHByb2plY3Qgb2YgcHJvamVjdHMpIHtcbiAgICAgICAgY29uc3QgaHRtbCA9IF9jcmVhdGVQcm9qZWN0SXRlbUhUTUwocHJvamVjdC5pZCwgcHJvamVjdC5wcm9qZWN0TmFtZSk7XG4gICAgICAgIHByb2plY3RzTGlzdENvbnRhaW5lci5pbnNlcnRCZWZvcmUoaHRtbCwgYWRkUHJvamVjdEJ0bik7XG4gICAgfVxuXG4gICAgLy8gQWRkIGxpc3RlbmVycyBmb3IgZWRpdCwgZGVsZXRlID8/Pz9cbiAgICBwcm9qZWN0c0xpc3RDb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLnByb2plY3QtaXRlbScpLmZvckVhY2gocHJvamVjdEl0ZW0gPT4ge1xuICAgICAgICBwcm9qZWN0SXRlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIGhhbmRsZXJzLm9uUHJvamVjdFNlbGVjdChwcm9qZWN0SXRlbS5kYXRhc2V0LnByb2plY3RJZCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuXG5jb25zdCB1cGRhdGVBY3RpdmVUYWIgPSAodGFiKSA9PiB7XG4gICAgLy8gZm9yIGFsbCBvdGhlciBwcm9qZWN0cywgY2hhbmdlIGRpc3BsYXkgdG8gbm9uZSwgdG8gYnJpbmcgYmFjayBzZXQgZGlzcGxheSB0byBjb250ZW50cyAgXG4gICAgICAgIC8vIGl0ZW0uc3R5bGUuZGlzcGxheSA9ICdub25lJ1xuICAgIC8vIHJlbW92ZSBhY3RpdmUgY2xhc3MgZnJvbSBhbnkgb3RoZXIgc2lkZWJhciBlbGVtZW50XG4gICAgY29uc3QgY3VycmVudEFjdGl2ZVRhYiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hY3RpdmUnKTtcbiAgICBpZiAoY3VycmVudEFjdGl2ZVRhYikgY3VycmVudEFjdGl2ZVRhYi5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICB0YWIuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgY29uc3QgcHJvamVjdE5hbWVTcGFuID0gdGFiLmNoaWxkcmVuLml0ZW0oMCk7IC8vIFVwZGF0ZSBub3RlcGFkIGhlcmU/XG4gICAgLy9jb25zb2xlLmxvZyhwcm9qZWN0TmFtZVNwYW4pO1xufVxuXG5leHBvcnQgeyBhZGRQcm9qZWN0VG9TaWRlYmFyLCBhZGRQcm9qZWN0VG9Ob3RlcGFkLCBjcmVhdGVFbGVtZW50cywgdXBkYXRlUHJvamVjdExpc3QsIHVwZGF0ZUFjdGl2ZVRhYn07IiwiaW1wb3J0IHsgYWRkUHJvamVjdFRvU2lkZWJhciwgYWRkUHJvamVjdFRvTm90ZXBhZCwgY3JlYXRlRWxlbWVudHMgfSBmcm9tIFwiLi9jcmVhdGVET01FbGVtZW50c1wiO1xuaW1wb3J0IGhhbmRsZXJzIGZyb20gXCIuL2hhbmRsZXJzXCI7XG5pbXBvcnQgdXBkYXRlU3RvcmFnZSBmcm9tIFwiLi9zdG9yYWdlXCJcblxuY29uc3QgYXdhaXRpbmdJbnB1dCA9ICgpID0+IHtcbiAgICBjb25zdCB1c2VySW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdXNlci1pbnB1dCcpO1xuICAgIGlmICh1c2VySW5wdXQgIT0gbnVsbCkgcmV0dXJuIHRydWU7XG5cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmNvbnN0IGhhbmRsZVVzZXJJbnB1dCA9ICgpID0+IHsgXG4gICAgLy8gVGhpcyBpcyBET00gU3R1ZmZcbiAgICBjb25zdCB1c2VySW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdXNlci1pbnB1dCcpXG4gICAgY29uc3QgaW5wdXRGb3JtID0gdXNlcklucHV0LnBhcmVudEVsZW1lbnQ7XG4gICAgY29uc3QgcHJvamVjdEl0ZW0gPSBpbnB1dEZvcm0ucGFyZW50RWxlbWVudDtcbiAgICBjb25zdCBwcm9qZWN0U3BhbiA9IGNyZWF0ZUVsZW1lbnRzKCkuY3JlYXRlU3BhbkVsZW1lbnQoJ3Byb2plY3QtbmFtZScpO1xuICAgIFxuICAgIGNvbnN0IHByb2plY3ROYW1lID0gdXNlcklucHV0LnZhbHVlLnRyaW0oKTtcbiAgICBpZiAoIXByb2plY3ROYW1lKSByZXR1cm47XG5cbiAgICBwcm9qZWN0U3Bhbi50ZXh0Q29udGVudCA9IHByb2plY3ROYW1lO1xuICAgIHVzZXJJbnB1dC5wYXJlbnRFbGVtZW50LnJlbW92ZSgpO1xuICAgIHByb2plY3RJdGVtLmluc2VydEJlZm9yZShwcm9qZWN0U3BhbiwgcHJvamVjdEl0ZW0uY2hpbGROb2Rlc1swXSk7IFxufVxuXG5jb25zdCBhZGRQcm9qZWN0ID0gKCkgPT4ge1xuICAgIGlmIChhd2FpdGluZ0lucHV0KCkpIHJldHVybjtcbiAgICBhZGRQcm9qZWN0VG9TaWRlYmFyKCk7XG4gICAgXG4gICAgY29uc3QgdXNlcklucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3VzZXItaW5wdXQnKTtcbiAgICBjb25zdCBpbnB1dEZvcm0gPSB1c2VySW5wdXQucGFyZW50RWxlbWVudDtcbiAgICBjb25zdCBwcm9qZWN0SXRlbSA9IGlucHV0Rm9ybS5wYXJlbnRFbGVtZW50O1xuXG4gICAgdXNlcklucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh1c2VySW5wdXQudmFsdWUudHJpbSgpID09ICcnKSB7XG4gICAgICAgICAgICBwcm9qZWN0SXRlbS5yZW1vdmUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBoYW5kbGVVc2VySW5wdXQoKTtcblxuICAgICAgICBjb25zdCBwcm9qZWN0TmFtZSA9IHByb2plY3RJdGVtLmZpcnN0RWxlbWVudENoaWxkLnRleHRDb250ZW50O1xuICAgICAgICBoYW5kbGVycy5vblByb2plY3RBZGQocHJvamVjdE5hbWUpOyBcblxuICAgICAgICBjb25zdCBwcm9qZWN0TGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9qZWN0LWxpc3QnKTtcbiAgICAgICAgLy8gU2VsZWN0IGxhc3QgcHJvamVjdCBhZGRlZCBhbmQgZ2V0IGlkIGF0dHJpYnV0ZVxuICAgICAgICBjb25zdCBwcm9qZWN0SWQgPSBwcm9qZWN0TGlzdC5jaGlsZHJlbltwcm9qZWN0TGlzdC5jaGlsZEVsZW1lbnRDb3VudCAtIDJdLmdldEF0dHJpYnV0ZSgnZGF0YS1wcm9qZWN0LWlkJyk7XG4gICAgICAgIGlmICghYXdhaXRpbmdJbnB1dCgpKSBhZGRQcm9qZWN0VG9Ob3RlcGFkKHByb2plY3RJZCk7XG4gICAgfSk7XG5cbiAgICBpbnB1dEZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBoYW5kbGVVc2VySW5wdXQoKTtcbiAgICAgICAgY29uc3QgcHJvamVjdE5hbWUgPSBwcm9qZWN0SXRlbS5maXJzdEVsZW1lbnRDaGlsZC50ZXh0Q29udGVudDtcbiAgICAgICAgaGFuZGxlcnMub25Qcm9qZWN0QWRkKHByb2plY3ROYW1lKTsgXG4gICAgICAgIGNvbnN0IHByb2plY3RMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2plY3QtbGlzdCcpO1xuICAgICAgICBjb25zdCBwcm9qZWN0SWQgPSBwcm9qZWN0TGlzdC5jaGlsZHJlbltwcm9qZWN0TGlzdC5jaGlsZEVsZW1lbnRDb3VudCAtIDJdLmdldEF0dHJpYnV0ZSgnZGF0YS1wcm9qZWN0LWlkJyk7XG4gICAgICAgIGlmICghYXdhaXRpbmdJbnB1dCgpKSBhZGRQcm9qZWN0VG9Ob3RlcGFkKHByb2plY3RJZCk7XG4gICAgfSk7XG59XG5jb25zdCBkZWxldGVQcm9qZWN0ID0gKCkgPT4ge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgaWYgKGUudGFyZ2V0LmNsb3Nlc3QoJy5kZWxldGUtcHJvamVjdCcpKSB7XG4gICAgICAgICAgICBjb25zdCBwcm9qZWN0SXRlbSA9IGUudGFyZ2V0LmNsb3Nlc3QoJy5wcm9qZWN0LWl0ZW0nKVxuICAgICAgICAgICAgcHJvamVjdEl0ZW0ucmVtb3ZlKCk7XG4gICAgICAgICAgICBjb25zdCBwcm9qZWN0SWQgPSBwcm9qZWN0SXRlbS5kYXRhc2V0LnByb2plY3RJZDtcbiAgICAgICAgICAgIHVwZGF0ZVN0b3JhZ2UuZGVsZXRlUHJvamVjdChwcm9qZWN0SWQpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgLy8gVE9ETzogUmVtb3ZlIHByb2plY3QgZnJvbSBub3RlcGFkIGJ5IHJlbG9hZGluZyBsb2NhbFN0b3JhZ2UgaXRlbXMgZm9yIGN1cnJlbnQgc2VsZWN0ZWQgdGFiIChpLmUuIFRvZGF5KS4gSWYgY3VycmVudCBzZWxlY3QgdGFiIGlzIHRoZSBvbmUgdGhhdCBpcyBkZWxldGVkIGxvYWQgbm90ZXBhZCB3aXRoIEhvbWUgdGFiIFxufVxuXG4vLyBUT0RPOiBjcmVhdGUgZnVuY3Rpb24gdG8gdXBkYXRlIHByb2plY3QgbmFtZSBvbiBub3RlcGFkIHdoZW4gdXNlciBlZGl0cyBpdFxuIFxuY29uc3QgZWRpdFByb2plY3QgPSAoZSkgPT4ge1xuICAgIGlmIChhd2FpdGluZ0lucHV0KCkpIHJldHVybjtcbiAgICBcbiAgICAvLyBUaGlzIGlzIERPTSBTdHVmZlxuICAgIGNvbnN0IGlucHV0Rm9ybSA9IGNyZWF0ZUVsZW1lbnRzKCkuY3JlYXRlRm9ybSgpO1xuICAgIGNvbnN0IGlucHV0RmllbGQgPSBjcmVhdGVFbGVtZW50cygpLmNyZWF0ZUlucHV0RmllbGQoJ1Byb2plY3QgbmFtZS4uLicpO1xuICAgIGNvbnN0IHByb2plY3ROYW1lID0gZS50YXJnZXQucGFyZW50RWxlbWVudC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuXG4gICAgaW5wdXRGaWVsZC52YWx1ZSA9IHByb2plY3ROYW1lLnRleHRDb250ZW50O1xuICAgIHByb2plY3ROYW1lLnJlbW92ZSgpO1xuICAgIGlucHV0Rm9ybS5hcHBlbmQoaW5wdXRGaWVsZCk7XG5cbiAgICBjb25zdCBwcm9qZWN0SXRlbSA9IGUudGFyZ2V0LmNsb3Nlc3QoJy5wcm9qZWN0LWl0ZW0nKTtcbiAgICBwcm9qZWN0SXRlbS5pbnNlcnRCZWZvcmUoaW5wdXRGb3JtLCBwcm9qZWN0SXRlbS5jaGlsZE5vZGVzWzBdKTtcblxuICAgIGNvbnN0IHVzZXJJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN1c2VyLWlucHV0Jyk7XG4gICAgXG4gICAgY29uc3QgcHJvamVjdElkID0gcHJvamVjdEl0ZW0uZGF0YXNldC5wcm9qZWN0SWQ7XG5cbiAgICB1c2VySW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHVzZXJJbnB1dC52YWx1ZSAhPSAnJykgaGFuZGxlVXNlcklucHV0KCk7XG4gICAgICAgIC8vaWYgKCFhd2FpdGluZ0lucHV0KCkpIGVkaXRQcm9qZWN0T25Ob3RlcGFkKCk7XG4gICAgICAgIGNvbnN0IHByb2plY3ROYW1lID0gcHJvamVjdEl0ZW0uZmlyc3RFbGVtZW50Q2hpbGQudGV4dENvbnRlbnQ7XG4gICAgICAgIGhhbmRsZXJzLm9uUHJvamVjdE5hbWVFZGl0KHByb2plY3RJZCwgcHJvamVjdE5hbWUpO1xuICAgIH0pO1xuXG4gICAgaW5wdXRGb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgaGFuZGxlVXNlcklucHV0KCk7XG4gICAgICAgIC8vaWYgKCFhd2FpdGluZ0lucHV0KCkpIGVkaXRQcm9qZWN0T25Ob3RlcGFkKCk7XG4gICAgICAgIGNvbnN0IHByb2plY3ROYW1lID0gcHJvamVjdEl0ZW0uZmlyc3RFbGVtZW50Q2hpbGQudGV4dENvbnRlbnQ7XG4gICAgICAgIGhhbmRsZXJzLm9uUHJvamVjdE5hbWVFZGl0KHByb2plY3RJZCwgcHJvamVjdE5hbWUpO1xuICAgIH0pO1xufVxuXG5leHBvcnQgeyBcbiAgICBhZGRQcm9qZWN0LFxuICAgIGRlbGV0ZVByb2plY3QsXG4gICAgZWRpdFByb2plY3Rcbn0iLCJpbXBvcnQge2NyZWF0ZUVsZW1lbnRzfSBmcm9tIFwiLi9jcmVhdGVET01FbGVtZW50c1wiO1xuaW1wb3J0IHtmb3JtYXR9IGZyb20gXCJkYXRlLWZuc1wiO1xuaW1wb3J0IGhhbmRsZXJzIGZyb20gXCIuL2hhbmRsZXJzXCI7XG5pbXBvcnQgdXBkYXRlU3RvcmFnZSBmcm9tIFwiLi9zdG9yYWdlXCI7XG5cbmNvbnN0IHRvZ2dsZVRhc2sgPSAodGFza0VsZW1lbnQpID0+IHtcbiAgICB0YXNrRWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKCdjb21wbGV0ZWQnKTtcbn1cblxuY29uc3QgYWRkVGFza1RvRE9NID0gKGFkZFRhc2tCdG4pID0+IHtcbiAgICBpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3VzZXItaW5wdXQnKSkgcmV0dXJuO1xuICAgIGNvbnN0IHRhc2tMaXN0RWxlbWVudCA9IGNyZWF0ZUVsZW1lbnRzKCkuY3JlYXRlTGlzdEVsZW1lbnQoJ3Rhc2snKTtcbiAgICBjb25zdCB0YXNrU3BhbiA9IGNyZWF0ZUVsZW1lbnRzKCkuY3JlYXRlU3BhbkVsZW1lbnQoJ3Rhc2staXRlbScpO1xuICAgIGNvbnN0IGlucHV0Rm9ybSA9IGNyZWF0ZUVsZW1lbnRzKCkuY3JlYXRlRm9ybSgpO1xuICAgIGNvbnN0IGlucHV0RmllbGQgPSBjcmVhdGVFbGVtZW50cygpLmNyZWF0ZUlucHV0RmllbGQoJ0VudGVyIFRhc2suLi4nKTtcbiAgICBcbiAgICBpbnB1dEZvcm0uYXBwZW5kKGlucHV0RmllbGQpO1xuICAgIHRhc2tTcGFuLmFwcGVuZChpbnB1dEZvcm0pO1xuXG4gICAgY29uc3QgaWNvblNwYW4gPSBjcmVhdGVFbGVtZW50cygpLmNyZWF0ZVNwYW5FbGVtZW50KCdpY29ucycpO1xuICAgIGNvbnN0IGVkaXRJY29uID0gY3JlYXRlRWxlbWVudHMoKS5jcmVhdGVJbWFnZUVsZW1lbnQoJ2ltYWdlcy9lZGl0LWljb24uc3ZnJywgJ2VkaXQtaWNvbicpO1xuICAgIGNvbnN0IGRlbGV0ZUljb24gPSBjcmVhdGVFbGVtZW50cygpLmNyZWF0ZUltYWdlRWxlbWVudCgnaW1hZ2VzL2RlbGV0ZS1pY29uLnN2ZycsICdkZWxldGUtaWNvbicpO1xuXG4gICAgZWRpdEljb24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIGlmICh0YXNrTGlzdEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdjb21wbGV0ZWQnKSkgcmV0dXJuO1xuICAgICAgICBjb25zdCB0YXNrVGV4dFNwYW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGFzay10ZXh0Jyk7XG4gICAgICAgIGNvbnN0IHRhc2tOYW1lID0gdGFza1RleHRTcGFuLnRleHRDb250ZW50O1xuICAgICAgICB0YXNrVGV4dFNwYW4ucmVtb3ZlKCk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBpbnB1dEZvcm0gPSBjcmVhdGVFbGVtZW50cygpLmNyZWF0ZUZvcm0oKTtcbiAgICAgICAgY29uc3QgaW5wdXRGaWVsZCA9IGNyZWF0ZUVsZW1lbnRzKCkuY3JlYXRlSW5wdXRGaWVsZCgnRW50ZXIgVGFzay4uLicpO1xuXG4gICAgICAgIGlucHV0RmllbGQudmFsdWUgPSB0YXNrTmFtZTtcbiAgICAgICAgXG4gICAgICAgIGlucHV0Rm9ybS5hcHBlbmQoaW5wdXRGaWVsZCk7XG4gICAgICAgIHRhc2tTcGFuLmluc2VydEJlZm9yZShpbnB1dEZvcm0sIGljb25TcGFuKTtcbiAgICAgICAgdGFza0xpc3RFbGVtZW50LnByZXBlbmQodGFza1NwYW4pO1xuICAgICAgICBhZGRUYXNrKCk7XG4gICAgfSk7XG5cbiAgICBkZWxldGVJY29uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgY29uc3QgcHJvamVjdElkID0gZS50YXJnZXQuY2xvc2VzdCgnW2RhdGEtcHJvamVjdC1pZF0nKS5kYXRhc2V0LnByb2plY3RJZDtcbiAgICAgICAgY29uc3QgdGFza0lkID0gZS50YXJnZXQuY2xvc2VzdCgnW2RhdGEtdGFzay1pZF0nKS5kYXRhc2V0LnRhc2tJZDtcblxuICAgICAgICB0YXNrTGlzdEVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgIHVwZGF0ZVN0b3JhZ2UuZGVsZXRlVGFzayhwcm9qZWN0SWQsIHRhc2tJZCk7XG4gICAgfSk7XG5cbiAgICBpY29uU3Bhbi5hcHBlbmQoZWRpdEljb24sIGRlbGV0ZUljb24pO1xuICAgIHRhc2tTcGFuLmFwcGVuZChpY29uU3Bhbik7XG4gICAgY29uc3QgZHVlRGF0ZSA9IGFkZER1ZURhdGVUb0RPTSgpO1xuICAgIHRhc2tMaXN0RWxlbWVudC5hcHBlbmQodGFza1NwYW4sIGR1ZURhdGUpO1xuICAgIFxuICAgIGNvbnN0IGNvbnRhaW5lciA9IGFkZFRhc2tCdG4uY2xvc2VzdCgnLnRvZG9zJyk7XG4gICAgY29uc3QgbnVtYmVyT2ZUYXNrcyA9IGNvbnRhaW5lci5jaGlsZEVsZW1lbnRDb3VudCAtIDI7XG5cbiAgICBjb250YWluZXIuaW5zZXJ0QmVmb3JlKHRhc2tMaXN0RWxlbWVudCwgY29udGFpbmVyLmNoaWxkcmVuW251bWJlck9mVGFza3NdKTtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBpbnB1dEZpZWxkLmZvY3VzKCk7XG4gICAgfSwgMCk7XG5cbiAgICByZXR1cm4gdGFza1NwYW47XG59XG5cbmNvbnN0IGFkZER1ZURhdGVUb0RPTSA9ICgpID0+IHtcbiAgICBjb25zdCBkdWVEYXRlU3BhbiA9IGNyZWF0ZUVsZW1lbnRzKCkuY3JlYXRlU3BhbkVsZW1lbnQoJ2R1ZS1kYXRlJyk7XG5cbiAgICBjb25zdCBwcmlvcml0eUljb24gPSBjcmVhdGVFbGVtZW50cygpLmNyZWF0ZUltYWdlRWxlbWVudCgnaW1hZ2VzL3ByaW9yaXR5LWljb24uc3ZnJywgJ3ByaW9yaXR5LWljb24nKVxuICAgIHByaW9yaXR5SWNvbi5jbGFzc0xpc3QuYWRkKCdwcmlvcml0eS1sb3cnKTtcbiAgICBcbiAgICBjb25zdCBkYXRlTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuICAgIGRhdGVMYWJlbC5jbGFzc0xpc3QuYWRkKCdkYXRlLWxhYmVsJyk7XG4gICAgXG4gICAgY29uc3QgZGF0ZUlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICBkYXRlSW5wdXQuc2V0QXR0cmlidXRlKCd0eXBlJywgJ2RhdGUnKTtcbiAgICBkYXRlSW5wdXQucmVxdWlyZWQgPSB0cnVlO1xuXG4gICAgY29uc3QgY2FsZW5kYXJJY29uID0gY3JlYXRlRWxlbWVudHMoKS5jcmVhdGVJbWFnZUVsZW1lbnQoJ2ltYWdlcy9jYWxlbmRhci1pY29uLnN2ZycsICdjYWxlbmRhci1pY29uJyk7XG5cbiAgICBkYXRlTGFiZWwuYXBwZW5kKGRhdGVJbnB1dCwgY2FsZW5kYXJJY29uKTtcbiAgICBkdWVEYXRlU3Bhbi5hcHBlbmQocHJpb3JpdHlJY29uLCBkYXRlTGFiZWwpO1xuXG4gICAgcmV0dXJuIGR1ZURhdGVTcGFuO1xufVxuXG5jb25zdCBhZGRUYXNrID0gKCkgPT4ge1xuICAgIGNvbnN0IGlucHV0RmllbGQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdXNlci1pbnB1dCcpO1xuICAgIGNvbnN0IGlucHV0Rm9ybSA9IGlucHV0RmllbGQucGFyZW50RWxlbWVudDtcbiAgICBjb25zdCB0YXNrQ29udGFpbmVyID0gaW5wdXRGb3JtLnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgICBcbiAgICBpbnB1dEZpZWxkLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBjb25zdCBwcm9qZWN0SWQgPSBlLnRhcmdldC5jbG9zZXN0KCdbZGF0YS1wcm9qZWN0LWlkXScpLmRhdGFzZXQucHJvamVjdElkO1xuICAgICAgICBjb25zdCB0YXNrID0gaW5wdXRGaWVsZC52YWx1ZTtcbiAgICAgICAgdmFsaWRhdGVVc2VySW5wdXQoKTtcbiAgICAgICAgaWYgKHRhc2spIGNyZWF0ZVRhc2sodGFzaywgcHJvamVjdElkLCB0YXNrQ29udGFpbmVyKTtcbiAgICB9KTtcbiAgICBcbiAgICBpbnB1dEZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBjb25zdCBwcm9qZWN0SWQgPSBlLnRhcmdldC5jbG9zZXN0KCdbZGF0YS1wcm9qZWN0LWlkXScpLmRhdGFzZXQucHJvamVjdElkO1xuICAgICAgICBjb25zdCB0YXNrID0gaW5wdXRGaWVsZC52YWx1ZTtcbiAgICAgICAgdmFsaWRhdGVVc2VySW5wdXQoKTtcbiAgICAgICAgaWYgKHRhc2spIGNyZWF0ZVRhc2sodGFzaywgcHJvamVjdElkLCB0YXNrQ29udGFpbmVyKTtcbiAgICB9KTtcbn1cblxuY29uc3QgY3JlYXRlVGFzayA9ICh0YXNrLCBwcm9qZWN0SWQsIHRhc2tDb250YWluZXIpID0+IHtcbiAgICBpZiAodGFza0NvbnRhaW5lci5kYXRhc2V0LnRhc2tJZCkge1xuICAgICAgICByZXR1cm4gaGFuZGxlcnMub25UYXNrTmFtZUVkaXQocHJvamVjdElkLCB0YXNrQ29udGFpbmVyLmRhdGFzZXQudGFza0lkLCB0YXNrKTtcbiAgICB9XG4gICAgY29uc3QgdGFza09iaiA9IGhhbmRsZXJzLm9uVGFza0FkZCh0YXNrLCBwcm9qZWN0SWQpO1xuICAgIHRhc2tDb250YWluZXIuc2V0QXR0cmlidXRlKCdkYXRhLXRhc2staWQnLCB0YXNrT2JqLnRhc2tJZCk7XG59XG5cbmNvbnN0IHZhbGlkYXRlVXNlcklucHV0ID0gKCkgPT4ge1xuICAgIGNvbnN0IGlucHV0RmllbGQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdXNlci1pbnB1dCcpO1xuICAgIGNvbnN0IGlucHV0Rm9ybSA9IGlucHV0RmllbGQucGFyZW50RWxlbWVudDtcbiAgICBjb25zdCB0YXNrSXRlbSA9IGlucHV0Rm9ybS5wYXJlbnRFbGVtZW50O1xuICAgIGNvbnN0IHRhc2tDb250YWluZXIgPSB0YXNrSXRlbS5wYXJlbnRFbGVtZW50O1xuXG4gICAgY29uc3QgdXNlcklucHV0ID0gaW5wdXRGaWVsZC52YWx1ZS50cmltKCk7XG4gICAgY29uc3QgdGFza1RleHRTcGFuID0gY3JlYXRlRWxlbWVudHMoKS5jcmVhdGVTcGFuRWxlbWVudCgndGFzay10ZXh0Jyk7XG4gICAgdGFza1RleHRTcGFuLmFwcGVuZCh1c2VySW5wdXQpO1xuXG4gICAgLy8gUmVtb3ZlcyB0YXNrIGNvbnRhaW5lciBpZiB0YXNrIGlzbid0IHlldCBpbiBsb2NhbFN0b3JhZ2UgKGhhcyBhIHRhc2tJZCBkYXRhIGF0dHJpYnV0ZSlcbiAgICBpZiAodXNlcklucHV0ID09ICcnICYmICF0YXNrQ29udGFpbmVyLmRhdGFzZXQudGFza0lkKSB7XG4gICAgICAgIHRhc2tDb250YWluZXIucmVtb3ZlKCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9IFxuICAgIGVsc2UgaWYgKHVzZXJJbnB1dCA9PSAnJyAmJiB0YXNrQ29udGFpbmVyLmRhdGFzZXQudGFza0lkKSByZXR1cm47XG4gICAgaW5wdXRGb3JtLnJlbW92ZSgpO1xuICAgIHRhc2tJdGVtLnByZXBlbmQodGFza1RleHRTcGFuKTtcbn1cblxuLy8gVE9ETzogVXBkYXRlIHByaW9yaXR5IGluIGxvY2FsU3RvcmFnZVxuY29uc3QgdXBkYXRlUHJpb3JpdHkgPSAoZXZlbnRUYXJnZXQpID0+IHtcbiAgICBjb25zdCB0YXNrSXRlbUNsYXNzTGlzdCA9IGV2ZW50VGFyZ2V0LnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC5jbGFzc0xpc3Q7XG4gICAgaWYgKHRhc2tJdGVtQ2xhc3NMaXN0LmNvbnRhaW5zKCdjb21wbGV0ZWQnKSkgcmV0dXJuO1xuICAgIGNvbnN0IHByb2plY3RJZCA9IGV2ZW50VGFyZ2V0LmNsb3Nlc3QoWycucHJvamVjdCddKS5kYXRhc2V0LnByb2plY3RJZDtcbiAgICBjb25zdCB0YXNrSWQgPSBldmVudFRhcmdldC5jbG9zZXN0KCdbZGF0YS10YXNrLWlkJykuZGF0YXNldC50YXNrSWQ7XG5cbiAgICBjb25zdCBwcmlvcml0eUNsYXNzTGlzdCA9IGV2ZW50VGFyZ2V0LmNsYXNzTGlzdDtcblxuICAgIGlmIChwcmlvcml0eUNsYXNzTGlzdC5jb250YWlucygncHJpb3JpdHktbG93JykpIHtcbiAgICAgICAgcHJpb3JpdHlDbGFzc0xpc3QucmVtb3ZlKCdwcmlvcml0eS1sb3cnKTtcbiAgICAgICAgcHJpb3JpdHlDbGFzc0xpc3QuYWRkKCdwcmlvcml0eS1tZWRpdW0nKTtcbiAgICAgICAgcmV0dXJuIGhhbmRsZXJzLm9uVGFza1ByaW9yaXR5RWRpdChwcm9qZWN0SWQsIHRhc2tJZCwgJ21lZGl1bScpOyBcbiAgICB9XG4gICAgaWYgKHByaW9yaXR5Q2xhc3NMaXN0LmNvbnRhaW5zKCdwcmlvcml0eS1tZWRpdW0nKSkge1xuICAgICAgICBwcmlvcml0eUNsYXNzTGlzdC5yZW1vdmUoJ3ByaW9yaXR5LW1lZGl1bScpO1xuICAgICAgICBwcmlvcml0eUNsYXNzTGlzdC5hZGQoJ3ByaW9yaXR5LWhpZ2gnKTtcbiAgICAgICAgcmV0dXJuIGhhbmRsZXJzLm9uVGFza1ByaW9yaXR5RWRpdChwcm9qZWN0SWQsIHRhc2tJZCwgJ2hpZ2gnKTtcbiAgICB9XG4gICAgaWYgKHByaW9yaXR5Q2xhc3NMaXN0LmNvbnRhaW5zKCdwcmlvcml0eS1oaWdoJykpIHtcbiAgICAgICAgcHJpb3JpdHlDbGFzc0xpc3QucmVtb3ZlKCdwcmlvcml0eS1oaWdoJyk7XG4gICAgICAgIHByaW9yaXR5Q2xhc3NMaXN0LmFkZCgncHJpb3JpdHktbG93Jyk7XG4gICAgICAgIHJldHVybiBoYW5kbGVycy5vblRhc2tQcmlvcml0eUVkaXQocHJvamVjdElkLCB0YXNrSWQsICdsb3cnKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7XG4gICAgdG9nZ2xlVGFzayxcbiAgICBhZGRUYXNrVG9ET00sXG4gICAgYWRkVGFzayxcbiAgICB1cGRhdGVQcmlvcml0eSxcbn0iLCJpbXBvcnQgeyBhZGRQcm9qZWN0LCBkZWxldGVQcm9qZWN0LCBlZGl0UHJvamVjdCB9IGZyb20gXCIuL3Byb2plY3RzXCI7XG5pbXBvcnQgdXBkYXRlU3RvcmFnZSBmcm9tIFwiLi9zdG9yYWdlXCI7XG5pbXBvcnQgeyB1cGRhdGVQcm9qZWN0TGlzdCB9IGZyb20gXCIuL2NyZWF0ZURPTUVsZW1lbnRzXCI7XG5pbXBvcnQgeyB0b2dnbGVUYXNrLCBhZGRUYXNrVG9ET00sIGFkZFRhc2ssIHVwZGF0ZVByaW9yaXR5IH0gZnJvbSBcIi4vdGFza3NcIjtcblxuLy8gTG9hZCBsb2NhbFN0b3JhZ2UgaXRlbXMgb24gcGFnZSBsb2FkXG53aW5kb3cub25sb2FkID0gKCkgPT4ge1xuICAgIGNvbnN0IHByb2plY3RzID0gdXBkYXRlU3RvcmFnZS5nZXRQcm9qZWN0cygpO1xuICAgIHVwZGF0ZVByb2plY3RMaXN0KHByb2plY3RzKTtcbn1cblxuLy8gU2lkZWJhciBNb2R1bGVcbmNvbnN0IHNpZGViYXJDb250cm9sbGVyID0gKCgpID0+IHtcblxuICAgIGNvbnN0IG1vYmlsZVRvZ2dsZUJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiYXJzLWljb24tbW9iaWxlJyk7XG4gICAgaWYgKHdpbmRvdy5pbm5lcldpZHRoIDw9IDEwMjQgJiYgbW9iaWxlVG9nZ2xlQnRuLmNsYXNzTGlzdC5jb250YWlucygnaGlkZGVuJykpIHtcbiAgICAgICAgbW9iaWxlVG9nZ2xlQnRuLmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicpO1xuICAgIH1cblxuICAgIGNvbnN0IHNpZGViYXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2lkZWJhcicpO1xuICAgIFxuICAgIGNvbnN0IHRvZ2dsZVNpZGViYXIgPSAoKSA9PiB7XG4gICAgICAgIHNpZGViYXIuY2xhc3NMaXN0LnRvZ2dsZSgndG9nZ2xlLXNpZGViYXInKTtcbiAgICAgICAgaWYgKHdpbmRvdy5pbm5lcldpZHRoIDw9IDEwMjQpIG1vYmlsZVRvZ2dsZUJ0bi5jbGFzc0xpc3QudG9nZ2xlKCdoaWRkZW4nKTtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgdG9nZ2xlQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJhcnMtaWNvbicpO1xuICAgIHRvZ2dsZUJ0bi5mb3JFYWNoKGJ1dHRvbiA9PiB7XG4gICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRvZ2dsZVNpZGViYXIpO1xuICAgIH0pOyAgICAgICAgXG59KSgpO1xuXG5jb25zdCBwcm9qZWN0Q29udHJvbGxlciA9ICgoKSA9PiB7XG4gICAgZGVsZXRlUHJvamVjdCgpO1xuICAgIGNvbnN0IGFkZFByb2plY3RCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1hZGQtcHJvamVjdF0nKTtcbiAgICBhZGRQcm9qZWN0QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYWRkUHJvamVjdCk7XG5cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2VkaXQtcHJvamVjdCcpKSB7XG4gICAgICAgICAgICBlZGl0UHJvamVjdChlKTtcbiAgICAgICAgfVxuICAgIH0pO1xufSkoKTtcblxuY29uc3QgdGFza0NvbnRyb2xsZXIgPSAoKCkgPT4ge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygndGFzay1pdGVtJykpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhc2tFbGVtZW50ID0gZS50YXJnZXQucGFyZW50RWxlbWVudDtcbiAgICAgICAgICAgIHRvZ2dsZVRhc2sodGFza0VsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2FkZC10YXNrJykpIHtcbiAgICAgICAgICAgIGFkZFRhc2tUb0RPTShlLnRhcmdldCk7XG4gICAgICAgICAgICBhZGRUYXNrKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygncHJpb3JpdHktaWNvbicpKSB7XG4gICAgICAgICAgICB1cGRhdGVQcmlvcml0eShlLnRhcmdldCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn0pKCk7XG4vKlxudXBkYXRlU3RvcmFnZS5zYXZlUHJvamVjdCh7XG4gICAgcHJvamVjdE5hbWU6IFwiUHJvamVjdCAxXCIsXG4gICAgdGFza3M6IFtbXCJGaW5pc2ggdG9kbyBsaXN0XCIsIFwibG93XCIsIFwiZHVlRGF0ZVwiLCBmYWxzZV0sIFtcIkRvIHNvbWV0aGluZ1wiLCBcIm1lZGl1bVwiLCBcImR1ZURhdGVcIiwgdHJ1ZV0sIFtcIkRvIHNvbWV0aGluZyBlbHNlXCIsIFwiaGlnaFwiLCBcImR1ZURhdGVcIiwgZmFsc2VdXSxcbiAgICBpZDogODE2MDg5XG59KTtcbiovXG4vL3N0b3JhZ2UuZGVsZXRlUHJvamVjdCg1ODE4NDApOyJdLCJuYW1lcyI6WyJnZXRQcm9qZWN0cyIsIkpTT04iLCJwYXJzZSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJzYXZlUHJvamVjdCIsInByb2plY3RUb1NhdmUiLCJwcm9qZWN0cyIsImV4aXN0aW5nIiwiZmluZCIsInByb2plY3QiLCJpZCIsInByb2plY3ROYW1lIiwidGFza3MiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJwdXNoIiwic2V0SXRlbSIsInN0cmluZ2lmeSIsImdldFRhc2tzIiwicHJvamVjdElkIiwiZGVsZXRlUHJvamVjdCIsInVwZGF0ZWRQcm9qZWN0TGlzdCIsImZpbHRlciIsImRlbGV0ZVRhc2siLCJ0YXNrSWQiLCJwcm9qZWN0V2l0aFRhc2siLCJ1cGRhdGVkVGFza09iaiIsInRhc2tPYmoiLCJmaW5kVGFza1RvVXBkYXRlIiwiZXhpc3RpbmdUYXNrSWQiLCJ0YXNrIiwidXBkYXRlVGFzayIsInVwZGF0ZWRUYXNrIiwicHJvamVjdFRvVXBkYXRlIiwidGFza3NBcnJheSIsImluZGV4T2ZVcGRhdGVkVGFzayIsImZpbmRJbmRleCIsIl9yZWZyZXNoUHJvamVjdExpc3QiLCJfc2V0UHJvamVjdExpc3QiLCJ1cGRhdGVQcm9qZWN0TGlzdCIsIl9zZXRBY3RpdmVUYWIiLCJ0YWIiLCJ1cGRhdGVBY3RpdmVUYWIiLCJvblByb2plY3RTZWxlY3QiLCJwcm9qZWN0T2JqZWN0Iiwic2VsZWN0ZWRQcm9qZWN0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwib25Qcm9qZWN0QWRkIiwibmV3UHJvamVjdCIsIm5ld1Byb2plY3RET01FbGVtZW50Iiwib25Qcm9qZWN0TmFtZUVkaXQiLCJvblRhc2tBZGQiLCJuZXdUYXNrIiwiaXRlbSIsInByaW9yaXR5IiwiZHVlRGF0ZSIsImlzQ29tcGxldGUiLCJvblRhc2tOYW1lRWRpdCIsIm5ld1Rhc2tOYW1lIiwiZXhpc3RpbmdUYXNrIiwib25UYXNrUHJpb3JpdHlFZGl0IiwibmV3UHJpb3JpdHkiLCJjcmVhdGVFbGVtZW50cyIsImNyZWF0ZUxpc3RFbGVtZW50IiwiaHRtbENsYXNzIiwibGkiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwiY3JlYXRlU3BhbkVsZW1lbnQiLCJzcGFuIiwiY2xhc3NMaXN0IiwiYWRkIiwiY3JlYXRlSW1hZ2VFbGVtZW50Iiwic3JjIiwiaW1nIiwiY3JlYXRlSW5wdXRGaWVsZCIsInBsYWNlaG9sZGVyVGV4dCIsInVzZXJJbnB1dCIsInJlcXVpcmVkIiwiY3JlYXRlRm9ybSIsImNyZWF0ZURpdiIsImRpdiIsImNyZWF0ZUljb25TcGFuIiwidmlldyIsImljb25TcGFuIiwiZWRpdEljb24iLCJkZWxldGVJY29uIiwiYXBwZW5kIiwiYWRkUHJvamVjdFRvTm90ZXBhZCIsInByb2plY3RMaXN0IiwiY3VycmVudFByb2plY3ROdW1iZXIiLCJjaGlsZEVsZW1lbnRDb3VudCIsImNoaWxkcmVuIiwidGV4dENvbnRlbnQiLCJub3RlcGFkIiwicHJvamVjdERpdiIsInNraXBMaW5lIiwicHJvamVjdEhlYWRpbmciLCJoMiIsImgzIiwidGFza3NDb250YWluZXIiLCJhZGRUYXNrTGlzdEVsZW1lbnQiLCJhZGRUYXNrU3BhbiIsImFkZEljb24iLCJfY3JlYXRlUHJvamVjdEl0ZW1IVE1MIiwibmFtZSIsInByb2plY3RJdGVtIiwicHJvamVjdHNMaXN0Q29udGFpbmVyIiwiYWRkUHJvamVjdEJ0biIsInNsaWNlIiwiY2FsbCIsImZvckVhY2giLCJjb250YWlucyIsInJlbW92ZSIsImh0bWwiLCJpbnNlcnRCZWZvcmUiLCJxdWVyeVNlbGVjdG9yQWxsIiwiYWRkRXZlbnRMaXN0ZW5lciIsImRhdGFzZXQiLCJjdXJyZW50QWN0aXZlVGFiIiwiYXdhaXRpbmdJbnB1dCIsImhhbmRsZVVzZXJJbnB1dCIsInBhcmVudEVsZW1lbnQiLCJwcm9qZWN0U3BhbiIsInZhbHVlIiwidHJpbSIsImNoaWxkTm9kZXMiLCJhZGRQcm9qZWN0IiwicHJvamVjdHNDb250YWluZXIiLCJwcm9qZWN0TGlzdEVsZW1lbnQiLCJwcm9qZWN0SW5wdXRGb3JtIiwicHJvamVjdE5hbWVJbnB1dCIsImxhc3RFbGVtZW50Q2hpbGQiLCJzZXRUaW1lb3V0IiwiZm9jdXMiLCJhZGRQcm9qZWN0VG9TaWRlYmFyIiwiaW5wdXRGb3JtIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJnZXRBdHRyaWJ1dGUiLCJlIiwicHJldmVudERlZmF1bHQiLCJhZGRUYXNrIiwiaW5wdXRGaWVsZCIsInRhc2tDb250YWluZXIiLCJ0YXJnZXQiLCJjbG9zZXN0IiwidmFsaWRhdGVVc2VySW5wdXQiLCJjcmVhdGVUYXNrIiwidGFza0l0ZW0iLCJ0YXNrVGV4dFNwYW4iLCJwcmVwZW5kIiwid2luZG93Iiwib25sb2FkIiwibW9iaWxlVG9nZ2xlQnRuIiwiZ2V0RWxlbWVudEJ5SWQiLCJpbm5lcldpZHRoIiwidG9nZ2xlIiwic2lkZWJhciIsInRvZ2dsZVNpZGViYXIiLCJidXR0b24iLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwiZWRpdFByb2plY3QiLCJhZGRUYXNrQnRuIiwidGFza0xpc3RFbGVtZW50IiwidGFza1NwYW4iLCJ0YXNrTmFtZSIsImR1ZURhdGVTcGFuIiwicHJpb3JpdHlJY29uIiwiZGF0ZUxhYmVsIiwiZGF0ZUlucHV0IiwiY2FsZW5kYXJJY29uIiwiYWRkRHVlRGF0ZVRvRE9NIiwiY29udGFpbmVyIiwibnVtYmVyT2ZUYXNrcyIsImFkZFRhc2tUb0RPTSIsImV2ZW50VGFyZ2V0IiwicHJpb3JpdHlDbGFzc0xpc3QiLCJ1cGRhdGVQcmlvcml0eSJdLCJzb3VyY2VSb290IjoiIn0=