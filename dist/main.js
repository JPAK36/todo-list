(()=>{"use strict";const e=(()=>{const e=()=>JSON.parse(localStorage.getItem("projects")||"[]"),t=t=>{const n=e(),r=n.find((e=>e.id==t.id));r?(r.projectName=t.projectName,r.tasks=t.tasks):(t.id=Math.floor(1e6*Math.random()),n.push(t)),localStorage.setItem("projects",JSON.stringify(n))};return{getProjects:e,getTasks:t=>e().find((e=>e.id==t)).tasks,saveProject:t,deleteProject:t=>{const n=e().filter((e=>e.id!=t));localStorage.setItem("projects",JSON.stringify(n))},deleteTask:(n,r)=>{const a=e().find((e=>e.id==n)),o=a.tasks.filter((e=>e.taskId!=r));a.tasks=o,t(a)},findTaskToUpdate:(t,n)=>e().find((e=>e.id==t)).tasks.find((e=>e.taskId==n)),updateTask:(t,n)=>{const r=e(),a=r.find((e=>e.id==t)),o=a.tasks,s=o.findIndex((e=>e.taskId==n.taskId));o[s]=n,a.tasks=o,localStorage.setItem("projects",JSON.stringify(r))}}})();function t(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function n(e){t(1,arguments);var n=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===n?new Date(e.getTime()):"number"==typeof e||"[object Number]"===n?new Date(e):("string"!=typeof e&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function r(e){t(1,arguments);var r=n(e);return r.setHours(0,0,0,0),r}function a(e,n){t(2,arguments);var a=r(e),o=r(n);return a.getTime()===o.getTime()}function o(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}var s=36e5,c={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},i=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,d=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,l=/^([+-])(\d{2})(?::?(\d{2}))?$/;function u(e,n){t(1,arguments);var r=n||{},a=null==r.additionalDigits?2:o(r.additionalDigits);if(2!==a&&1!==a&&0!==a)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var s,c=m(e);if(c.date){var i=p(c.date,a);s=f(i.restDateString,i.year)}if(isNaN(s)||!s)return new Date(NaN);var d,l=s.getTime(),u=0;if(c.time&&(u=E(c.time),isNaN(u)||null===u))return new Date(NaN);if(!c.timezone){var g=new Date(l+u),k=new Date(0);return k.setFullYear(g.getUTCFullYear(),g.getUTCMonth(),g.getUTCDate()),k.setHours(g.getUTCHours(),g.getUTCMinutes(),g.getUTCSeconds(),g.getUTCMilliseconds()),k}return d=y(c.timezone),isNaN(d)?new Date(NaN):new Date(l+u+d)}function m(e){var t,n={},r=e.split(c.dateTimeDelimiter);if(r.length>2)return n;if(/:/.test(r[0])?(n.date=null,t=r[0]):(n.date=r[0],t=r[1],c.timeZoneDelimiter.test(n.date)&&(n.date=e.split(c.timeZoneDelimiter)[0],t=e.substr(n.date.length,e.length))),t){var a=c.timezone.exec(t);a?(n.time=t.replace(a[1],""),n.timezone=a[1]):n.time=t}return n}function p(e,t){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),r=e.match(n);if(!r)return{year:null};var a=r[1]&&parseInt(r[1]),o=r[2]&&parseInt(r[2]);return{year:null==o?a:100*o,restDateString:e.slice((r[1]||r[2]).length)}}function f(e,t){if(null===t)return null;var n=e.match(i);if(!n)return null;var r=!!n[4],a=g(n[1]),o=g(n[2])-1,s=g(n[3]),c=g(n[4]),d=g(n[5])-1;if(r)return function(e,t,n){return t>=1&&t<=53&&n>=0&&n<=6}(0,c,d)?function(e,t,n){var r=new Date(0);r.setUTCFullYear(e,0,4);var a=7*(t-1)+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+a),r}(t,c,d):new Date(NaN);var l=new Date(0);return function(e,t,n){return t>=0&&t<=11&&n>=1&&n<=(v[t]||(j(e)?29:28))}(t,o,s)&&function(e,t){return t>=1&&t<=(j(e)?366:365)}(t,a)?(l.setUTCFullYear(t,o,Math.max(a,s)),l):new Date(NaN)}function g(e){return e?parseInt(e):1}function E(e){var t=e.match(d);if(!t)return null;var n=k(t[1]),r=k(t[2]),a=k(t[3]);return function(e,t,n){return 24===e?0===t&&0===n:n>=0&&n<60&&t>=0&&t<60&&e>=0&&e<25}(n,r,a)?n*s+6e4*r+1e3*a:NaN}function k(e){return e&&parseFloat(e.replace(",","."))||0}function y(e){if("Z"===e)return 0;var t=e.match(l);if(!t)return 0;var n="+"===t[1]?-1:1,r=parseInt(t[2]),a=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,a)?n*(r*s+6e4*a):NaN}var v=[31,null,31,30,31,30,31,31,30,31,30,31];function j(e){return e%400==0||e%4==0&&e%100}function S(e,r){t(1,arguments);var a=r||{},s=a.locale,c=s&&s.options&&s.options.weekStartsOn,i=null==c?0:o(c),d=null==a.weekStartsOn?i:o(a.weekStartsOn);if(!(d>=0&&d<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var l=n(e),u=l.getDay(),m=(u<d?7:0)+u-d;return l.setDate(l.getDate()-m),l.setHours(0,0,0,0),l}function h(e,n,r){t(2,arguments);var a=S(e,r),o=S(n,r);return a.getTime()===o.getTime()}const T=(()=>{const n=()=>{const t=e.getProjects();N(t)},r=e=>{if(function(e){return t(1,arguments),a(e,Date.now())}(u(e.dueDate)))return e},o=e=>{if(function(e,n){return t(1,arguments),h(e,Date.now(),n)}(u(e.dueDate)))return e},s=e=>{c();const t=document.querySelector(".notepad");e.forEach((e=>{D(e.id);const n=e.tasks,r=t.querySelector(`[data-project-id="${e.id}"]`),a=r.querySelector("ul"),o=r.querySelector(".add-task");n.forEach((e=>{const t=w(e);a.insertBefore(t,o.parentElement)}))}))},c=()=>{document.querySelector("#writing-area").querySelectorAll(".project").forEach((e=>e.remove()))};return{onProjectSelect:t=>{const n=e.getProjects();s(n);const r=n.find((e=>e.id==t)),a=document.querySelector("#sidebar").querySelector(`[data-project-id='${r.id}']`);document.querySelectorAll(".project").forEach((e=>{e.dataset.projectId!=t&&e.remove()})),C(a)},onProjectAdd:t=>{const r={projectName:t,tasks:[]};e.saveProject(r),n(),document.querySelector(`[data-project-id='${r.id}']`)},onProjectNameEdit:(t,r,a=e.getTasks(t))=>{e.saveProject({id:t,projectName:r,tasks:a}),n()},onTaskAdd:(t,n)=>{const r={item:t,taskId:Math.floor(1e6*Math.random()),priority:"low",dueDate:null,isComplete:!1},a=e.getProjects().find((e=>e.id==n));return a.tasks.push(r),e.saveProject(a),r},onTaskNameEdit:(t,n,r)=>{const a=e.findTaskToUpdate(t,n);e.updateTask(t,{item:r,taskId:a.taskId,priority:a.priority,dueDate:a.dueDate,isComplete:a.isComplete})},onTaskPriorityEdit:(t,n,r)=>{const a=e.findTaskToUpdate(t,n);e.updateTask(t,{item:a.item,taskId:a.taskId,priority:r,dueDate:a.dueDate,isComplete:a.isComplete})},onTaskDueDateEdit:(t,n,r)=>{const a=e.findTaskToUpdate(t,n);e.updateTask(t,{item:a.item,taskId:a.taskId,priority:a.priority,dueDate:r,isComplete:a.isComplete})},onTaskCompleteEdit:(t,n,r)=>{const a=e.findTaskToUpdate(t,n);e.updateTask(t,{item:a.item,taskId:a.taskId,priority:a.priority,dueDate:a.dueDate,isComplete:r})},onHomeTabSelect:(e,t)=>{s(e),C(t)},onTodayTabSelect:(e,t)=>{s(e),e.forEach((e=>{const t=e.tasks;0===t.filter((e=>r(e))).length&&document.querySelector(".notepad").querySelector(`[data-project-id="${e.id}"]`).remove(),t.filter((e=>!r(e))).forEach((e=>{const t=document.querySelector(`[data-task-id="${e.taskId}"]`);t&&t.remove()}))})),C(t)},onThisWeekTabSelect:(e,t)=>{s(e),e.forEach((e=>{const t=e.tasks;0===t.filter((e=>o(e))).length&&document.querySelector(".notepad").querySelector(`[data-project-id="${e.id}"]`).remove(),t.filter((e=>!o(e))).forEach((e=>{const t=document.querySelector(`[data-task-id="${e.taskId}"]`);t&&t.remove()}))})),C(t)}}})(),I=()=>({createListElement:e=>{const t=document.createElement("li");return t.setAttribute("class",e),t},createSpanElement:e=>{const t=document.createElement("span");return t.classList.add(e),t},createImageElement:(e,t)=>{const n=document.createElement("img");return n.classList.add(t),n.setAttribute("src",e),n.setAttribute("draggable","false"),n},createInputField:e=>{const t=document.createElement("input");return t.setAttribute("type","text"),t.setAttribute("placeholder",e),t.setAttribute("id","user-input"),t.required=!0,t},createForm:()=>document.createElement("form"),createDiv:e=>{const t=document.createElement("div");return t.setAttribute("class",e),t}}),b=()=>{const e=I(),t=e.createSpanElement("icons"),n=e.createImageElement("images/edit-icon.svg","edit-icon"),r=e.createImageElement("images/delete-icon.svg","delete-icon");return n.classList.add("edit-project"),r.classList.add("delete-project"),t.append(n,r),t},D=t=>{const n=I(),r=e.getProjects().find((e=>e.id==t)).projectName,a=document.querySelector("#writing-area"),o=n.createDiv("project");o.setAttribute("data-project-id",t);const s=n.createDiv("skip-line"),c=n.createDiv("project-heading"),i=document.createElement("h2");i.setAttribute("class","notepad-text"),i.textContent=r;const d=document.createElement("h3");d.setAttribute("class","notepad-text"),d.textContent="Due Date";const l=document.createElement("ul");l.classList.add("notepad-text","todos");const u=n.createListElement("task"),m=n.createSpanElement("add-task"),p=n.createImageElement("images/add-icon.svg","add-icon");m.append(p,"Add Task"),u.append(m),l.append(u,s),c.append(i,d),o.append(c,l),a.append(o)},q=()=>{const e=I().createSpanElement("due-date"),t=I().createImageElement("images/priority-icon.svg","priority-icon");t.classList.add("priority-low");const n=document.createElement("label");n.classList.add("date-label");const r=document.createElement("input");r.setAttribute("type","date"),r.required=!0;const a=I().createImageElement("images/calendar-icon.svg","calendar-icon");return n.append(r,a),e.append(t,n),r.addEventListener("change",(()=>{const e=r.closest(".project").dataset.projectId,t=r.closest("[data-task-id]").dataset.taskId,n=r.value;return T.onTaskDueDateEdit(e,t,n)})),e},L=(e,t)=>{const n=I(),r=n.createListElement("project-item");r.setAttribute("data-project-id",e);const a=n.createSpanElement("project-name");a.textContent=t;const o=b();return r.append(a,o),r},N=e=>{const t=document.querySelector(".project-list"),n=document.querySelector("[data-add-project]");[].slice.call(t.children).forEach((e=>{e.classList.contains("project-item")&&e.remove()}));for(const r of e){const e=L(r.id,r.projectName);t.insertBefore(e,n)}t.querySelectorAll(".project-item").forEach((e=>{e.addEventListener("click",(()=>{T.onProjectSelect(e.dataset.projectId)}))}))},w=e=>{const t=I(),n=t.createListElement("task");n.setAttribute("data-task-id",e.taskId);const r=t.createSpanElement("task-item"),a=t.createSpanElement("task-text");a.textContent=e.item;const o=b();r.append(a,o);const s=q();return s.querySelector(".priority-icon").classList.add(`priority-${e.priority}`),s.querySelector("input").value=e.dueDate,e.isComplete&&n.classList.add("completed"),n.append(r,s),n},C=e=>{const t=document.querySelector(".active");t&&t.classList.remove("active"),e.classList.add("active"),e.children.item(0)},P=()=>null!=document.querySelector("#user-input"),A=()=>{const e=document.querySelector("#user-input"),t=e.parentElement.parentElement,n=I().createSpanElement("project-name"),r=e.value.trim();r&&(n.textContent=r,e.parentElement.remove(),t.insertBefore(n,t.childNodes[0]))},x=()=>{if(P())return;(()=>{const e=I(),t=document.querySelector(".project-list"),n=e.createListElement("project-item"),r=e.createForm(),a=e.createInputField("Project name...");r.append(a);const o=b();n.append(r,o),t.insertBefore(n,t.lastElementChild),setTimeout((()=>{a.focus()}),0)})();const e=document.querySelector("#user-input"),t=e.parentElement,n=t.parentElement;e.addEventListener("blur",(function(){if(""==e.value.trim())return void n.remove();A();const t=n.firstElementChild.textContent;T.onProjectAdd(t);const r=document.querySelector(".project-list"),a=r.children[r.childElementCount-2].getAttribute("data-project-id");P()||D(a)})),t.addEventListener("submit",(function(e){e.preventDefault(),A();const t=n.firstElementChild.textContent;T.onProjectAdd(t);const r=document.querySelector(".project-list"),a=r.children[r.childElementCount-2].getAttribute("data-project-id");P()||D(a)}))},U=()=>{const e=document.querySelector("#user-input"),t=e.parentElement,n=t.parentElement.parentElement;e.addEventListener("blur",(function(){const t=n.closest("[data-project-id]").dataset.projectId,r=e.value;F(),r&&$(r,t,n)})),t.addEventListener("submit",(function(t){t.preventDefault();const r=n.closest("[data-project-id]").dataset.projectId,a=e.value;F(),a&&$(a,r,n)}))},$=(e,t,n)=>{if(n.dataset.taskId)return T.onTaskNameEdit(t,n.dataset.taskId,e);const r=T.onTaskAdd(e,t);n.setAttribute("data-task-id",r.taskId)},F=()=>{const e=document.querySelector("#user-input"),t=e.parentElement,n=t.parentElement,r=n.parentElement,a=e.value.trim(),o=I().createSpanElement("task-text");o.append(a),""!=a||r.dataset.taskId?""==a&&r.dataset.taskId||(t.remove(),n.prepend(o)):r.remove()};window.onload=()=>{const t=e.getProjects(),n=document.querySelector('[data-tab="home"]');N(t),T.onHomeTabSelect(t,n)},(()=>{const t=document.getElementById("bars-icon-mobile");window.innerWidth<=1024&&t.classList.contains("hidden")&&t.classList.toggle("hidden");const n=document.getElementById("sidebar"),r=()=>{n.classList.toggle("toggle-sidebar"),window.innerWidth<=1024&&t.classList.toggle("hidden")};document.querySelectorAll(".bars-icon").forEach((e=>{e.addEventListener("click",r)}));const a=n.querySelector('[data-tab="home"]'),o=n.querySelector('[data-tab="today"]'),s=n.querySelector('[data-tab="this-week"]');a.addEventListener("click",(()=>{const t=e.getProjects();T.onHomeTabSelect(t,a)})),o.addEventListener("click",(()=>{const t=e.getProjects();T.onTodayTabSelect(t,o)})),s.addEventListener("click",(()=>{const t=e.getProjects();T.onThisWeekTabSelect(t,s)}))})(),document.querySelector(".project-list").addEventListener("click",(t=>{if(t.target.closest(".delete-project")){if(!confirm("Are you sure you want to delete this project and all its tasks? This action cannot be undone."))return;const n=t.target.closest("[data-project-id]").dataset.projectId;document.querySelectorAll(`[data-project-id="${n}"]`).forEach((e=>e.remove())),e.deleteProject(n)}})),document.querySelector("[data-add-project]").addEventListener("click",x),document.querySelector(".project-list").addEventListener("click",(e=>{e.target.classList.contains("edit-project")&&(e=>{if(P())return;const t=I().createForm(),n=I().createInputField("Project name..."),r=e.target.parentElement.previousElementSibling;n.value=r.textContent,r.remove(),t.append(n);const a=e.target.closest(".project-item");a.insertBefore(t,a.childNodes[0]);const o=document.querySelector("#user-input");o.focus();const s=a.dataset.projectId;o.addEventListener("blur",(function(){""!=o.value&&A();const e=a.firstElementChild.textContent;c(s,e),T.onProjectNameEdit(s,e)})),t.addEventListener("submit",(function(e){e.preventDefault(),A();const t=a.firstElementChild.textContent;c(s,t),T.onProjectNameEdit(s,t)}));const c=(e,t)=>{const n=document.querySelector(".notepad").querySelector(`[data-project-id="${e}"]`);n&&(n.childNodes[0].childNodes[0].textContent=t)}})(e)})),document.querySelector(".notepad").addEventListener("click",(t=>{var n,r;t.target.classList.contains("task-text")?(e=>{e.classList.toggle("completed");let t=!1;e.classList.contains("completed")&&(t=!0);const n=e.closest(".project").dataset.projectId,r=e.dataset.taskId;T.onTaskCompleteEdit(n,r,t)})(t.target.closest(".task")):t.target.classList.contains("add-task")?((e=>{if(document.getElementById("user-input"))return;const t=I().createListElement("task"),n=I().createSpanElement("task-item"),r=I().createForm(),a=I().createInputField("Enter Task...");r.append(a),n.append(r);const o=I().createSpanElement("icons"),s=I().createImageElement("images/edit-icon.svg","edit-icon"),c=I().createImageElement("images/delete-icon.svg","delete-icon");o.append(s,c),n.append(o);const i=q();t.append(n,i);const d=e.closest(".todos"),l=d.childElementCount-2;d.insertBefore(t,d.children[l]),setTimeout((()=>{a.focus()}),0)})(t.target),U()):t.target.classList.contains("priority-icon")?(e=>{if(e.parentElement.parentElement.classList.contains("completed"))return;const t=e.closest(".project").dataset.projectId,n=e.closest("[data-task-id]").dataset.taskId,r=e.classList;r.contains("priority-low")?(r.remove("priority-low"),r.add("priority-medium"),T.onTaskPriorityEdit(t,n,"medium")):r.contains("priority-medium")?(r.remove("priority-medium"),r.add("priority-high"),T.onTaskPriorityEdit(t,n,"high")):r.contains("priority-high")&&(r.remove("priority-high"),r.add("priority-low"),T.onTaskPriorityEdit(t,n,"low"))})(t.target):t.target.classList.contains("edit-icon")?(e=>{if(e.classList.contains("completed"))return;const t=e.querySelector(".task-text"),n=t.textContent;t.remove();const r=I().createForm(),a=I().createInputField("Enter Task...");a.value=n,r.append(a);const o=e.querySelector(".task-item"),s=e.querySelector(".icons");o.insertBefore(r,s),e.prepend(o),a.focus(),U()})(t.target.closest(".task")):t.target.classList.contains("delete-icon")&&(n=t.target.closest("[data-project-id]").dataset.projectId,r=t.target.closest("[data-task-id]").dataset.taskId,document.querySelector(`[data-task-id="${r}"]`).remove(),e.deleteTask(n,r))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,