(()=>{"use strict";const e=(()=>{const e=()=>JSON.parse(localStorage.getItem("projects")||"[]"),t=t=>{const n=e(),r=n.find((e=>e.id==t.id));r?(r.projectName=t.projectName,r.tasks=t.tasks):(t.id=Math.floor(1e6*Math.random()),n.push(t)),localStorage.setItem("projects",JSON.stringify(n))};return{getProjects:e,getTasks:t=>e().find((e=>e.id==t)).tasks,saveProject:t,deleteProject:t=>{const n=e().filter((e=>e.id!=t));localStorage.setItem("projects",JSON.stringify(n))},deleteTask:(n,r)=>{const a=e().find((e=>e.id==n)),s=a.tasks.filter((e=>e.taskId!=r));a.tasks=s,t(a)},findTaskToUpdate:(t,n)=>e().find((e=>e.id==t)).tasks.find((e=>e.taskId==n)),updateTask:(t,n)=>{const r=e(),a=r.find((e=>e.id==t)),s=a.tasks,o=s.findIndex((e=>e.taskId==n.taskId));s[o]=n,a.tasks=s,localStorage.setItem("projects",JSON.stringify(r))}}})(),t=(()=>{const t=()=>{const t=e.getProjects();n(t)},n=e=>{o(e)},r=e=>{c(e)};return{onProjectSelect:t=>{const n=e.getProjects().find((e=>e.id==t)),a=document.querySelector(`[data-project-id='${n.id}']`);r(a)},onProjectAdd:n=>{const a={projectName:n,tasks:[]};e.saveProject(a),t();const s=document.querySelector(`[data-project-id='${a.id}']`);r(s)},onProjectNameEdit:(n,r,a=e.getTasks(n))=>{e.saveProject({id:n,projectName:r,tasks:a}),t()},onTaskAdd:(t,n)=>{const r={item:t,taskId:Math.floor(1e6*Math.random()),priority:"low",dueDate:null,isComplete:!1},a=e.getProjects().find((e=>e.id==n));return a.tasks.push(r),e.saveProject(a),r},onTaskNameEdit:(t,n,r)=>{const a=e.findTaskToUpdate(t,n);e.updateTask(t,{item:r,taskId:a.taskId,priority:a.priority,dueDate:a.dueDate,isComplete:a.isComplete})}}})(),n=()=>({createListElement:e=>{const t=document.createElement("li");return t.setAttribute("class",e),t},createSpanElement:e=>{const t=document.createElement("span");return t.classList.add(e),t},createImageElement:(e,t)=>{const n=document.createElement("img");return n.classList.add(t),n.setAttribute("src",e),n.setAttribute("draggable","false"),n},createInputField:e=>{const t=document.createElement("input");return t.setAttribute("type","text"),t.setAttribute("placeholder",e),t.setAttribute("id","user-input"),t.required=!0,t},createForm:()=>document.createElement("form"),createDiv:e=>{const t=document.createElement("div");return t.setAttribute("class",e),t}}),r=()=>{const e=n(),t=e.createSpanElement("icons"),r=e.createImageElement("images/edit-icon.svg","edit-icon"),a=e.createImageElement("images/delete-icon.svg","delete-icon");return r.classList.add("edit-project"),a.classList.add("delete-project"),t.append(r,a),t},a=e=>{const t=n(),r=document.querySelector(".project-list"),a=r.childElementCount-2,s=r.children[a].textContent,o=document.querySelector("#writing-area"),c=t.createDiv("project");c.setAttribute("data-project-id",e);const i=t.createDiv("skip-line"),d=t.createDiv("project-heading"),l=document.createElement("h2");l.setAttribute("class","notepad-text"),l.textContent=s;const m=document.createElement("h3");m.setAttribute("class","notepad-text"),m.textContent="Due Date";const p=document.createElement("ul");p.classList.add("notepad-text","todos");const u=t.createListElement("task"),E=t.createSpanElement("add-task"),g=t.createImageElement("images/add-icon.svg","add-icon");E.append(g,"Add Task"),u.append(E),p.append(u,i),d.append(l,m),c.append(d,p),o.append(c)},s=(e,t)=>{const a=n(),s=a.createListElement("project-item");s.setAttribute("data-project-id",e);const o=a.createSpanElement("project-name");o.textContent=t;const c=r();return s.append(o,c),s},o=e=>{const n=document.querySelector(".project-list"),r=document.querySelector("[data-add-project]");[].slice.call(n.children).forEach((e=>{e.classList.contains("project-item")&&e.remove()}));for(const t of e){const e=s(t.id,t.projectName);n.insertBefore(e,r)}n.querySelectorAll(".project-item").forEach((e=>{e.addEventListener("click",(()=>{t.onProjectSelect(e.dataset.projectId)}))}))},c=e=>{const t=document.querySelector(".active");t&&t.classList.remove("active"),e.classList.add("active"),e.children.item(0)},i=()=>null!=document.querySelector("#user-input"),d=()=>{const e=document.querySelector("#user-input"),t=e.parentElement.parentElement,r=n().createSpanElement("project-name"),a=e.value.trim();a&&(r.textContent=a,e.parentElement.remove(),t.insertBefore(r,t.childNodes[0]))},l=()=>{if(i())return;(()=>{const e=n(),t=document.querySelector(".project-list"),a=e.createListElement("project-item"),s=e.createForm(),o=e.createInputField("Project name...");s.append(o);const c=r();a.append(s,c),t.insertBefore(a,t.lastElementChild),setTimeout((()=>{o.focus()}),0)})();const e=document.querySelector("#user-input"),s=e.parentElement,o=s.parentElement;e.addEventListener("blur",(function(){if(""==e.value.trim())return void o.remove();d();const n=o.firstElementChild.textContent;t.onProjectAdd(n);const r=document.querySelector(".project-list"),s=r.children[r.childElementCount-2].getAttribute("data-project-id");i()||a(s)})),s.addEventListener("submit",(function(e){e.preventDefault(),d();const n=o.firstElementChild.textContent;t.onProjectAdd(n);const r=document.querySelector(".project-list"),s=r.children[r.childElementCount-2].getAttribute("data-project-id");i()||a(s)}))},m=()=>{const e=document.querySelector("#user-input"),t=e.parentElement,n=t.parentElement.parentElement;e.addEventListener("blur",(function(t){const r=t.target.closest("[data-project-id]").dataset.projectId,a=e.value;u(),a&&p(a,r,n)})),t.addEventListener("submit",(function(t){t.preventDefault();const r=t.target.closest("[data-project-id]").dataset.projectId,a=e.value;u(),a&&p(a,r,n)}))},p=(e,n,r)=>{if(r.dataset.taskId)return t.onTaskNameEdit(n,r.dataset.taskId,e);const a=t.onTaskAdd(e,n);r.setAttribute("data-task-id",a.taskId)},u=()=>{const e=document.querySelector("#user-input"),t=e.parentElement,r=t.parentElement,a=r.parentElement,s=e.value.trim(),o=n().createSpanElement("task-text");o.append(s),""!=s||a.dataset.taskId?""==s&&a.dataset.taskId||(t.remove(),r.prepend(o)):a.remove()};window.onload=()=>{const t=e.getProjects();o(t)},(()=>{const e=document.getElementById("bars-icon-mobile");window.innerWidth<=1024&&e.classList.contains("hidden")&&e.classList.toggle("hidden");const t=document.getElementById("sidebar"),n=()=>{t.classList.toggle("toggle-sidebar"),window.innerWidth<=1024&&e.classList.toggle("hidden")};document.querySelectorAll(".bars-icon").forEach((e=>{e.addEventListener("click",n)}))})(),document.addEventListener("click",(t=>{if(t.target.closest(".delete-project")){const n=t.target.closest(".project-item");n.remove();const r=n.dataset.projectId;e.deleteProject(r)}})),document.querySelector("[data-add-project]").addEventListener("click",l),document.addEventListener("click",(e=>{e.target.classList.contains("edit-project")&&(e=>{if(i())return;const r=n().createForm(),a=n().createInputField("Project name..."),s=e.target.parentElement.previousElementSibling;a.value=s.textContent,s.remove(),r.append(a);const o=e.target.closest(".project-item");o.insertBefore(r,o.childNodes[0]);const c=document.querySelector("#user-input"),l=o.dataset.projectId;c.addEventListener("blur",(function(){""!=c.value&&d();const e=o.firstElementChild.textContent;t.onProjectNameEdit(l,e)})),r.addEventListener("submit",(function(e){e.preventDefault(),d();const n=o.firstElementChild.textContent;t.onProjectNameEdit(l,n)}))})(e)})),document.addEventListener("click",(t=>{t.target.classList.contains("task-item")&&t.target.parentElement.classList.toggle("completed"),t.target.classList.contains("add-task")&&((t=>{if(document.getElementById("user-input"))return;const r=n().createListElement("task"),a=n().createSpanElement("task-item"),s=n().createForm(),o=n().createInputField("Enter Task...");s.append(o),a.append(s);const c=n().createSpanElement("icons"),i=n().createImageElement("images/edit-icon.svg","edit-icon"),d=n().createImageElement("images/delete-icon.svg","delete-icon");i.addEventListener("click",(()=>{if(r.classList.contains("completed"))return;const e=document.querySelector(".task-text"),t=e.textContent;e.remove();const s=n().createForm(),o=n().createInputField("Enter Task...");o.value=t,s.append(o),a.insertBefore(s,c),r.prepend(a),m()})),d.addEventListener("click",(t=>{const n=t.target.closest("[data-project-id]").dataset.projectId,a=t.target.closest("[data-task-id]").dataset.taskId;r.remove(),e.deleteTask(n,a)})),c.append(i,d),a.append(c);const l=(()=>{const e=n().createSpanElement("due-date"),t=n().createImageElement("images/priority-icon.svg","priority-icon");t.classList.add("priority-low");const r=document.createElement("label");r.classList.add("date-label");const a=document.createElement("input");a.setAttribute("type","date"),a.required=!0;const s=n().createImageElement("images/calendar-icon.svg","calendar-icon");return r.append(a,s),e.append(t,r),e})();r.append(a,l);const p=t.closest(".todos"),u=p.childElementCount-2;p.insertBefore(r,p.children[u]),setTimeout((()=>{o.focus()}),0)})(t.target),m()),t.target.classList.contains("priority-icon")&&(e=>{if(e.parentElement.parentElement.classList.contains("completed"))return;const t=e.classList;t.contains("priority-low")?(t.remove("priority-low"),t.add("priority-medium")):t.contains("priority-medium")?(t.remove("priority-medium"),t.add("priority-high")):t.contains("priority-high")&&(t.remove("priority-high"),t.add("priority-low"))})(t.target)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,