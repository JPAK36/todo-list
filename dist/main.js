(()=>{"use strict";const e=(()=>{const e=()=>JSON.parse(localStorage.getItem("projects")||"[]"),t=t=>{const r=e(),n=r.find((e=>e.id==t.id));n?(n.projectName=t.projectName,n.tasks=t.tasks):(t.id=Math.floor(1e6*Math.random()),r.push(t)),localStorage.setItem("projects",JSON.stringify(r))};return{getProjects:e,getTasks:t=>e().find((e=>e.id==t)).tasks,saveProject:t,deleteProject:t=>{const r=e().filter((e=>e.id!=t));localStorage.setItem("projects",JSON.stringify(r))},deleteTask:(r,n)=>{const a=e().find((e=>e.id==r)),o=a.tasks.filter((e=>e.taskId!=n));a.tasks=o,t(a)},findTaskToUpdate:(t,r)=>e().find((e=>e.id==t)).tasks.find((e=>e.taskId==r)),updateTask:(t,r)=>{const n=e(),a=n.find((e=>e.id==t)),o=a.tasks,s=o.findIndex((e=>e.taskId==r.taskId));o[s]=r,a.tasks=o,localStorage.setItem("projects",JSON.stringify(n))}}})();function t(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function r(e){t(1,arguments);var r=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===r?new Date(e.getTime()):"number"==typeof e||"[object Number]"===r?new Date(e):("string"!=typeof e&&"[object String]"!==r||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function n(e){t(1,arguments);var n=r(e);return n.setHours(0,0,0,0),n}function a(e,r){t(2,arguments);var a=n(e),o=n(r);return a.getTime()===o.getTime()}function o(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}var s=36e5,c={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},i=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,d=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,l=/^([+-])(\d{2})(?::?(\d{2}))?$/;function u(e,r){t(1,arguments);var n=r||{},a=null==n.additionalDigits?2:o(n.additionalDigits);if(2!==a&&1!==a&&0!==a)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var s,c=m(e);if(c.date){var i=p(c.date,a);s=f(i.restDateString,i.year)}if(isNaN(s)||!s)return new Date(NaN);var d,l=s.getTime(),u=0;if(c.time&&(u=k(c.time),isNaN(u)||null===u))return new Date(NaN);if(!c.timezone){var g=new Date(l+u),E=new Date(0);return E.setFullYear(g.getUTCFullYear(),g.getUTCMonth(),g.getUTCDate()),E.setHours(g.getUTCHours(),g.getUTCMinutes(),g.getUTCSeconds(),g.getUTCMilliseconds()),E}return d=y(c.timezone),isNaN(d)?new Date(NaN):new Date(l+u+d)}function m(e){var t,r={},n=e.split(c.dateTimeDelimiter);if(n.length>2)return r;if(/:/.test(n[0])?(r.date=null,t=n[0]):(r.date=n[0],t=n[1],c.timeZoneDelimiter.test(r.date)&&(r.date=e.split(c.timeZoneDelimiter)[0],t=e.substr(r.date.length,e.length))),t){var a=c.timezone.exec(t);a?(r.time=t.replace(a[1],""),r.timezone=a[1]):r.time=t}return r}function p(e,t){var r=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),n=e.match(r);if(!n)return{year:null};var a=n[1]&&parseInt(n[1]),o=n[2]&&parseInt(n[2]);return{year:null==o?a:100*o,restDateString:e.slice((n[1]||n[2]).length)}}function f(e,t){if(null===t)return null;var r=e.match(i);if(!r)return null;var n=!!r[4],a=g(r[1]),o=g(r[2])-1,s=g(r[3]),c=g(r[4]),d=g(r[5])-1;if(n)return function(e,t,r){return t>=1&&t<=53&&r>=0&&r<=6}(0,c,d)?function(e,t,r){var n=new Date(0);n.setUTCFullYear(e,0,4);var a=7*(t-1)+r+1-(n.getUTCDay()||7);return n.setUTCDate(n.getUTCDate()+a),n}(t,c,d):new Date(NaN);var l=new Date(0);return function(e,t,r){return t>=0&&t<=11&&r>=1&&r<=(v[t]||(S(e)?29:28))}(t,o,s)&&function(e,t){return t>=1&&t<=(S(e)?366:365)}(t,a)?(l.setUTCFullYear(t,o,Math.max(a,s)),l):new Date(NaN)}function g(e){return e?parseInt(e):1}function k(e){var t=e.match(d);if(!t)return null;var r=E(t[1]),n=E(t[2]),a=E(t[3]);return function(e,t,r){return 24===e?0===t&&0===r:r>=0&&r<60&&t>=0&&t<60&&e>=0&&e<25}(r,n,a)?r*s+6e4*n+1e3*a:NaN}function E(e){return e&&parseFloat(e.replace(",","."))||0}function y(e){if("Z"===e)return 0;var t=e.match(l);if(!t)return 0;var r="+"===t[1]?-1:1,n=parseInt(t[2]),a=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,a)?r*(n*s+6e4*a):NaN}var v=[31,null,31,30,31,30,31,31,30,31,30,31];function S(e){return e%400==0||e%4==0&&e%100}function j(e,n){t(1,arguments);var a=n||{},s=a.locale,c=s&&s.options&&s.options.weekStartsOn,i=null==c?0:o(c),d=null==a.weekStartsOn?i:o(a.weekStartsOn);if(!(d>=0&&d<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var l=r(e),u=l.getDay(),m=(u<d?7:0)+u-d;return l.setDate(l.getDate()-m),l.setHours(0,0,0,0),l}function h(e,r,n){t(2,arguments);var a=j(e,n),o=j(r,n);return a.getTime()===o.getTime()}const T=(()=>{const r=()=>{const t=e.getProjects();w(t)},n=e=>{if(function(e){return t(1,arguments),a(e,Date.now())}(u(e.dueDate)))return e},o=e=>{if(function(e,r){return t(1,arguments),h(e,Date.now(),r)}(u(e.dueDate)))return e},s=e=>{c();const t=document.querySelector(".notepad");e.forEach((e=>{D(e.id);const r=e.tasks,n=t.querySelector(`[data-project-id="${e.id}"]`),a=n.querySelector("ul"),o=n.querySelector(".add-task");r.forEach((e=>{const t=L(e);a.insertBefore(t,o.parentElement)}))}))},c=()=>{document.querySelector("#writing-area").querySelectorAll(".project").forEach((e=>e.remove()))};return{onProjectSelect:t=>{const r=e.getProjects();s(r);const n=r.find((e=>e.id==t)),a=document.querySelector("#sidebar").querySelector(`[data-project-id='${n.id}']`);document.querySelectorAll(".project").forEach((e=>{e.dataset.projectId!=t&&e.remove()})),C(a)},onProjectAdd:t=>{const n={projectName:t,tasks:[]};e.saveProject(n),r(),document.querySelector(`[data-project-id='${n.id}']`)},onProjectNameEdit:(t,n,a=e.getTasks(t))=>{e.saveProject({id:t,projectName:n,tasks:a}),r()},onTaskAdd:(t,r)=>{const n={item:t,taskId:Math.floor(1e6*Math.random()),priority:"low",dueDate:null,isComplete:!1},a=e.getProjects().find((e=>e.id==r));return a.tasks.push(n),e.saveProject(a),n},onTaskNameEdit:(t,r,n)=>{const a=e.findTaskToUpdate(t,r);e.updateTask(t,{item:n,taskId:a.taskId,priority:a.priority,dueDate:a.dueDate,isComplete:a.isComplete})},onTaskPriorityEdit:(t,r,n)=>{const a=e.findTaskToUpdate(t,r);e.updateTask(t,{item:a.item,taskId:a.taskId,priority:n,dueDate:a.dueDate,isComplete:a.isComplete})},onTaskDueDateEdit:(t,r,n)=>{const a=e.findTaskToUpdate(t,r);e.updateTask(t,{item:a.item,taskId:a.taskId,priority:a.priority,dueDate:n,isComplete:a.isComplete})},onTaskCompleteEdit:(t,r,n)=>{const a=e.findTaskToUpdate(t,r);e.updateTask(t,{item:a.item,taskId:a.taskId,priority:a.priority,dueDate:a.dueDate,isComplete:n})},onHomeTabSelect:(e,t)=>{s(e),C(t)},onTodayTabSelect:(e,t)=>{s(e),e.forEach((e=>{const t=e.tasks;0===t.filter((e=>n(e))).length&&document.querySelector(".notepad").querySelector(`[data-project-id="${e.id}"]`).remove(),t.filter((e=>!n(e))).forEach((e=>{const t=document.querySelector(`[data-task-id="${e.taskId}"]`);t&&t.remove()}))})),C(t)},onThisWeekTabSelect:(e,t)=>{s(e),e.forEach((e=>{const t=e.tasks;0===t.filter((e=>o(e))).length&&document.querySelector(".notepad").querySelector(`[data-project-id="${e.id}"]`).remove(),t.filter((e=>!o(e))).forEach((e=>{const t=document.querySelector(`[data-task-id="${e.taskId}"]`);t&&t.remove()}))})),C(t)}}})(),I=()=>({createListElement:e=>{const t=document.createElement("li");return t.setAttribute("class",e),t},createSpanElement:e=>{const t=document.createElement("span");return t.classList.add(e),t},createImageElement:(e,t)=>{const r=document.createElement("img");return r.classList.add(t),r.setAttribute("src",e),r.setAttribute("draggable","false"),r},createInputField:e=>{const t=document.createElement("input");return t.setAttribute("type","text"),t.setAttribute("placeholder",e),t.setAttribute("id","user-input"),t.required=!0,t},createForm:()=>document.createElement("form"),createDiv:e=>{const t=document.createElement("div");return t.setAttribute("class",e),t}}),b=()=>{const e=I(),t=e.createSpanElement("icons"),r=e.createImageElement("images/edit-icon.svg","edit-icon"),n=e.createImageElement("images/delete-icon.svg","delete-icon");return r.classList.add("edit-project"),n.classList.add("delete-project"),t.append(r,n),t},D=t=>{const r=I(),n=e.getProjects().find((e=>e.id==t)).projectName,a=document.querySelector("#writing-area"),o=r.createDiv("project");o.setAttribute("data-project-id",t);const s=r.createDiv("skip-line"),c=r.createDiv("project-heading"),i=document.createElement("h2");i.setAttribute("class","notepad-text"),i.textContent=n;const d=document.createElement("h3");d.setAttribute("class","notepad-text"),d.textContent="Due Date";const l=document.createElement("ul");l.classList.add("notepad-text","todos");const u=r.createListElement("task"),m=r.createSpanElement("add-task"),p=r.createImageElement("images/add-icon.svg","add-icon");m.append(p,"Add Task"),u.append(m),l.append(u,s),c.append(i,d),o.append(c,l),a.append(o)},q=()=>{const e=I().createSpanElement("due-date"),t=I().createImageElement("images/priority-icon.svg","priority-icon");t.classList.add("priority-low");const r=document.createElement("label");r.classList.add("date-label");const n=document.createElement("input");n.setAttribute("type","date"),n.required=!0;const a=I().createImageElement("images/calendar-icon.svg","calendar-icon");return r.append(n,a),e.append(t,r),n.addEventListener("change",(()=>{const e=n.closest(".project").dataset.projectId,t=n.closest("[data-task-id]").dataset.taskId,r=n.value;return T.onTaskDueDateEdit(e,t,r)})),e},N=(e,t)=>{const r=I(),n=r.createListElement("project-item");n.setAttribute("data-project-id",e);const a=r.createSpanElement("project-name");a.textContent=t;const o=b();return n.append(a,o),n},w=e=>{const t=document.querySelector(".project-list"),r=document.querySelector("[data-add-project]");[].slice.call(t.children).forEach((e=>{e.classList.contains("project-item")&&e.remove()}));for(const n of e){const e=N(n.id,n.projectName);t.insertBefore(e,r)}t.querySelectorAll(".project-item").forEach((e=>{e.addEventListener("click",(t=>{const r=document.querySelector("#user-input");"IMG"===t.target.nodeName||r||T.onProjectSelect(e.dataset.projectId)}))}))},L=e=>{const t=I(),r=t.createListElement("task");r.setAttribute("data-task-id",e.taskId);const n=t.createSpanElement("task-item"),a=t.createSpanElement("task-text");a.textContent=e.item;const o=b();n.append(a,o);const s=q();return s.querySelector(".priority-icon").classList.add(`priority-${e.priority}`),s.querySelector("input").value=e.dueDate,e.isComplete&&r.classList.add("completed"),r.append(n,s),r},C=e=>{const t=document.querySelector(".active");t&&t.classList.remove("active"),e.classList.add("active"),e.children.item(0)},P=()=>null!=document.querySelector("#user-input"),A=()=>{const e=document.querySelector("#user-input"),t=e.parentElement.parentElement,r=I().createSpanElement("project-name"),n=e.value.trim();n&&(r.textContent=n,e.parentElement.remove(),t.insertBefore(r,t.childNodes[0]))},x=()=>{if(P())return;(()=>{const e=I(),t=document.querySelector(".project-list"),r=e.createListElement("project-item"),n=e.createForm(),a=e.createInputField("Project name...");n.append(a);const o=b();r.append(n,o),t.insertBefore(r,t.lastElementChild),setTimeout((()=>{a.focus()}),0)})();const e=document.querySelector("#user-input"),t=e.parentElement,r=t.parentElement;e.addEventListener("blur",(function(){if(""==e.value.trim())return void r.remove();A();const t=r.firstElementChild.textContent;T.onProjectAdd(t);const n=document.querySelector(".project-list"),a=n.children[n.childElementCount-2].getAttribute("data-project-id");P()||D(a)})),t.addEventListener("submit",(function(e){e.preventDefault(),A();const t=r.firstElementChild.textContent;T.onProjectAdd(t);const n=document.querySelector(".project-list"),a=n.children[n.childElementCount-2].getAttribute("data-project-id");P()||D(a)}))},$=()=>{const e=document.querySelector("#user-input"),t=e.parentElement,r=t.parentElement.parentElement;e.addEventListener("blur",(function(){const t=r.closest("[data-project-id]").dataset.projectId,n=e.value;F(),n&&U(n,t,r)})),t.addEventListener("submit",(function(t){t.preventDefault();const n=r.closest("[data-project-id]").dataset.projectId,a=e.value;F(),a&&U(a,n,r)}))},U=(e,t,r)=>{if(r.dataset.taskId)return T.onTaskNameEdit(t,r.dataset.taskId,e);const n=T.onTaskAdd(e,t);r.setAttribute("data-task-id",n.taskId)},F=()=>{const e=document.querySelector("#user-input"),t=e.parentElement,r=t.parentElement,n=r.parentElement,a=e.value.trim(),o=I().createSpanElement("task-text");o.append(a),""!=a||n.dataset.taskId?""==a&&n.dataset.taskId||(t.remove(),r.prepend(o),M(o,n)):n.remove()},M=(e,t)=>{const r=42*Math.round(t.offsetHeight/42);e.style.height=`${r}px`,t.style.height=`${r}px`};window.onload=()=>{const t=e.getProjects(),r=document.querySelector('[data-tab="home"]'),n=new MutationObserver((e=>{e.forEach((e=>{if(e.addedNodes.length){const e=document.querySelectorAll(".task");console.log(e),e.forEach((e=>{if(e.querySelector(".add-task")){const t=e.querySelector(".add-task");M(e,t)}else{const t=e.querySelector(".task-text");M(e,t)}}))}}))})),a=document.querySelector("#writing-area");n.observe(a,{childList:!0}),w(t),T.onHomeTabSelect(t,r)},(()=>{const t=document.getElementById("bars-icon-mobile");window.innerWidth<=1024&&t.classList.contains("hidden")&&t.classList.toggle("hidden");const r=document.getElementById("sidebar"),n=()=>{r.classList.toggle("toggle-sidebar"),window.innerWidth<=1024&&t.classList.toggle("hidden")};document.querySelectorAll(".bars-icon").forEach((e=>{e.addEventListener("click",n)}));const a=r.querySelector('[data-tab="home"]'),o=r.querySelector('[data-tab="today"]'),s=r.querySelector('[data-tab="this-week"]');a.addEventListener("click",(()=>{const t=e.getProjects();T.onHomeTabSelect(t,a)})),o.addEventListener("click",(()=>{const t=e.getProjects();T.onTodayTabSelect(t,o)})),s.addEventListener("click",(()=>{const t=e.getProjects();T.onThisWeekTabSelect(t,s)}))})(),document.querySelector(".project-list").addEventListener("click",(t=>{if(t.target.closest(".delete-project")){if(!confirm("Are you sure you want to delete this project and all its tasks? This action cannot be undone."))return;const r=t.target.closest("[data-project-id]").dataset.projectId;document.querySelectorAll(`[data-project-id="${r}"]`).forEach((e=>e.remove())),e.deleteProject(r)}})),document.querySelector("[data-add-project]").addEventListener("click",x),document.querySelector(".project-list").addEventListener("click",(e=>{e.target.classList.contains("edit-project")&&(e=>{if(P())return;const t=I().createForm(),r=I().createInputField("Project name..."),n=e.target.parentElement.previousElementSibling;r.value=n.textContent,n.remove(),t.append(r);const a=e.target.closest(".project-item");a.insertBefore(t,a.childNodes[0]);const o=document.querySelector("#user-input");o.focus();const s=a.dataset.projectId;o.addEventListener("blur",(function(){""!=o.value&&A();const e=a.firstElementChild.textContent;c(s,e),T.onProjectNameEdit(s,e)})),t.addEventListener("submit",(function(e){e.preventDefault(),A();const t=a.firstElementChild.textContent;c(s,t),T.onProjectNameEdit(s,t)}));const c=(e,t)=>{const r=document.querySelector(".notepad").querySelector(`[data-project-id="${e}"]`);r&&(r.childNodes[0].childNodes[0].textContent=t)}})(e)})),document.querySelector(".notepad").addEventListener("click",(t=>{var r,n;t.target.classList.contains("task-text")?(e=>{e.classList.toggle("completed");let t=!1;e.classList.contains("completed")&&(t=!0);const r=e.closest(".project").dataset.projectId,n=e.dataset.taskId;T.onTaskCompleteEdit(r,n,t)})(t.target.closest(".task")):t.target.classList.contains("add-task")?((e=>{if(document.getElementById("user-input"))return;const t=I().createListElement("task"),r=I().createSpanElement("task-item"),n=I().createForm(),a=I().createInputField("Enter Task...");n.append(a),r.append(n);const o=I().createSpanElement("icons"),s=I().createImageElement("images/edit-icon.svg","edit-icon"),c=I().createImageElement("images/delete-icon.svg","delete-icon");o.append(s,c),r.append(o);const i=q();t.append(r,i);const d=e.closest(".todos"),l=d.childElementCount-2;d.insertBefore(t,d.children[l]),setTimeout((()=>{a.focus()}),0)})(t.target),$()):t.target.classList.contains("priority-icon")?(e=>{if(e.parentElement.parentElement.classList.contains("completed"))return;const t=e.closest(".project").dataset.projectId,r=e.closest("[data-task-id]").dataset.taskId,n=e.classList;n.contains("priority-low")?(n.remove("priority-low"),n.add("priority-medium"),T.onTaskPriorityEdit(t,r,"medium")):n.contains("priority-medium")?(n.remove("priority-medium"),n.add("priority-high"),T.onTaskPriorityEdit(t,r,"high")):n.contains("priority-high")&&(n.remove("priority-high"),n.add("priority-low"),T.onTaskPriorityEdit(t,r,"low"))})(t.target):t.target.classList.contains("edit-icon")?(e=>{if(e.classList.contains("completed"))return;const t=e.querySelector(".task-text"),r=t.textContent;t.remove();const n=I().createForm(),a=I().createInputField("Enter Task...");a.value=r,n.append(a);const o=e.querySelector(".task-item"),s=e.querySelector(".icons");o.insertBefore(n,s),e.prepend(o),a.focus(),$()})(t.target.closest(".task")):t.target.classList.contains("delete-icon")&&(r=t.target.closest("[data-project-id]").dataset.projectId,n=t.target.closest("[data-task-id]").dataset.taskId,document.querySelector(`[data-task-id="${n}"]`).remove(),e.deleteTask(r,n))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,